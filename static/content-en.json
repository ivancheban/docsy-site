[
  {
    "title": "Search Results",
    "content": "",
    "url": "/search/"
  },
  {
    "title": "Technical Writer's Tools",
    "content": "<p>{{% pageinfo %}}\nThe Russians have started their bloody war in Ukraine, deliberately killing thousands of Ukrainian civilians.</p>\n<style>\n.responsive-iframe-container {\n    position: relative;\n    overflow: hidden;\n    padding-top: 56.25%; /* 16:9 Aspect Ratio */\n}\n\n.responsive-iframe-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: 0;\n}\n</style>\n\n<div class=\"responsive-iframe-container\">\n<iframe src=\"https://www.youtube.com/embed/VFbl2vrXKA0?si=zvP6MNijp3J-gCS9\" title=\"YouTube video player\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n</div>\n\n<p>{{% /pageinfo %}}</p>\n<p>This Documentation Portal provides information on static site generators and other tools for technical writers. This site is built using the Docsy theme and Hugo static site generator.</p>\n",
    "url": "/docs//"
  },
  {
    "title": "MadCap build failed error",
    "content": "<p>{{% pageinfo %}}\nOur goal is to resolve the error 10086 that occurs when you build the MadCap project.\n{{% /pageinfo %}}</p>\n<p>In MadCap Flare, the 10086 <strong>The process cannot access the file because it is being used by another process</strong> error will prevent you from building your PDF target.</p>\n<p><img alt=\"img\" src=\"/docs/img/build-error.png\" /></p>\n<p>Such error in my case arises when your MadCap project is bound to Git. You need to commit and push all your changes before building the target.</p>\n<p>Another workaround is:</p>\n<ol>\n<li>\n<p>Open Windows Task Manager.</p>\n</li>\n<li>\n<p>Select the <strong>AdobeCollabSync.exe</strong> process.</p>\n</li>\n<li>\n<p>Select <strong>End task</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/end-task.png\" /></p>\n</li>\n</ol>\n<p>One more workaround is to use Foxit Reader instead of Adobe Acrobat Reader.</p>\n",
    "url": "/docs/madcap-flare/build-error/"
  },
  {
    "title": "How to connect MadCap Flare to Git",
    "content": "<p>{{% pageinfo %}}\nOur goal is to connect your MadCap Flare project to a repository in GitHub or GitLab. After connecting your project to Git, you will be able to commit all your changes to Git and sync this repository with any MadCap Flare project.\n{{% /pageinfo %}}</p>\n<h2>Bind local MadCap project to GitHub</h2>\n<blockquote>\n<p>In this scenario, you have a local MadCap Flare project on your computer. You want to bind this project to the repository in GitHub. Binding means connecting, uploading, or syncing the local files with the remote repository in the GitHub web interface.</p>\n</blockquote>\n<p><img alt=\"Connect MadCap project to GitHub repository\" src=\"/docs/img/flare-git.png\" /></p>\n<h3>Bind using the Flare interface</h3>\n<p>To bind your MadCap Flare project to the GitHub repository:</p>\n<ol>\n<li>\n<p>Create a new (empty) GitHub repository.</p>\n<p><img alt=\"New GitHub repository\" src=\"/docs/img/new-github-repo.png\" /></p>\n</li>\n<li>\n<p>Copy the link to your new and empty repository.</p>\n<p><img alt=\"Copy the link to the repository\" src=\"/docs/img/github-repo-link.png\" /></p>\n</li>\n<li>\n<p>In your MadCap Flare, open <strong>Project</strong> &gt; <strong>Project Properties</strong> &gt; <strong>Source Control</strong> &gt; <strong>Bind Project</strong>.</p>\n<p><img alt=\"MadCap project properties\" src=\"/docs/img/project-properties.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Git</strong> as your source control provider.</p>\n</li>\n<li>\n<p>Select the <strong>Remote Repository</strong> checkbox.</p>\n</li>\n<li>\n<p>Select the <strong>Push on bind</strong> checkbox.</p>\n</li>\n<li>\n<p>Paste the link to your repository.</p>\n</li>\n<li>\n<p>Enter your name, email address, and click OK.</p>\n<p><img alt=\"Bind project\" src=\"/docs/img/bind-project.png\" /></p>\n</li>\n<li>\n<p>Review the details of your bound project and click OK to close the menu.</p>\n<p><img alt=\"Bound project\" src=\"/docs/img/bound-project.png\" /></p>\n</li>\n</ol>\n<p>Go to your GitHub repository and refresh the page to see the changes.</p>\n<p><img alt=\"MadCap project repository changes\" src=\"/docs/img/madcap-project-repo.png\" /></p>\n<p>Your local project has been uploaded to your empty GitHub repository. Now you can change the local files in your MadCap project, commit the changes and push them to this remote repository.</p>\n<h3>Upload your Madcap project to GitHub using VS Code</h3>\n<blockquote>\n<p>You must have GitHub account and VS Code installed.</p>\n</blockquote>\n<p>To connect your local MadCap project to a new GitHub repository in Visual Studio Code:</p>\n<ol>\n<li>\n<p>Open your Flare project folder in VS Code.</p>\n<p><img alt=\"Open folder in VS Code\" src=\"/docs/img/open-folder-vscode.png\" /></p>\n<p><img alt=\"Select folder\" src=\"/docs/img/select-folder.png\" /></p>\n</li>\n<li>\n<p>Select the Source Control tab from the side panel or click <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd>.</p>\n</li>\n<li>\n<p>Select <strong>Publish to GitHub</strong>.</p>\n<p><img alt=\"Publish to GitHub\" src=\"/docs/img/publish-github.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Publish to GitHub public repository</strong> and click OK.</p>\n<p><img alt=\"Publish to public repository\" src=\"/docs/img/public-repo.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Open on GitHub</strong> in the bottom left corner of the screen.</p>\n<p><img alt=\"Open on GitHub\" src=\"/docs/img/open-github.png\" /></p>\n</li>\n</ol>\n<p>You can go to your GitHub repositories and find your new repo.</p>\n<p><img alt=\"GitHub repositories\" src=\"/docs/img/github-repos.png\" /></p>\n<p>Now, your local MadCap project is synced with this GitHub repository. You can use your VS Code to commit and push all your changes in this project.</p>\n<p><img alt=\"Changes in VS Code\" src=\"/docs/img/changes-vscode.png\" /></p>\n<p>If you want to use Flare's interface for Git operations, you need to bind it to a new repository as in <a href=\"#bind-using-the-flare-interface\">Bind using the Flare interface</a>.</p>\n<h3>Import an existing MadCap project from Git</h3>\n<p>To import an existing MadCap Flare project from the GitHub or GitLab repository:</p>\n<ol>\n<li>\n<p>Go to the GitHub or GitLab repository containing the MadCap Flare project you want to import.</p>\n<p>For example: https://github.com/ivancheban/Sample.</p>\n</li>\n<li>\n<p>Copy the HTTPS link to this repository.</p>\n<p>For example: https://github.com/ivancheban/Sample.git</p>\n<p><img alt=\"Copy link to the repository\" src=\"/docs/img/copy-link.png\" /></p>\n</li>\n<li>\n<p>In MadCap Flare, select <strong>File</strong> &gt; <strong>New Project</strong> &gt; <strong>Import From Source Control</strong>.</p>\n<p><img alt=\"Import from Source Control\" src=\"/docs/img/import-source-control.png\" /></p>\n</li>\n<li>\n<p>Paste the HTTPS link to your GitHub or GitLab repository ending in .git and click Next.</p>\n<p><img alt=\"Select source control\" src=\"/docs/img/select-source-control.png\" /></p>\n</li>\n<li>\n<p>Click Browse, select the MadCap Flare project file in the remote repository, and click OK.</p>\n<p><img alt=\"Select project file\" src=\"/docs/img/select-project-file.png\" /></p>\n</li>\n<li>\n<p>Click Next and Finish.</p>\n<p><img alt=\"Finish importing\" src=\"/docs/img/finish-import.png\" /></p>\n</li>\n</ol>\n<p>As a result, your MadCap project from GitHub or GitLab is imported locally on your computer. This MadCap project is now bound or connected to your remote repository. You can start changing the files locally, committing and pushing the changes to the remote repository.</p>\n<h2>Connect MadCap Flare project to Git</h2>\n<blockquote>\n<p>This is the video on YouTube where I show how to connect your local MadCap Flare project to the GitHub repository.</p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8TDqoyx_Wa8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n",
    "url": "/docs/madcap-flare/connect-madcap-to-git/"
  },
  {
    "title": "MadCap Flare",
    "content": "<p>{{% pageinfo %}}\nThis section provides tips on using MadCap Flare.\n{{% /pageinfo %}}</p>\n<p>In these tutorials I will share my experience with MadCap Flare. You can use this help authoring tool (HAT) to create both online help in HTML5 format and PDF from a single source.</p>\n",
    "url": "/docs/madcap-flare//"
  },
  {
    "title": "AsciiDoc and Antora: Cyrillic bold characters",
    "content": "<p>{{% pageinfo %}}\nThe goal is to have bold characters in <code>.adoc</code> files for the AsciiDoc syntax and Antora static site generator.\n{{% /pageinfo %}}</p>\n<blockquote>\n<p>This solution comes from Anton T., a guru of Antora and AsciiDoc. All thanks go to this technical writer. </p>\n</blockquote>\n<h2>Prerequisites</h2>\n<p>You must have AsciiDoc and Antora installed on your machine.</p>\n<h2>Usage</h2>\n<p>To add the bold text for Cyrillic characters or words, use the following syntax:</p>\n<p><code>asciidoc\n+++&lt;b style=\"font-weight: 700\"&gt;Текст українською мовою жирним шрифтом&lt;/b&gt;+++</code></p>\n<p>The resulting HTML output has the bold text written in the Cyrillic characters.</p>\n<p><img alt=\"Cyrillic text in AsciiDoc\" src=\"../img/cyrillic-asciidoc.png\" /></p>\n",
    "url": "/docs/static-site-generators/asciidoc-cyrillic-bold/"
  },
  {
    "title": "Tools for your docs: Docusaurus and MkDocs Material",
    "content": "<p>{{% pageinfo %}}\nThe goal is to help you choose a documentation tool that uses docs-as-code, Markdown, and doesn't require much time to deploy.\n{{% /pageinfo %}}</p>\n<h2>Introduction</h2>\n<p>While there are many documentation tools for technical writers, sometimes even experienced tech writers ask themselves: which tool should I use for my project? Your project may be API Reference or end-user documentation, online help for your product, or any other domain. In this article, I focus on the customer-facing docs, not the internal documentation that you write in wiki systems like Confluence or CMS like SharePoint Online. You can have authentication or password protection for your customer-facing docs site, of course.</p>\n<p>Ok, so your manager or your test task requires you to come up with the best documentation solution for their product/API/you name it. They may even offer you some hints like Word, SharePoint, or even some unknown commercial tools for building docs sites. The first question I would ask, is whether they've been using this tool before and satisfied with it. If both answers are yes, maybe it's not worth convincing them that your tool would do a better job. However, you can still create a demo site or show them available projects built with Docusaurus or MkDocs Material static site generators.</p>\n<h2>Docusaurus and MkDocs Material</h2>\n<p>Have you heard about <a href=\"https://docusaurus.io/\">Docusaurus</a> and <a href=\"https://squidfunk.github.io/mkdocs-material/\">MkDocs Material</a>? These are static site generators (SSGs) that build a static documentation site. These SSGs use the <a href=\"../docs-as-code\">docs-as-code</a> approach, Markdown, and git. They're designed specifically for technical writers or developers who want to stand up a nice-looking docs site effortlessly and quickly. I wrote a <a href=\"../docs-as-code/#docusaurus-static-site-generator\">comprehensive guide</a> how to start working with Docusaurus a couple of years ago. As this tool is developed, some things could have changed. That's why I'm going to go step by step again to deploy a Docusaurus documentation site.</p>\n<p><a href=\"https://squidfunk.github.io/mkdocs-material/\">MkDocs Material</a> has long been on my list of the best SSGs for documentation sites. Material theme of MkDocs is designed for documentation writers. It has many features, you'd better consult their documentation.</p>\n<h2>Docusaurus</h2>\n<p>{{% pageinfo %}}\nThe goal is to build and deploy a test Docusaurus site. You can then reproduce the steps to build your own docs site and deploy it to public GitHub Pages.\n{{% /pageinfo %}}</p>\n<h3>Prerequisites</h3>\n<p>You need to have the following items installed on your computer.</p>\n<h4>Node.js</h4>\n<p>You can check if it's already installed by typing <code>node -v</code> in the terminal or Command Prompt. You need v.18 or later.</p>\n<p><img src=\"../img/command-prompt-node.png\" alt=\"Command Prompt with Node.js version\" width=\"500\"/></p>\n<p>If you have an older version, remove it using Windows <strong>Add or remove programs</strong>. Then install the newest version from <a href=\"https://nodejs.org/en/download/current\">here</a>.</p>\n<h4>Install Docusaurus package</h4>\n<p>Use Node.js command to install Docusaurus on your computer:</p>\n<ol>\n<li>\n<p>Run <code>npm init docusaurus</code>.</p>\n</li>\n<li>\n<p>Type <code>y</code> when prompted and press Enter.</p>\n<p><img src=\"../img/npm-init-docusaurus.png\" alt=\"NPM Init Docusaurus\" width=\"500\"/></p>\n</li>\n<li>\n<p>Type the name of your site (project) when prompted and press Enter.</p>\n<p><img src=\"../img/project-name.png\" alt=\"Project name\" width=\"500\"/></p>\n</li>\n<li>\n<p>Select the recommended <code>classic</code> template by pressing Enter.</p>\n<p><img src=\"../img/classic-template.png\" alt=\"Classic template\" width=\"500\"/></p>\n</li>\n<li>\n<p>Select JavaScript by pressing Enter.</p>\n<p><img src=\"../img/javascript.png\" alt=\"JavaScript\" width=\"500\"/></p>\n</li>\n<li>\n<p>Type <code>cd test-docusaurus-docs</code> to go to the folder with installed Docusaurus.</p>\n</li>\n<li>\n<p>Type <code>npm start</code> to start a hot reload server for opening the docs site in your browser on local host.</p>\n<p><img src=\"../img/npm-start.png\" alt=\"NPM start\" width=\"500\"/></p>\n</li>\n</ol>\n<p>Your site opens in the browser with this address: <a href=\"http://localhost:3000/\">http://localhost:3000/</a></p>\n<p><img alt=\"Docusaurus default site\" src=\"../img/docusaurus-default.png\" /></p>\n<h3>Deploy Docusaurus to GitHub Pages</h3>\n<p>Now that you've built your site locally, you can start editing its content in Markdown and customize the site theme: CSS, logo, name, sidebar menu, etc. I don't intend to show all these steps as I've described them <a href=\"../docs-as-code/#adjust-the-appearance-of-the-site\">here</a>. Instead I will provide instructions on deploying your site to GitHub Pages, so it's available on the internet.</p>\n<ol>\n<li>\n<p>Use VS Code to open your Docusaurus project: <strong>File &gt; Open Folder...</strong> and select your project name that you typed when installing Docusaurus. In my case, it's <code>test-docusaurus-docs</code>.</p>\n</li>\n<li>\n<p>Select <strong>Source Control</strong> tab in VS Code left side panel.</p>\n<p><img alt=\"Source control panel\" src=\"../img/source-control-panel.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Initialize Repository</strong>.</p>\n</li>\n<li>\n<p>Select <strong>Commit</strong>.</p>\n<p><img alt=\"Commit\" src=\"../img/commit.png\" /></p>\n</li>\n<li>\n<p>Enter the commit message. For example: first commit. Press Enter.</p>\n</li>\n<li>\n<p>Select <strong>Publish Branch</strong>.</p>\n</li>\n<li>\n<p>Select <strong>Publish to GitHub public repository</strong>.</p>\n<p><img alt=\"Commit\" src=\"../img/publish_public.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Open on GitHub</strong> to open the project in the web version of GitHub.</p>\n<p><img alt=\"Open project on GitHub\" src=\"../img/open-on-github.png\" /></p>\n</li>\n</ol>\n<p>To deploy your site on GitHub Pages:</p>\n<ol>\n<li>\n<p>In VS Code, go to Explorer tab and select the <code>docusaurus.config.js</code> file that stores configuration of your Docusaurus site. In my case, the path is <code>C:\\Users\\ivanc\\test-docusaurus-docs\\docusaurus.config.js</code>.</p>\n</li>\n<li>\n<p>Change the values for the following parameters:</p>\n<ul>\n<li><code>organizationName</code> - In my case, it's <code>ivancheban</code>, my GitHub account.</li>\n<li><code>projectName</code> - In my case, it's <code>test-docusaurus-docs</code>, your Docusaurus project name you selected and published to GitHub.</li>\n<li><code>url</code> - In my case, it's <code>https://ivancheban.github.io</code>.</li>\n<li>\n<p><code>baseUrl</code> - In my case, it's <code>/test-docusaurus-docs/</code>.</p>\n<p><img alt=\"Docusaurus.config.js values\" src=\"../img/docusaurus-config-js.png\" /></p>\n</li>\n</ul>\n</li>\n<li>\n<p>In the root folder of your Docusaurus project, create the <code>deploy.yml</code> file with this path: <code>.github/workflows/deploy.yml</code>. It means that first you create the <code>.github</code> folder, then <code>workflows</code> folder inside it, and only then the <code>deploy.yml</code> file. Paste the following code inside the <code>deploy.yml</code> file.</p>\n</li>\n</ol>\n<p>```yml\nname: Deploy to GitHub Pages</p>\n<p>on:\n  push:\n    branches:\n      - main\n    # Review gh actions docs if you want to further define triggers, paths, etc\n    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on</p>\n<p>jobs:\n  build:\n    name: Build Docusaurus\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 18\n          cache: npm</p>\n<pre><code>  - name: Install dependencies\n    run: npm ci\n  - name: Build website\n    run: npm run build\n\n  - name: Upload Build Artifact\n    uses: actions/upload-pages-artifact@v3\n    with:\n      path: build\n</code></pre>\n<p>deploy:\n    name: Deploy to GitHub Pages\n    needs: build</p>\n<pre><code># Grant GITHUB_TOKEN the permissions required to make a Pages deployment\npermissions:\n  pages: write # to deploy to Pages\n  id-token: write # to verify the deployment originates from an appropriate source\n\n# Deploy to the github-pages environment\nenvironment:\n  name: github-pages\n  url: ${{ steps.deployment.outputs.page_url }}\n\nruns-on: ubuntu-latest\nsteps:\n  - name: Deploy to GitHub Pages\n    id: deployment\n    uses: actions/deploy-pages@v4\n</code></pre>\n<p>```</p>\n<p>Continue to deploy your site to GitHub Pages:</p>\n<ol>\n<li>\n<p>Commit and push your changes:</p>\n<ul>\n<li><code>Ctrl + Shift + P</code>.</li>\n<li>Select <code>Git: Commit All</code>.</li>\n<li>Add the commit message.</li>\n<li><code>Ctrl + Shift + P</code>.</li>\n<li>Select <code>Git: Push</code>.</li>\n</ul>\n</li>\n<li>\n<p>Create a <code>gh-pages</code> branch in your Docusaurus project. Although you commit and push to the <code>main</code> branch, the <code>gh-pages</code> branch will be used for deployment of your site on GitHub Pages.</p>\n</li>\n<li>\n<p>Go to <strong>Settings</strong> in GitHub page of your project.</p>\n<p><img alt=\"Settings in GitHub\" src=\"../img/settings-github.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Pages</strong> and select the <code>gh-pages</code> branch. Save the changes.</p>\n<p><img alt=\"GitHub Pages\" src=\"../img/gh-pages.png\" /></p>\n</li>\n<li>\n<p>Go to <strong>Settings &gt; Environments</strong> and remove the <code>gh-pages</code> from the limitation.</p>\n<p><img alt=\"GitHub Pages\" src=\"../img/gh-pages-remove-limitation.png\" /></p>\n</li>\n<li>\n<p>Change anything in your local files, commit and push changes. The commit to the main branch starts the site deployment. Wait while the pipeline finishes building and deploying your site. Check the built site. In my case, it's: <a href=\"https://ivancheban.github.io/test-docusaurus-docs/\">https://ivancheban.github.io/test-docusaurus-docs/</a>.</p>\n</li>\n</ol>\n<h2>MkDocs Material</h2>\n<p>{{% pageinfo %}}\nThe goal is to build and deploy a test MkDocs Material site. You can then reproduce the steps to build your own docs site and deploy it to public GitHub Pages.\n{{% /pageinfo %}}</p>\n<h3>Prerequisites</h3>\n<p>You need to have Python with pip for MkDocs. Then you can install MkDocs and the MkDocs Material packages using pip.</p>\n<ol>\n<li>\n<p><strong>Ensure Python is installed</strong>: You can check if Python is installed on your system by opening a command prompt and typing <code>python --version</code>. If Python is installed, you will see something like <code>Python 3.11.3</code>. If you don't have Python installed, install it from their <a href=\"https://www.python.org/downloads/windows/\">official website</a>.</p>\n</li>\n<li>\n<p><strong>Ensure pip is installed</strong>: You can check if pip is installed by typing <code>pip --version</code> in the command prompt. If pip is installed, it will display the version.</p>\n</li>\n<li>\n<p><strong>Install MkDocs</strong>: Type <code>pip install mkdocs</code> in the command prompt. Make sure MkDocs is installed by typing <code>mkdocs --version</code>.</p>\n</li>\n<li>\n<p><strong>Install MkDocs Material</strong>: Type <code>pip install mkdocs-material</code> in the command prompt. To check if MkDocs Material is installed, type <code>mkdocs serve --help</code>.  This command should list material as an option under the <code>--theme</code>. If material is listed, it means that Material for MkDocs is installed correctly.</p>\n<p><img src=\"../img/material-theme.png\" alt=\"Material theme\" width=\"500\"/></p>\n</li>\n</ol>\n<p>For more information, see <a href=\"https://www.mkdocs.org/user-guide/installation/\">MkDocs Installation</a> and <a href=\"https://squidfunk.github.io/mkdocs-material/getting-started/#with-pip\">MkDocs Material Installation</a>.</p>\n<h3>Install the MkDocs site</h3>\n<p>You can continue creating a brand new MkDocs Material site using <a href=\"https://squidfunk.github.io/mkdocs-material/creating-your-site/\">these instructions</a>. Or, you can fork my repo with the ready configuration:</p>\n<ol>\n<li>\n<p>Fork or download the zipped project from here: <a href=\"https://github.com/ivancheban/my-project\">https://github.com/ivancheban/my-project</a>.</p>\n</li>\n<li>\n<p>Open the <code>mkdocs.yml</code> file to edit the configuration of your site.</p>\n</li>\n</ol>\n<p>```yml\nsite_name: Docs site\nsite_url: https://ivancheban.github.io/my-project/\nnav:\n    - Introduction: 'index.md'\n    - User Guide:\n        - 'Test': 'test-folder/test.md'\n        - 'Test 1': 'test-folder/test1.md'\n        - 'Test 2': 'test-folder/test2.md'\n    - About:\n        - 'About this site': 'about.md'\ntheme:\n  features:\n    - navigation.footer\n  name: material\n  custom_dir: overrides\n  logo: img/logo.svg\n  favicon: img/favicon.ico\n  palette: \n    scheme: default\n    accent: light blue</p>\n<p>extra_css:\n  - stylesheets/extra.css</p>\n<p>plugins:\n  - search\n  - mike</p>\n<p>extra:\n  version:\n    provider: mike\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/ivancheban\n    - icon: fontawesome/brands/linkedin\n      link: https://linkedin.com/in/ivan-cheban-a24b576\n  generator: false</p>\n<p>markdown_extensions:\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n  - admonition\n  - pymdownx.details\n  - pymdownx.tabbed:\n      alternate_style: true\ncopyright: Copyright &copy; 2023 Ivan Cheban\n```</p>\n<p>To run the site on your local host, type: <code>mkdocs serve</code>. This starts the site in your browser with this address: <a href=\"http://127.0.0.1:8000/my-project/\">http://127.0.0.1:8000/my-project/</a>.</p>\n<p><img alt=\"MkDocs local site\" src=\"../img/mkdocs-local-site.png\" /></p>\n<h3>Deploy MkDocs Material to GitHub Pages</h3>\n<p>Now that you've checked that your MkDocs Material site works locally, it's time to deploy it on GitHub as a public site.</p>\n<ol>\n<li>\n<p>Use the <a href=\"#deploy-docusaurus-to-github-pages\">steps 1–8 from deploying a Docusaurus site to GitHub</a> for committing and pushing your MkDocs project to a GitHub repository.</p>\n</li>\n<li>\n<p>Create a <code>gh-pages</code> branch in your repository.</p>\n</li>\n<li>\n<p>In the web interface of your repository, Go to <strong>Settings &gt; Pages</strong> and selected <code>gh-pages</code> as a branch to deploy your site from. Save the changes.</p>\n</li>\n<li>\n<p>At the root of your MkDocs project, create a new GitHub Actions workflow file: <code>.github/workflows/ci.yml</code>, and copy and paste the following contents:</p>\n</li>\n</ol>\n<p><code>yml\nname: ci \non:\n  push:\n    branches:\n      - master \n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n      - uses: actions/cache@v3\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material \n      - run: mkdocs gh-deploy --force</code></p>\n<p>Commit and push your changes.</p>\n",
    "url": "/docs/static-site-generators/docs-as-code-tools-for-technical-writer/"
  },
  {
    "title": "The docs-as-code approach for creating documentation using the Docusaurus static site generator",
    "content": "<p>{{% pageinfo %}}\nThe article is aimed primarily at tech writers, but can also be useful for the software development teams looking for a way to create an internal or external site with documentation for their software product.\n{{% /pageinfo %}}</p>\n<p>In this article, you learn:</p>\n<ul>\n<li>\n<p>What's the docs-as-code approach</p>\n</li>\n<li>\n<p>How to create a site with documentation using the Docusaurus static site generator in 5 minutes</p>\n</li>\n<li>\n<p>How to customize the appearance of the site with documentation</p>\n</li>\n<li>\n<p>How to create and edit documentation articles on the site</p>\n</li>\n<li>\n<p>How to publish a site with documentation on the Internet for free</p>\n</li>\n<li>\n<p>How to configure a CI / CD pipeline to automate the publication of changes on the site</p>\n</li>\n</ul>\n<hr />\n<h2>Docs-as-code</h2>\n<p>The <em>docs-as-code</em> approach is becoming more common among tech writers and other specialists who write documentation for the software products. First, let's understand what this concept means.</p>\n<p>An experienced Google tech writer Tom Johnson <a href=\"https://idratherbewriting.com/learnapidoc/pubapis_docs_as_code.html\">writes</a> in his blog: \"Docs-as-code means to treat docs just like developers treat code.\" He provides the following features of the <em>docs-as-code approach</em>:</p>\n<ul>\n<li>\n<p><strong>Work with files in the format of \"lightweight\" or \"readable\" (plain) markup.</strong>  This is primarily Markdown (.md)—the most common documentation source format for docs-as-code. Markdown is a simple and readable markup format. For example, bold highlighting is done with two asterisks ** at the beginning and end of the word or phrase you want to highlight in bold. This way, you can read Markdown files in the source code of the documentation even before converting to HTML. This doesn't require a WYSIWYG editor that converts the hard-to-read XML code, as Word or MadCap Flare does.</p>\n</li>\n<li>\n<p><strong>Use an open source static site generator.</strong> Today there are dozens of free open source generators of static sites. This means that you can download their code to your computer from an open repository in GitHub, build a site locally to automatically retrieve HTML pages with added CSS styles for color themes, JS elements, and more. You can upload these pages to a web server to make the compiled site available online. Among the most famous generators of static sites are: Jekyll, Hugo, Gatsby, Next.js and others. The list is quite long. You can find more on the <a href=\"https://jamstack.org/generators/\">Jamstack</a> website. You can use generators not only to create sites with documentation, but primarily for blogs, landings and more.</p>\n</li>\n<li>\n<p><strong>Work with files through a text editor.</strong> The <em>docs-as-code</em> tech writers use code editors (IDEs), which are also used by developers. These can be Visual Studio Code, WebStorm, PyCharm and other code editors. In these editors, you can work with files in Markdown format and at the same time have a preview of the final result in HTML. In addition, you can use many extensions that simplify the work with the git, spell check, and so on.</p>\n</li>\n<li>\n<p><strong>Store docs in a version control repository.</strong> Like developers, tech writers commit changes to the documentation code locally and push these changes to the git server in GitHub, GitLab, Bitbucket, or other version control system (VCS). In addition to the well-known advantages of a version control system, such as tracking changes with diffs (difference), the git repository can be used in the CI / CD pipeline to compile and publish a site.</p>\n</li>\n<li>\n<p><strong>Collaborate with other writers using version control.</strong> Like developers, the team of tech writers work together on the project with documentation site: create master and develop branches, feature branches (feature branch is a branch to work on a separate functionality, which in the case of documentation may be a separate article on the documentation site), create merge requests (merge request is a request for adding changes to the develop branch from a feature branch after finishing writing an article) and code reviews by the team lead.</p>\n</li>\n<li>\n<p><strong>Automate the site build process with continuous delivery using the CI/CD pipeline.</strong> Usually, devops or system engineers configure the process of automatically building a site with documentation and its publication (deploy) on the web server. Such specialists create a script with all the steps and commands of generating a static site: after pushing changes to the master branch, a script is automatically launched that executes commands to build the site on the server and deploys the generated HTML pages with all CSS styles and JS elements as a static site with documentation.</p>\n</li>\n<li>\n<p><strong>Run validation checks.</strong> Like developers, tech writers test the documentation for compliance with certain requirements: no broken links, Vale linter with rules for checking compliance with the requirements of Microsoft's style guides, Google and their own style guides. I wrote about this in my <a href=\"../vale/vale-styleguides\">previous article</a>.</p>\n</li>\n<li>\n<p><strong>Manage docs using processes similar to engineers (Scrum, Agile, Kanban).</strong> Like developers, tech writers work in sprints (sprint is a period that usually lasts one month, during which developers deliver part of the developed functionality to demo to the customer the work done). Tech writers use Jira or other task tracker and perform appropriate Scrum ceremonies (daily standup, Sprint Planning, Retro, etc.). Often tech writers link their tasks of documenting features to the tasks of developers.</p>\n</li>\n</ul>\n<p>The process of developing a documentation site is generally similar to the process of developing code. Next, we install the necessary <em>docs-as-code</em> tools in practice, generate a documentation site and publish it on the Internet.</p>\n<h2>Docusaurus static site generator</h2>\n<p>Why did I choose <a href=\"https://docusaurus.io/docs\">Docusaurus</a> as the static site generator (SSG) for the documentation site? Although my favorite site generator is Hugo, which I use for my own pet project (this site), configuring such a site, although well described in the documentation, is time consuming. Instead, you can configure a Docusaurus-built site very quickly—in just a few minutes you can have a local documentation site and start writing there in the Markdown files. It'll take a little longer to configure the CI/CD pipeline and customize the CSS for your own color schemes, fonts, images, etc., and then publish the site online. But not much more.</p>\n<p>To install and run Docusaurus:</p>\n<ol>\n<li>\n<p>Make sure Node.js is installed on your computer. In the command prompt, enter: <code>node -v</code></p>\n<p>{{&lt; alert title=\"Note\" &gt;}}After all the commands here and after you need to press Enter.{{&lt; /alert &gt;}}</p>\n</li>\n<li>\n<p>Install <a href=\"https://nodejs.org/en/download/\">Node.js</a> if the version isn't displayed.</p>\n</li>\n<li>\n<p>Reboot.</p>\n</li>\n<li>\n<p>Create a folder where you want to deploy the project site with documentation. For example, at the command prompt, type: <code>md my-docusaurus-projects</code> to create a folder and <code>cd my-docusaurus-projects</code> to go to the created folder.</p>\n</li>\n<li>\n<p>Create a site with documentation using the latest version of the Docusaurus generator with the project name <code>my-site</code>:</p>\n<p><code>sh\nnpx create-docusaurus@latest my-site classic</code></p>\n<p>{{&lt; alert title=\"Note\" &gt;}}<code>classic</code> is a pre-installed site theme.{{&lt; /alert &gt;}}</p>\n</li>\n<li>\n<p>Enter <code>yes</code> when the message to continue the installation appears.</p>\n<p>Wait for the system to install all npm dependencies.</p>\n</li>\n<li>\n<p>After the installation is complete, go to the folder of the newly created site project: <code>cd my-site</code></p>\n</li>\n<li>\n<p>Run the site on a local server:</p>\n<p><code>sh\nnpm start</code></p>\n<p>The site with the documentation opens in the browser: <a href=\"http://localhost:3000/\">http://localhost:3000/</a>.</p>\n<p><img alt=\"img\" src=\"/docs/img/docusaurus-site.webp\" /></p>\n</li>\n</ol>\n<h2>Adjust the appearance of the site</h2>\n<p>So, you launched the site locally in the browser. The site project folder with all the necessary files is in my case: <code>C:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site</code>. We will now change:</p>\n<ul>\n<li>\n<p>The name of the site</p>\n</li>\n<li>\n<p>Logo image</p>\n</li>\n<li>\n<p>Color scheme of the theme</p>\n</li>\n<li>\n<p>Text on the home page</p>\n</li>\n</ul>\n<p>You can read about all the settings of the site created with Docusaurus in their official documentation: <a href=\"https://docusaurus.io/docs\">https://docusaurus.io/docs</a>.</p>\n<p>To change the site name:</p>\n<ol>\n<li>\n<p>Open the project folder in the VS Code editor.</p>\n</li>\n<li>\n<p>Select the <code>docusaurus.config.js</code> file.</p>\n<p><img alt=\"img\" src=\"/docs/img/docusaurus-config.webp\" /></p>\n</li>\n<li>\n<p>Change the site name <code>title: 'My Site'</code> to your own. For example: <code>Documentation site</code>.</p>\n<p>{{&lt; alert title=\"Note\" &gt;}}All changes are immediately reflected in the browser, because you launched the site on a local server in the live reload mode.{{&lt; /alert &gt;}}</p>\n</li>\n<li>\n<p>In the same file below, change the site name <code>title: 'My Site'</code> in the navigation menu.</p>\n<p><img alt=\"img\" src=\"/docs/img/navbar.webp\" /></p>\n</li>\n</ol>\n<p>To change the logo image (dinosaur):</p>\n<ol>\n<li>\n<p>Copy your logo image to a folder <code>c:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site\\static\\img\\</code>.</p>\n</li>\n<li>\n<p>Replace the image <code>logo.svg</code> with your own image with the same filename and extension. For example, I downloaded the logo here: <a href=\"https://www.svgrepo.com/download/205072/documents-document.svg\">https://www.svgrepo.com/download/205072/documents-document.svg</a>.</p>\n</li>\n<li>\n<p>Reload the site's documentation page in the browser to see the new logo.</p>\n</li>\n</ol>\n<p>To change the color scheme of the theme:</p>\n<ol>\n<li>\n<p>In VS Code, select the <code>c:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site\\src\\css\\main.css</code> file.</p>\n</li>\n<li>\n<p>Change the hex color code for the <code>--ifm-color-primary</code> setting from <code>#25c2a0</code> to <code>#90a3b0</code> or another color to your liking.</p>\n<p>{{&lt; alert title=\"Note\" &gt;}}The changes apply not only to the home page, but also to the color scheme on other pages of the site (side menu, top navigation menu, link color, etc.).{{&lt; /alert &gt;}}</p>\n</li>\n</ol>\n<p>To change the text on the home page of the site:</p>\n<ol>\n<li>\n<p>Change the site subtitle <code>tagline</code> in the <code>docusaurus.config.js</code> file from <code>Dinosaurs are cool</code> to <code>How to create your documentation site with Docusaurus</code>.</p>\n</li>\n<li>\n<p>Change the names and links, copyright, etc. at the bottom of the site <code>footer</code>.</p>\n</li>\n<li>\n<p>If you don't need a blog on the documentation site, comment out (<code>//</code>) the line so that it doesn't appear in the navigation menu.</p>\n<p><img alt=\"img\" src=\"/docs/img/comment-out.webp\" /></p>\n</li>\n<li>\n<p>Rename the documentation section of the site <code>label</code> from <code>Tutorial</code> to <code>Docs</code>.</p>\n</li>\n<li>\n<p>In VS Code, select the <code>my-site\\src\\components\\HomepageFeatures.js</code> file and change the text and image features on the home page.</p>\n<p><img alt=\"img\" src=\"/docs/img/homepage-features.webp\" /></p>\n</li>\n<li>\n<p>In VS Code, select the <code>my-site\\src\\pages\\index.js</code> file to change the label on the button from <code>Docusaurus Tutorial - 5min</code> to <code>Start here</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/action-button.webp\" /></p>\n<p>After all these changes, the home page will look like this.</p>\n<p><img alt=\"img\" src=\"/docs/img/start-page.webp\" /></p>\n</li>\n</ol>\n<h2>Create and edit documentation articles</h2>\n<p>After customizing the home page of the site with the documentation, you can start writing your own documentation. To go to the actual documentation, click the <strong>Start here</strong> button on the home page.</p>\n<p>This is a sample documentation in the Docusaurus template.</p>\n<p><img alt=\"img\" src=\"/docs/img/default-intro.webp\" /></p>\n<h3>Location of documentation articles</h3>\n<p>All documentation in Docusaurus is contained in the form of Markdown files in a folder: <code>c:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site\\docs\\</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/docs-folder.webp\" /></p>\n<h3>Order of articles in the documentation section</h3>\n<p>The first article <strong>Tutorial Intro</strong> is the <code>intro.md</code> file. Its location in the sidebar is defined by the <code>sidebar_position: 1</code> parameter. The name is taken from the first title in the text of the Markdown file.</p>\n<p>To change the hierarchical location of the article in the sidebar, change the value of the <code>sidebar_position</code> parameter. For example, to move to the end of this article: <code>sidebar_position: 4</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/sidebar-position.webp\" /></p>\n<p>To open another article after going from the home page, change the path to the desired article in the <code>my-site\\src\\pages\\index.js</code> file.</p>\n<p>For example, show first the <strong>Create a Page</strong> article in the <code>c:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site\\docs\\tutorial-basics\\create-a-page.md</code> file. To do this, change the value of the <code>to</code> parameter from <code>/docs/intro</code> to <code>/docs/tutorial-basics/create-a-page</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/first-page.webp\" /></p>\n<h3>Subsections in the documentation section</h3>\n<p>Our test site with documentation has two sections: Tutorial - Basics and Tutorial - Extras. These sections contain other articles that can be viewed by clicking the appropriate section in the sidebar. These subsections are <strong>tutorial-basics</strong> and <strong>tutorial-extras</strong> in the <code>c:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site\\docs\\</code> folder.</p>\n<p>To add a new section with articles, copy one of these folders and paste it into a <code>docs</code> folder with a new name, such as <code>my-docs</code>.</p>\n<p>{{&lt; alert title=\"Note\" &gt;}}Follow the rules for naming folders and files: all lowercase letters, hyphens instead of spaces.{{&lt; /alert &gt;}}</p>\n<p>Next, rename the Markdown files in the <code>my-docs</code> folder.</p>\n<h3>Order of documentation sections</h3>\n<p>To define the order of the sections with documentation articles, change the <code>position</code> parameter in the <code>C:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site\\docs\\tutorial-basics\\_category_.json</code> file. For example, change the order of <code>tutorial-basics</code> and <code>tutorial-extras</code> sections. To do this, change 3 to 2 for <code>tutorial-basics</code> and 2 to 3 for <code>tutorial-extras</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/category-json.webp\" /></p>\n<p>The order of these sections changes in the sidebar.</p>\n<p><img alt=\"img\" src=\"/docs/img/changed-sections.webp\" /></p>\n<p>The article hierarchy within a section is changed using the <code>sidebar_position</code> parameter, as described in <a href=\"./#order-of-articles-in-the-documentation-section\">Hierarchy of articles in the documentation section</a>.</p>\n<h2>Publish your documentation site</h2>\n<p>So far, you've created a local site with documentation and can view it in the browser. It's time to publish it online, so everybody can view it using the link. To do this, you need:</p>\n<ul>\n<li>\n<p>Account in <a href=\"https://github.com/\">GitHub</a>, where you'll load the source code of the project documentation.</p>\n</li>\n<li>\n<p>Account in <a href=\"https://app.netlify.com/\">Netlify</a>, where you'll host the generated site.</p>\n</li>\n</ul>\n<p>{{&lt; alert title=\"Note\" &gt;}}First, sign up for GitHub to sign in to Netlify with your GitHub account.{{&lt; /alert &gt;}}</p>\n<p>You also need to download and install the git locally on your computer: <a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a>.</p>\n<p>To verify that your git is installed locally, in the command prompt, type:</p>\n<p><code>sh\ngit version</code></p>\n<h3>Upload to GitHub</h3>\n<p>First, link the local documentation project folder to the GitHub repository:</p>\n<ol>\n<li>\n<p>Open the project folder with the documentation in VS Code. In my case it's: <code>c:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site\\</code>.</p>\n</li>\n<li>\n<p>Go to the Source Control tab in the VS Code side menu.</p>\n</li>\n<li>\n<p>Select <strong>Publish to GitHub</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/publish-github.webp\" /></p>\n</li>\n<li>\n<p>Select <strong>Publish to GitHub public repository</strong>.</p>\n</li>\n<li>\n<p>Wait for your project to be published and select <strong>Open on GitHub</strong> to go to the created repository in GitHub.</p>\n<p><img alt=\"img\" src=\"/docs/img/github-my-site.webp\" /></p>\n</li>\n</ol>\n<p>Your local project is now synced to the GitHub repository. All changes you make locally you need to synchronize with the git repository manually.</p>\n<p>After you make all the necessary changes in your documentation:</p>\n<ol>\n<li>\n<p>In VS Code, click <kbd>Ctrl+Shift+P</kbd>.</p>\n</li>\n<li>\n<p>Enter or select <strong>Git: Commit All</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/commit-all.webp\" /></p>\n</li>\n<li>\n<p>Enter the message you changed.</p>\n</li>\n<li>\n<p>Click <kbd>Ctrl+Shift+P</kbd>.</p>\n</li>\n<li>\n<p>Enter or select <strong>Git: Push</strong>.</p>\n<p>Your changes have been uploaded to the GitHub server.</p>\n</li>\n</ol>\n<h3>Publish the site using Netlify</h3>\n<p>Now you can publish your site with documentation using the Netlify service. It's free if the domain name of the site contains <code>netlify.app</code>.</p>\n<ol>\n<li>\n<p>Open https://app.netlify.com/</p>\n</li>\n<li>\n<p>Log in with your GitHub account.</p>\n</li>\n<li>\n<p>Select <strong>New site from Git</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/new-site.webp\" /></p>\n</li>\n<li>\n<p>Select <strong>GitHub</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/github.webp\" /></p>\n</li>\n<li>\n<p>Authorize Netlify to access your GitHub repository and select a repository with your site.</p>\n<p><img alt=\"img\" src=\"/docs/img/import-github.webp\" /></p>\n</li>\n<li>\n<p>Select <strong>Deploy site</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/deploy-netlify.webp\" /></p>\n</li>\n<li>\n<p>Wait till your site is published (deploy).</p>\n</li>\n<li>\n<p>As the site is published with a random name—such as <code>inspiring-benz-dc91fd</code>—change the site name to something more meaningful in the <strong>Site settings</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/site-settings-netlify.webp\" /></p>\n</li>\n<li>\n<p>Select <strong>Change site name</strong> and enter your name.</p>\n<p><img alt=\"img\" src=\"/docs/img/change-site-name-netlify.webp\" /></p>\n<p>I entered <code>ivan-documentation-example</code>.</p>\n</li>\n<li>\n<p>Follow the link to the published site. In my case it's:</p>\n<p>https://ivan-documentation-example.netlify.app/</p>\n</li>\n</ol>\n<h2>CI/CD pipeline</h2>\n<p>If you followed the steps in the previous sections, you have published your site on the Internet. Now I explain how to automatically update your site with documentation using the CI/CD pipeline.</p>\n<p>In fact, automatic pipeline is already set up—Netlify has created a hook in your GitHub repository and will track any changes. Once you commit and push changes from your local project to the GitHub repository, Netlify begins the process of building and deploying the site. It doesn't take much time (1–2 minutes), because everything is cached, and only delta is deployed—changes between the original and current version of the files.</p>\n<p>Try changing something in the files locally, and then repeat the steps for <strong>Git: Commit All</strong> and <strong>Git: Push</strong> described in the <a href=\"./#upload-to-github\">Upload to GitHub</a> section.</p>\n<p>All changes are published to the master branch. If you create a <code>develop</code> branch or other branch, the changes you make to those branches won't appear on the site because the <code>master</code> branch is considered <em>Production</em>. Of course, all this is adjustable. However, I suggest leaving all the configuration processes in the local infrastructure to the specialists who deal with it: devops or system engineers. They will create scripts and environments for publishing the local instance of the site (useful for viewing articles before publication for production). Specialists will also configure the deployment server (Octopus or other), the location of file hosting (AWS S3 buckets or other).</p>\n<p>Your task is to create a demo for the documentation site to show how it works. Leadership will then decide whether to continue to use Confluence or other internal knowledge base. And it's possible that this site with documentation will be finalized by frontend engineers so that it serves as the main documentation site for your product.</p>\n<p>The <em>docs-as-code</em> approach allows you to take full advantage of the tools used by software developers. You can customize the Vale linter to check the text of the documentation for compliance with the Microsoft and Google style guides, as well as your own style guides. I wrote about this in <a href=\"../../vale/vale-styleguides/\">How to check the documentation using an automatic tool - Vale linter</a>.</p>\n",
    "url": "/docs/static-site-generators/docs-as-code/"
  },
  {
    "title": "Docs versioning: Docusaurus and MkDocs",
    "content": "<p>{{% pageinfo %}}\nThe goal is to add versions selector to the docs site generated with Docusaurus or MkDocs Material.\n{{% /pageinfo %}}</p>\n<h2>Introduction</h2>\n<p>Sometimes, you're asked to add versions to your documentation based on the product versions. For example, when developers launch a new major release of their product, their change the product version from 1.5 to 2.0. In this case, they want their new product version to have the respective new docs describing new features. At the same time, they still want the customers who use the older version of their product to read the old docs without new features.</p>\n<p>In my <a href=\"../docs-as-code-tools-for-technical-writer\">previous article</a>, I showed how to create a documentation site using Docusaurus or MkDocs Material. In this article, I'll show how to add a version selector to select a specific version of your docs.</p>\n<h2>Docs versioning in MkDocs Material</h2>\n<p>I was able to build a <a href=\"https://ivancheban.github.io/my-project/0.3/\">test site</a> with docs versioning. It's not that straightforward though. Anyway, I'll try to reproduce the steps and build another one with step by step instructions.</p>\n<h3>Prerequisites</h3>\n<p>You need to have Python with pip for MkDocs. Then you can install MkDocs and the MkDocs Material packages using pip.</p>\n<ol>\n<li>\n<p><strong>Ensure Python is installed</strong>: You can check if Python is installed on your system by opening a command prompt and typing <code>python --version</code>. If Python is installed, you will see something like <code>Python 3.11.3</code>. If you don't have Python installed, install it from their <a href=\"https://www.python.org/downloads/windows/\">official website</a>.</p>\n</li>\n<li>\n<p><strong>Ensure pip is installed</strong>: You can check if pip is installed by typing <code>pip --version</code> in the command prompt. If pip is installed, it will display the version.</p>\n</li>\n<li>\n<p><strong>Install MkDocs</strong>: Type <code>pip install mkdocs</code> in the command prompt. Make sure MkDocs is installed by typing <code>mkdocs --version</code>.</p>\n</li>\n<li>\n<p><strong>Install MkDocs Material</strong>: Type <code>pip install mkdocs-material</code> in the command prompt. To check if MkDocs Material is installed, type <code>mkdocs serve --help</code>.  This command should list material as an option under the <code>--theme</code>. If material is listed, it means that Material for MkDocs is installed correctly.</p>\n<p><img src=\"../img/material-theme.png\" alt=\"Material theme\" width=\"500\"/></p>\n</li>\n</ol>\n<p>For more information, see <a href=\"https://www.mkdocs.org/user-guide/installation/\">MkDocs Installation</a> and MkDocs <a href=\"https://squidfunk.github.io/mkdocs-material/getting-started/#with-pip\">Material Installation</a>.</p>\n<h3>Install the MkDocs site</h3>\n<p>You can continue creating a brand new MkDocs Material site using <a href=\"https://squidfunk.github.io/mkdocs-material/creating-your-site/\">these instructions</a>. Or, you can fork my repo with the ready configuration:</p>\n<ol>\n<li>\n<p>Fork or download the zipped project from here: <a href=\"https://github.com/ivancheban/my-project\">https://github.com/ivancheban/my-project</a>.</p>\n</li>\n<li>\n<p>Open the <code>mkdocs.yml</code> file to edit the configuration of your site.</p>\n<p>```yml\nsite_name: Docs site\nsite_url: https://ivancheban.github.io/my-project/\nnav:\n    - Introduction: 'index.md'\n    - User Guide:\n        - 'Test': 'test-folder/test.md'\n        - 'Test 1': 'test-folder/test1.md'\n        - 'Test 2': 'test-folder/test2.md'\n    - About:\n        - 'About this site': 'about.md'\ntheme:\nfeatures:\n    - navigation.footer\nname: material\ncustom_dir: overrides\nlogo: img/logo.svg\nfavicon: img/favicon.ico\npalette: \n    scheme: default\n    accent: light blue</p>\n<p>extra_css:\n- stylesheets/extra.css</p>\n<p>plugins:\n- search\n- mike</p>\n<p>extra:\nversion:\n    provider: mike\nsocial:\n    - icon: fontawesome/brands/github\n    link: https://github.com/ivancheban\n    - icon: fontawesome/brands/linkedin\n    link: https://linkedin.com/in/ivan-cheban-a24b576\ngenerator: false</p>\n<p>markdown_extensions:\n- pymdownx.superfences:\n    custom_fences:\n        - name: mermaid\n        class: mermaid\n        format: !!python/name:pymdownx.superfences.fence_code_format\n- admonition\n- pymdownx.details\n- pymdownx.tabbed:\n    alternate_style: true\ncopyright: Copyright &copy; 2023 Ivan Cheban\n```</p>\n</li>\n<li>\n<p>Open the project folder in the VS Code terminal or in the command prompt and install the missing plugins:</p>\n<p><code>sh\npip install mike</code></p>\n<p>{{&lt; alert title=\"Note\" &gt;}}The <code>mike</code> plugin provides versioning for your docs. If you don't need the versioned docs, delete the <code>version: provider: mike</code> words and <code>- mike</code> from plugins in the <code>mkdocs.yml</code> file.{{&lt; /alert &gt;}}</p>\n</li>\n<li>\n<p>To run the site on your local host, type: <code>mkdocs serve</code>. This starts the site in your browser with this address: <a href=\"http://127.0.0.1:8000/my-project/\">http://127.0.0.1:8000/my-project/</a>.</p>\n<p><img alt=\"MkDocs local site\" src=\"../img/mkdocs-local-site.png\" /></p>\n<p>{{&lt; alert title=\"Note\" &gt;}}You don't see the docs versioning provided by the <code>mike</code> plugin because you need to deploy your site using <code>mike serve</code>. {{&lt; /alert &gt;}}</p>\n</li>\n</ol>\n<h3>Docs versioning on local host</h3>\n<p>To deploy a new version of your docs on a local host:</p>\n<ol>\n<li>\n<p>Run: <code>mike deploy --push --update-aliases 0.1 latest</code> where <code>0.1</code> is the version you make the latest. Then run <code>mike deploy --push --update-aliases 0.2 latest</code> to make <code>0.2</code> the latest version.</p>\n</li>\n<li>\n<p>Run <code>mike serve</code> to open your site in the local host with this address: <a href=\"http://localhost:8000/0.2/\">http://localhost:8000/0.2/</a>. When you go to the older version from the version selector, you'll see this message:</p>\n</li>\n</ol>\n<p><img alt=\"Latest version message\" src=\"../img/latest-version.png\" /></p>\n<h3>Deploy MkDocs Material to GitHub Pages</h3>\n<p>Now that you've checked that your MkDocs Material site works locally, it's time to deploy it on GitHub as a public site.</p>\n<ol>\n<li>\n<p>Create a <code>gh-pages</code> branch in your repository.</p>\n</li>\n<li>\n<p>In the web interface of your repository, Go to <strong>Settings &gt; Pages</strong> and selected <code>gh-pages</code> as a branch to deploy your site from. Save the changes.</p>\n</li>\n<li>\n<p>At the root of your MkDocs project, create a new GitHub Actions workflow file: <code>.github/workflows/ci.yml</code>, and copy and paste the following contents:</p>\n<p><code>yml\nname: ci \non:\npush:\n    branches:\n    - master \n    - main\npermissions:\ncontents: write\njobs:\ndeploy:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Configure Git Credentials\n        run: |\n        git config user.name github-actions[bot]\n        git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n    - uses: actions/setup-python@v5\n        with:\n        python-version: 3.x\n    - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n    - uses: actions/cache@v4\n        with:\n        key: mkdocs-material-${{ env.cache_id }}\n        path: .cache\n        restore-keys: |\n            mkdocs-material-\n    - run: pip install mkdocs-material\n    - run: pip install mike\n    - run: mkdocs gh-deploy --force</code></p>\n</li>\n<li>\n<p>Commit and push your changes.</p>\n</li>\n</ol>\n",
    "url": "/docs/static-site-generators/docs-versioning/"
  },
  {
    "title": "Wrap the lines in code blocks in Docusaurus",
    "content": "<p>{{% pageinfo %}}\nThe goal is to add the code wrap feature for the long lines of code that you add in the code blocks in the Docusaurus Markdown files. The end result should be that you don't need to scroll horizontally to get to the end of the line of code.\n{{% /pageinfo %}}</p>\n<h2>Add custom CSS</h2>\n<blockquote>\n<p>All kudos for this workaround go to <a href=\"https://github.com/benjie\">Benjie</a> who provided the solution for this <a href=\"https://github.com/facebook/docusaurus/issues/7875#issuecomment-2553171861\">issue</a>.</p>\n</blockquote>\n<p>To add a custom CSS for this code wrapper, go to <code>src/css/custom.css</code> in your Docusaurus project and insert the following code:</p>\n<p><code>css\n.wrapcode code {\n  white-space: pre-wrap;\n}</code></p>\n<h2>Use word wrapper in code blocks</h2>\n<p>To use the code wrapping feature in your Markdown code blocks or snippets, add these <code>&lt;div&gt;</code> tags with the <code>wrapcode</code> class to your Markdown file:</p>\n<p>```html</p>\n<div className=\"wrapcode\">\n\n...insert your code here...\n\n</div>\n<p>```</p>\n",
    "url": "/docs/static-site-generators/docusaurus-code-wrap/"
  },
  {
    "title": "Deploy Docusaurus site to GitLab Pages",
    "content": "<p>{{% pageinfo %}}\nThe goal is to deploy or publish your Docusaurus site to GitLab Pages. I use <a href=\"https://ivan-documentation-example.netlify.app/\">this example Docusaurus site</a> from <a href=\"../docs-as-code#docusaurus-static-site-generator\">this article</a>.\n{{% /pageinfo %}}</p>\n<h2>Prerequisites</h2>\n<blockquote>\n<p>Before you dive into publishing on GitLab Pages, it's a good idea to read more about <a href=\"https://docs.gitlab.com/ee/user/project/pages/\">this service</a>. Or, you may skip and continue with the instructions below.</p>\n</blockquote>\n<ul>\n<li>You have created the Docusaurus site by following <a href=\"../docs-as-code#docusaurus-static-site-generator\">these instructions</a></li>\n<li>You have your own Docusaurus site you would like to publish on GitLab Pages.</li>\n</ul>\n<p>With either of these two options you're ready to publish the Docusaurus site on GitLab Pages.</p>\n<h3>Create a GitLab repo</h3>\n<blockquote>\n<p>First, you need to create your GitLab repo, if you don't have one.</p>\n</blockquote>\n<p>To create a GitLab repo:</p>\n<ol>\n<li>\n<p>Go to this link to create an empty repo:</p>\n<p>https://gitlab.com/projects/new#blank_project</p>\n</li>\n<li>\n<p>Fill in these fields:</p>\n</li>\n</ol>\n<p>a. Project name - any name of your project.</p>\n<p>b. Project slug - your repo name.</p>\n<p>c. Select the <strong>Public</strong> checkbox.</p>\n<p>d. Remove selection from the <strong>Initialize repository with a README</strong> checkbox.</p>\n<p>e. Select <strong>Create project</strong>.</p>\n<pre><code>![Create a repo](../img/create-project.png)\n</code></pre>\n<p>Your empty repo is created.</p>\n<p><img alt=\"Empty repo\" src=\"../img/created-repo.png\" /></p>\n<h3>Push your Docusaurus project to the remote server</h3>\n<p>To initialize a local Git repo in your Docusaurus project folder and push it to the newly created repo:</p>\n<ol>\n<li>\n<p>In the Command Prompt, clone the newly created repo:</p>\n<p><code>sh\ngit clone https://gitlab.com/ivancheban/your-test-site.git</code></p>\n<p>where <code>your-test-site</code> is your repo name.</p>\n<p><img alt=\"Git clone\" src=\"../img/git-clone.png\" /></p>\n</li>\n<li>\n<p>In the Command Prompt, go to the <code>your-test-site</code> folder.</p>\n<p><code>sh\ncd your-test-site</code></p>\n<p><img alt=\"Go to folder\" src=\"../img/go-to-folder.png\" /></p>\n</li>\n<li>\n<p>Switch to the Git <code>main</code> branch.</p>\n<p><code>sh\ngit switch -c main</code></p>\n</li>\n<li>\n<p>Copy the files from your existing Docusaurus project folder to the your-test-site folder without the hidden <code>.git</code> folder.</p>\n<p><img alt=\"Copy files\" src=\"../img/copy-files.png\" /></p>\n</li>\n<li>\n<p>In the Command Prompt, add all the copied files:</p>\n<p><code>sh\ngit add --all</code></p>\n</li>\n<li>\n<p>Commit the added files.</p>\n<p><code>sh\ngit commit -m \"add files\"</code></p>\n</li>\n<li>\n<p>Push the committed files to the remote server.</p>\n<p><code>sh\ngit push -u origin main</code></p>\n</li>\n<li>\n<p>Refresh the GitLab page for your repo to see the uploaded files.</p>\n<p><img alt=\"Repo with upload files\" src=\"../img/repo-uploaded.png\" /></p>\n</li>\n</ol>\n<h3>Fork project</h3>\n<blockquote>\n<p>Another way (much easier) is to fork my project from GitLab.</p>\n</blockquote>\n<p>To fork my project from GitLab:</p>\n<ol>\n<li>\n<p>Go to <a href=\"https://gitlab.com/ivancheban/test-site\">https://gitlab.com/ivancheban/test-site</a>.</p>\n</li>\n<li>\n<p>Select <strong>Fork</strong>.</p>\n<p><img alt=\"Fork\" src=\"../img/fork.png\" /></p>\n</li>\n<li>\n<p>Fill in the fields:</p>\n<p>a. The project namespace - select your GitLab name from the dropdown list.</p>\n<p>b. Project slug - type the repo name.</p>\n<p>c. Select <strong>Fork project</strong>.</p>\n<p><img alt=\"Fork project\" src=\"../img/fork-project.png\" /></p>\n</li>\n<li>\n<p>Clone the forked project.</p>\n<p><code>sh\ngit clone https://gitlab.com/ivancheban/my-test-site.git</code></p>\n<p>where <code>my-test-site</code> is the repo name of the forked project.</p>\n</li>\n</ol>\n<h2>Create CI configuration</h2>\n<p>To create a CI (Continuous Integration) configuration file:</p>\n<ol>\n<li>\n<p>Open your Docusaurus project in VS Code.</p>\n<p><img alt=\"Open project folder\" src=\"../img/open-project.png\" /></p>\n</li>\n<li>\n<p>Click the New file button to add a new file.</p>\n<p><img alt=\"Add new file\" src=\"../img/new-file.png\" /></p>\n</li>\n<li>\n<p>Type the file name and extension: <code>.gitlab-ci.yml</code>. Press Enter.</p>\n<p>Your file is created.</p>\n</li>\n<li>\n<p>Copy this code and paste it inside the <code>.gitlab-ci.yml</code> file.</p>\n<p>```yaml\nimage: node:latest</p>\n<h1>allow caching for faster deployment</h1>\n<p>cache:\n  paths:\n    - node_modules/\n    - public/\n    - .cache/</p>\n<p>pages:\n  stage: deploy\n  script:\n    - yarn install\n    - yarn build:gitlab\n  artifacts:\n      paths:\n        - public\n  only:\n    - main\n```</p>\n</li>\n<li>\n<p>Add this code to the <code>package.json</code> file.</p>\n<p><code>json\n\"build:gitlab\": \"docusaurus build --out-dir public\",</code></p>\n<p><img alt=\"Build\" src=\"../img/build-docusaurus.png\" /></p>\n</li>\n<li>\n<p>Change the <code>baseUrl</code> value in the <code>docusaurus.config.js</code> file to <code>/my-test-site/</code> where <code>my-test-site</code> is the name of your repo.</p>\n<p><img alt=\"Base url\" src=\"../img/base-url.png\" /></p>\n</li>\n<li>\n<p>Commit and push the changes.</p>\n</li>\n</ol>\n<h2>Deploy site to GitLab Pages</h2>\n<blockquote>\n<p>Now you have the Docusaurus project—locally and on the remote server—with the CI configuration file. It's time to trigger deployment.</p>\n</blockquote>\n<p>To trigger deployment to GitLab Pages:</p>\n<ol>\n<li>\n<p>Change anything in your docs text.</p>\n</li>\n<li>\n<p>Commit and push your changes.</p>\n</li>\n<li>\n<p>Go to <strong>Deployments &gt; Pages</strong> in GitLab repo.</p>\n<p><img alt=\"Pages\" src=\"../img/pages.png\" /></p>\n</li>\n<li>\n<p>Click the site link deployed to GitLab Pages.</p>\n<p><a href=\"https://ivancheban.gitlab.io/my-test-site\">https://ivancheban.gitlab.io/my-test-site</a></p>\n<p><img alt=\"Pages link\" src=\"../img/pages-link.png\" /></p>\n</li>\n</ol>\n<p>Your site is online. The deployment is triggered automatically when you push changes to your repo. You can view the pipeline for each deployment in <strong>CI/CD &gt; Pipelines</strong> section.</p>\n<p><img alt=\"Pipelines\" src=\"../img/pipelines.png\" /></p>\n",
    "url": "/docs/static-site-generators/docusaurus-gitlab-pages/"
  },
  {
    "title": "Image align center in Docusaurus",
    "content": "<p>{{% pageinfo %}}\nThe goal is to align image center in your Docusaurus Markdown file using HTML markup.\n{{% /pageinfo %}}</p>\n<h2>Prerequisites</h2>\n<p>You must have <a href=\"https://docusaurus.io/docs\">Docusaurus</a> project on your machine. See <a href=\"../docs-as-code/#docusaurus-static-site-generator\">my article</a> about installing and configuring Docusaurus.</p>\n<p>If you want to use my Docusaurus example site:</p>\n<ol>\n<li>\n<p>Fork the <a href=\"https://github.com/ivancheban/my-site\">GitHub project</a> or clone it to your computer:</p>\n<p><code>sh\ngit clone https://github.com/ivancheban/my-site.git</code></p>\n</li>\n<li>\n<p>Install npm dependencies:</p>\n<p><code>sh\nnpm install</code></p>\n</li>\n<li>\n<p>Run the project on your localhost:</p>\n<p><code>sh\nnpx docusaurus start</code></p>\n</li>\n</ol>\n<p>Your Docusaurus site opens in the browser on this localhost: <a href=\"http://localhost:3000/\">http://localhost:3000/</a></p>\n<h2>Store images in the static folder</h2>\n<p>To add images in your Markdown file with the HTML markup, store these images with the following path:</p>\n<p><code>static/img/your-image.png</code></p>\n<p>For more information, see <a href=\"https://docusaurus.io/docs/markdown-features/assets#static-assets\">Static assets</a> in the Docusaurus documentation.</p>\n<h2>Use HTML markup to center image</h2>\n<p>To align your image center, use the following HTML markup in a Markdown file:</p>\n<p>```html</p>\n<!-- Paste this code inside your Markdown file -->\n\n<div class=\"text--center\"> \n  <img src=\"/img/cat.png\" /> \n</div>\n<p>```</p>\n<p>Where:</p>\n<ul>\n<li>\n<p><code>&lt;div class=\"text--center\"&gt; &lt;/div&gt;</code> is the Docusuarus in-built Infima class.</p>\n</li>\n<li>\n<p><code>&lt;img src=\"...\" /&gt;</code> is the path to the <code>static</code> folder where you have your <code>img</code> folder with images.</p>\n</li>\n</ul>\n",
    "url": "/docs/static-site-generators/docusaurus-image-center/"
  },
  {
    "title": "Image size in Docusaurus",
    "content": "<p>{{% pageinfo %}}\nThe goal is to change the image size in your Docusaurus Markdown file using HTML markup.\n{{% /pageinfo %}}</p>\n<h2>Prerequisites</h2>\n<p>You must have <a href=\"https://docusaurus.io/docs\">Docusaurus</a> project on your computer. See <a href=\"../docs-as-code/#docusaurus-static-site-generator\">my article</a> about installing and configuring Docusaurus.</p>\n<p>If you want to use my Docusaurus example site:</p>\n<ol>\n<li>\n<p>Fork the <a href=\"https://github.com/ivancheban/my-site\">GitHub project</a> or clone it to your computer:</p>\n<p><code>sh\ngit clone https://github.com/ivancheban/my-site.git</code></p>\n</li>\n<li>\n<p>Install npm dependencies:</p>\n<p><code>sh\nnpm install</code></p>\n</li>\n<li>\n<p>Run the project on your localhost:</p>\n<p><code>sh\nnpx docusaurus start</code></p>\n</li>\n</ol>\n<p>Your Docusaurus site opens in the browser on this localhost: <a href=\"http://localhost:3000/\">http://localhost:3000/</a></p>\n<h2>Store images in the static folder</h2>\n<p>To add images in your Markdown file with the HTML markup, store these images with the following path:</p>\n<p><code>static/img/your-image.png</code></p>\n<p>For more information, see <a href=\"https://docusaurus.io/docs/markdown-features/assets#static-assets\">Static assets</a> in the Docusaurus documentation.</p>\n<h2>Use HTML markup to change image size</h2>\n<p>To change the size of your image, use the following HTML markup in a Markdown file:</p>\n<p>```html</p>\n<!-- Paste this code inside your Markdown file -->\n\n<p>import Cat from '/img/cat.png';</p>\n<p><img src={Cat} alt=\"Siamese cat\" style={{width: 400}} />\n```</p>\n<p>Where:</p>\n<ul>\n<li>\n<p><code>import Cat from '/img/cat.png';</code> is the Docusuarus MDX feature for importing assets using <code>import... from...</code> You can use any name instead of <code>Cat</code>. You should use the path to your folder and image file in the <code>static/</code> folder.</p>\n</li>\n<li>\n<p><code>&lt;img src={...}</code> is the reference to the imported path with image.</p>\n</li>\n<li>\n<p><code>style={{width: 400}}</code> is where you specify the image size. <code>400</code> is the size in pixels. You can change the image size by changing this number.</p>\n</li>\n<li>\n<p>Use inline CSS style because otherwise Docusaurus uses its own CSS styles.</p>\n</li>\n</ul>\n<p>Here's the custom image size in my <a href=\"https://ivan-documentation-example.netlify.app/docs/intro\">Docusaurus example site</a>:</p>\n<p><img alt=\"Cat example\" src=\"../img/cat-example.png\" /></p>\n<p>{{&lt; alert title=\"Note\" &gt;}}When you use HTML for resizing image in Docusaurus, the <a href=\"../docusaurus-image-zoom\">image zoom</a> feature doesn't work.{{&lt; /alert &gt;}}</p>\n",
    "url": "/docs/static-site-generators/docusaurus-image-size/"
  },
  {
    "title": "Image zoom in Docusaurus site",
    "content": "<p>{{% pageinfo %}}\nThe goal is to add the image zoom capability in your Docusaurus project.\n{{% /pageinfo %}}</p>\n<h2>Prerequisites</h2>\n<p>You must have <a href=\"https://docusaurus.io/docs\">Docusaurus</a> project on your machine. See <a href=\"../docs-as-code/#docusaurus-static-site-generator\">my article</a> about installing and configuring Docusaurus.</p>\n<p>If you want to use my Docusaurus example site:</p>\n<ol>\n<li>\n<p>Fork the <a href=\"https://github.com/ivancheban/my-site\">GitHub project</a> or clone it to your machine:</p>\n<p><code>sh\ngit clone https://github.com/ivancheban/my-site.git</code></p>\n</li>\n<li>\n<p>Install npm dependencies:</p>\n<p><code>sh\nnpm install</code></p>\n</li>\n<li>\n<p>Run the project on your localhost:</p>\n<p><code>sh\nnpx docusaurus start</code></p>\n</li>\n</ol>\n<p>Your Docusaurus site opens in the browser on this localhost: <a href=\"http://localhost:3000/\">http://localhost:3000/</a></p>\n<h2>Add image zoom plugin</h2>\n<p>To add the <code>docusaurus-plugin-image-zoom</code> plugin, use the instructions from their <a href=\"https://www.npmjs.com/package/docusaurus-plugin-image-zoom\">npm package page</a> or <a href=\"https://github.com/gabrielcsapo/docusaurus-plugin-image-zoom\">GitHub repo</a>:</p>\n<ol>\n<li>\n<p>Open your project folder in VS Code or any other code editor.</p>\n</li>\n<li>\n<p>Make sure you have the latest version of Docusaurus:</p>\n<p><code>sh\nnpx docusaurus --version</code></p>\n<p>The current latest version is 2.4.1. To update to the latest version:</p>\n<p><code>sh\nnpm i @docusaurus/core@latest @docusaurus/preset-classic@latest</code></p>\n</li>\n<li>\n<p>Type this command and press Enter:</p>\n<p><code>sh\nnpm install docusaurus-plugin-image-zoom</code></p>\n<p>{{&lt; alert title=\"Note\" &gt;}}The <code>--force</code> option may be required if you haven't updated your Docusaurus to the latest version.{{&lt; /alert &gt;}}</p>\n</li>\n<li>\n<p>Add the following code to the <code>docusaurus.config.js</code> file <code>plugins</code> list:</p>\n<p><code>js\n  plugins: [\n    require.resolve('docusaurus-plugin-image-zoom')\n  ],</code></p>\n</li>\n<li>\n<p>Add the following code to the <code>docusaurus.config.js</code> file <code>themeConfig</code> object:</p>\n<p><code>js\nthemeConfig: {\n  zoom: {\n    selector: '.markdown :not(em) &gt; img',\n    background: {\n      light: 'rgb(255, 255, 255)',\n      dark: 'rgb(50, 50, 50)'\n    },\n    config: {\n      // options you can specify via https://github.com/francoischalifour/medium-zoom#usage\n    }\n  },\n},</code></p>\n<p>{{&lt; alert title=\"Note\" &gt;}}For more information about the options in the <code>zoom</code> object, see <a href=\"https://github.com/gabrielcsapo/docusaurus-plugin-image-zoom#configuration\">their docs</a>. {{&lt; /alert &gt;}}</p>\n</li>\n</ol>\n<p>My example Docusaurus project config looks like this:</p>\n<details>\n<summary>Click to expand</summary>\n\n```js\n// @ts-check\n// Note: type annotations allow type checking and IDEs autocompletion\n\nconst lightCodeTheme = require('prism-react-renderer/themes/github');\nconst darkCodeTheme = require('prism-react-renderer/themes/dracula');\n\n/** @type {import('@docusaurus/types').Config} */\nconst config = {\n  title: 'Documentation site',\n  tagline: 'How to create your documentation site with Docusaurus',\n  url: 'https://your-docusaurus-test-site.com',\n  baseUrl: '/',\n  onBrokenLinks: 'throw',\n  onBrokenMarkdownLinks: 'warn',\n  favicon: 'img/favicon.ico',\n  organizationName: 'facebook', // Usually your GitHub org/user name.\n  projectName: 'docusaurus', // Usually your repo name.\n\n  presets: [\n    [\n      'classic',\n      /** @type {import('@docusaurus/preset-classic').Options} */\n      ({\n        docs: {\n          sidebarPath: require.resolve('./sidebars.js'),\n          // Please change this to your repo.\n          editUrl: 'https://github.com/facebook/docusaurus/edit/main/website/',\n        },\n        googleAnalytics: {\n          trackingID: 'UA-162550995-21',\n          // anonymizeIP: true,\n        },\n        blog: {\n          showReadingTime: true,\n          // Please change this to your repo.\n          editUrl:\n            'https://github.com/facebook/docusaurus/edit/main/website/blog/',\n        },\n        theme: {\n          customCss: require.resolve('./src/css/custom.css'),\n        },\n      }),\n    ],\n  ],\n\n  plugins: [\n    require.resolve('docusaurus-plugin-image-zoom')\n  ],\n\n  themeConfig:\n    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */\n    ({\n      navbar: {\n        title: 'Documentation site',\n        logo: {\n          alt: 'My Site Logo',\n          src: 'img/logo.svg',\n        },\n        items: [\n          {\n            type: 'doc',\n            docId: 'intro',\n            position: 'left',\n            label: 'Docs',\n          },\n//          {to: '/blog', label: 'Blog', position: 'left'},\n          {\n            href: 'https://github.com/facebook/docusaurus',\n            label: 'GitHub',\n            position: 'right',\n          },\n        ],\n      },\n      zoom: {\n        selector: '.markdown :not(em) > img',\n        background: {\n          light: 'rgb(255, 255, 255)',\n          dark: 'rgb(50, 50, 50)'\n        },\n        config: {\n          // options you can specify via https://github.com/francoischalifour/medium-zoom#usage\n        }\n      },\n      footer: {\n        style: 'dark',\n        links: [\n          {\n            title: 'Docs',\n            items: [\n              {\n                label: 'Tutorial',\n                to: '/docs/intro',\n              },\n            ],\n          },\n          {\n            title: 'Community',\n            items: [\n              {\n                label: 'Stack Overflow',\n                href: 'https://stackoverflow.com/questions/tagged/docusaurus',\n              },\n              {\n                label: 'Discord',\n                href: 'https://discordapp.com/invite/docusaurus',\n              },\n              {\n                label: 'Twitter',\n                href: 'https://twitter.com/docusaurus',\n              },\n            ],\n          },\n          {\n            title: 'More',\n            items: [\n              {\n                label: 'Blog',\n                to: '/blog',\n              },\n              {\n                label: 'GitHub',\n                href: 'https://github.com/facebook/docusaurus',\n              },\n            ],\n          },\n        ],\n        copyright: `Copyright © ${new Date().getFullYear()} My Project, Inc. Built with Docusaurus.`,\n      },\n      prism: {\n        theme: lightCodeTheme,\n        darkTheme: darkCodeTheme,\n      },\n    }),\n};\n\nmodule.exports = config;\n```\n\n</details>\n<p><br>\nTest your Docusaurus site locally to see if images are zoomed when you click them. To start your localhost:</p>\n<p><code>sh\nnpx docusaurus start</code></p>\n",
    "url": "/docs/static-site-generators/docusaurus-image-zoom/"
  },
  {
    "title": "Create top navigation menu in Docusaurus",
    "content": "<p>{{% pageinfo %}}\nThe goal is to add the top navigation menu items each having their own sidebar menu. The sidebar must use automatic folder structure. See the API top navbar item in Docusaurus site as an example of the result.\n{{% /pageinfo %}}</p>\n<h2>Prerequisites</h2>\n<p>To add the top navigation menu to Docusaurus, make sure you have Docusaurus installed:</p>\n<ul>\n<li>To check that you have Node.js installed: <code>node --version</code>. If you don't see the version, <a href=\"https://nodejs.org/en\">download</a> and install Node.js.</li>\n<li>To check that you have Docusaurus installed: <code>npx docusaurus --version</code>. If you don't see the version, follow the installation instructions <a href=\"https://docusaurus.io/docs/installation\">here</a>.</li>\n</ul>\n<p>I assume that you've installed your Docusaurus. Open the project folder in VS Code or any other IDE of your liking. For these instructions, I'm using my test Docusaurus project:</p>\n<ul>\n<li>\n<p>repository: https://github.com/ivancheban/my-site</p>\n</li>\n<li>\n<p>site: https://ivan-documentation-example.netlify.app</p>\n</li>\n</ul>\n<h2>Add top navigation menu items</h2>\n<p>By default, a Docusaurus site doesn't have the top navigation menu other than <code>Docs</code>.</p>\n<p><img alt=\"Default Docusaurus navbar\" src=\"../img/deafault-docusaurus-navbar.png\" /></p>\n<p>To add another top navigation menu item with its own sidebar, your docs folder must include a separate folder for each sidebar. Make sure you have separate folders with .md files in the <code>docs</code> folder.</p>\n<ol>\n<li>\n<p>Copy the existing folders and files in the <code>docs</code> folder to a separate folder, for example, <code>default-docs</code>. Now, the path to the existing Docusaurus files is <code>docs/default-docs</code>.</p>\n</li>\n<li>\n<p>Add another folder to the docs folder, for example, <code>docs/test</code>.</p>\n</li>\n<li>\n<p>Add your .md files and folders to the <code>docs/test</code> folder.</p>\n</li>\n<li>\n<p>Add two items to the navbar in the <code>docusaurus.config.js</code> file:</p>\n<p><code>json\nitems: [\n  {\n    type: \"docSidebar\",\n    sidebarId: \"defaultSidebar\",\n    position: \"left\",\n    label: \"Docs\",\n  },\n  {\n    type: \"docSidebar\",\n    sidebarId: \"newSidebar\",\n    position: \"left\",\n    label: \"Test\",\n  },\n],</code></p>\n<p>where:</p>\n<ul>\n<li>\n<p><code>type</code> is the type of the navigation menu item: <code>docSidebar</code>.</p>\n</li>\n<li>\n<p><code>sidebarId</code> is a unique ID of your sidebar, for example, <code>defaultSidebar</code> or <code>newSidebar</code>. You can create your own ID.</p>\n</li>\n<li>\n<p><code>position</code> is the position to the left (default) or to the right in the top navbar.</p>\n</li>\n<li>\n<p><code>label</code> is the actual name displayed in the top navbar: <code>Docs</code>, <code>Test</code>, you name it.</p>\n</li>\n</ul>\n<p><details>\n<summary>Click here to view the entire <code>docusaurus.config.js</code> file.</summary></p>\n<p>```json\n// @ts-check\n// Note: type annotations allow type checking and IDEs autocompletion</p>\n<p>/*<em> @type {import('@docusaurus/types').Config} </em>/\nconst config = {\n  title: 'Documentation site',\n  tagline: 'How to create your documentation site with Docusaurus',\n  url: 'https://ivan-documentation-example.netlify.app',\n  baseUrl: '/',\n  onBrokenLinks: 'throw',\n  onBrokenMarkdownLinks: 'warn',\n  favicon: 'img/favicon.ico',\n  organizationName: 'ivancheban', // Usually your GitHub org/user name.\n  projectName: 'my-site', // Usually your repo name.</p>\n<p>presets: [\n    [\n      'classic',\n      /*<em> @type {import('@docusaurus/preset-classic').Options} </em>/\n      ({\n        docs: {\n          sidebarPath: require.resolve('./sidebars.js'),\n          // Please change this to your repo.\n          editUrl: 'https://github.com/ivancheban/my-site/edit/master/',\n        },\n        gtag: {\n          trackingID: 'G-NJKPS9HXWM',\n          anonymizeIP: true,\n        },\n        blog: {\n          showReadingTime: true,\n          // Please change this to your repo.\n          editUrl:\n            'https://github.com/ivancheban/my-site/edit/master/',\n        },\n        theme: {\n          customCss: require.resolve('./src/css/custom.css'),\n        },\n      }),\n    ],\n  ],</p>\n<p>plugins: [\n    require.resolve('docusaurus-plugin-image-zoom'),\n    require.resolve('docusaurus-lunr-search')\n  ],</p>\n<p>themeConfig:\n    /*<em> @type {import('@docusaurus/preset-classic').ThemeConfig} </em>/\n    ({\n      navbar: {\n        title: 'Documentation site',\n        logo: {\n          alt: 'My Site Logo',\n          src: 'img/logo.svg',\n        },\n        items: [\n          {\n            type: \"docSidebar\",\n            sidebarId: \"defaultSidebar\",\n            position: \"left\",\n            label: \"Docs\",\n          },\n          {\n            type: \"docSidebar\",\n            sidebarId: \"newSidebar\",\n            position: \"left\",\n            label: \"Test\",\n          },\n//          {to: '/blog', label: 'Blog', position: 'left'},\n          {\n            href: 'https://github.com/ivancheban/my-site',\n            label: 'GitHub',\n            position: 'right',\n          },\n        ],\n      },\n      zoom: {\n        selector: '.markdown :not(em) &gt; img',\n        background: {\n          light: 'rgb(255, 255, 255)',\n          dark: 'rgb(50, 50, 50)'\n        },\n        config: {\n          // options you can specify via https://github.com/francoischalifour/medium-zoom#usage\n        }\n      },\n      footer: {\n        style: 'dark',\n        links: [\n          {\n            title: 'Docs',\n            items: [\n              {\n                label: 'Tutorial',\n                to: '/docs/intro',\n              },\n            ],\n          },\n          {\n            title: 'Community',\n            items: [\n              {\n                label: 'Stack Overflow',\n                href: 'https://stackoverflow.com/questions/tagged/docusaurus',\n              },\n              {\n                label: 'Discord',\n                href: 'https://discordapp.com/invite/docusaurus',\n              },\n              {\n                label: 'Twitter',\n                href: 'https://twitter.com/docusaurus',\n              },\n            ],\n          },\n          {\n            title: 'More',\n            items: [\n              {\n                label: 'Blog',\n                to: '/blog',\n              },\n              {\n                label: 'GitHub',\n                href: 'https://github.com/facebook/docusaurus',\n              },\n            ],\n          },\n        ],\n        copyright: <code>Copyright © ${new Date().getFullYear()} My Project, Inc. Built with Docusaurus.</code>,\n      },\n    }),\n};</p>\n<p>module.exports = config;\n```</p>\n<p></details>\n<br></p>\n</li>\n<li>\n<p>Add your sidebars to the <code>sidebars.js</code> file, using the <code>sidebarId</code> value for each of your sidebars.</p>\n<p><code>json\nconst sidebars = {\n  // By default, Docusaurus generates a sidebar from the docs folder structure\n  defaultSidebar: [{type: 'autogenerated', dirName: 'default-docs'}],\n  newSidebar: [{type: 'autogenerated', dirName: 'test'}],\n};</code></p>\n<p>where:</p>\n<ul>\n<li>\n<p><code>type</code> is <code>autogenerated</code> meaning that folder structure is used for generating the sidebar from .md files. You control the hierarchy using the front matter <code>sidebar_position</code> value.</p>\n</li>\n<li>\n<p><code>dirName</code> is the name of the folder with .md files, for example, <code>default-docs</code> or <code>test</code> folder.</p>\n</li>\n</ul>\n<p><details>\n<summary>Click here to view the entire <code>sidebars.js</code> file.</summary></p>\n<p>```json\n/**\n* Creating a sidebar enables you to:\n- create an ordered group of docs\n- render a sidebar for each doc of that group\n- provide next/previous navigation</p>\n<p>The sidebars can be generated from the filesystem, or explicitly defined here.</p>\n<p>Create as many sidebars as you want.\n*/</p>\n<p>// @ts-check</p>\n<p>/*<em> @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} </em>/\nconst sidebars = {\n  // By default, Docusaurus generates a sidebar from the docs folder structure\n  defaultSidebar: [{type: 'autogenerated', dirName: 'default-docs'}],\n  newSidebar: [{type: 'autogenerated', dirName: 'test'}],</p>\n<p>// But you can create a sidebar manually\n  /<em>\n  tutorialSidebar: [\n    {\n      type: 'category',\n      label: 'Tutorial',\n      items: ['hello'],\n    },\n  ],\n  </em>/\n};</p>\n<p>module.exports = sidebars;\n```</p>\n<p></details>\n<br></p>\n</li>\n</ol>\n<p>{{&lt; alert title=\"Note\" &gt;}}Don't forget to change the paths relative to the folders in the <code>docs</code> folder. For example, I had to change the link in the <code>Start here</code> button on the main page in the <code>src/pages/index.js</code> and in the footer of <code>docusaurus.config.js</code> from <code>/docs/intro</code> to <code>/docs/default-docs/intro</code>.{{&lt; /alert &gt;}}</p>\n<p>As the result, the top navigation bar now has two items: <code>Docs</code> and <code>Test</code>. Each of these items has its own sidebar that's built automatically from the .md files in the separate folders of the <code>docs</code> folder.</p>\n<p><img alt=\"Two sidebars\" src=\"../img/two-sidebars.png\" /></p>\n<p><img alt=\"First sidebar\" src=\"../img/first-sidebar.png\" /></p>\n<p>Each sidebar may have subsections based on the subfolders with the <code>_category_.json</code> file. See the default Docusaurus <code>tutorial-basics</code> and <code>tutorial-extras</code> folders.</p>\n<p>View the real-world example here:</p>\n<ul>\n<li>\n<p>repository: https://github.com/ivancheban/my-site</p>\n</li>\n<li>\n<p>site: https://ivan-documentation-example.netlify.app</p>\n</li>\n</ul>\n",
    "url": "/docs/static-site-generators/docusaurus-navbar/"
  },
  {
    "title": "Add docs search chatbot to Docusaurus",
    "content": "<p>{{% pageinfo %}}\nThe goal is to add the full-text search chatbot to your Docusaurus site. You get a chatbot on every page of your site. You can interact with the chatbot by clicking the chatbot button and entering your question in the window that appears. The bot responds by providing the clickable links to the documentation articles that contain the search text or phrase. To see the result, go to: https://ivan-documentation-example.netlify.app/\n{{% /pageinfo %}}</p>\n<h2>Search chatbot built with AI</h2>\n<p>Before adding the chabot functionality to your Docusaurus site, a short disclaimer. This chatbot is NOT a real AI LLM (large language model). It's free, as it doesn't use the API from OpenAI or other AI model. I created the code using Claude.ai. The chatbot is a JavaScript file which is a React component. It uses a separate CSS file and the JSON file with the text from all Markdown or MDX files in the docs folder of your Docusaurus project. You need to run the Python script that parses all the .md and .mdx files in your docs folder every time you change the text in your docs. Perhaps, there's a way to automate this manual job. However, clicking just one button to run the Python script doesn't seem too much work to me.</p>\n<h2>Prerequisites</h2>\n<p>To add the search chatbot, you need to have installed the following items:</p>\n<ul>\n<li>\n<p><strong>Node.js.</strong> Run <code>node --version</code> in your Command Prompt to see if it's installed. If you don't see the version, download the installer here: <a href=\"https://nodejs.org/en\">https://nodejs.org/en</a>.</p>\n</li>\n<li>\n<p><strong>Docusaurus</strong>. Run <code>npx docusaurus --version</code> in the folder with your Docusaurus project. If you don't see the version of Docusaurus, install it using <a href=\"../docs-as-code/#docusaurus-static-site-generator\">these instructions</a>.</p>\n</li>\n<li>\n<p><strong>Python</strong>. Run <code>python --version</code>. If you don't see the version of Python, download the installer here: <a href=\"https://www.python.org/downloads/\">Download Python</a>.</p>\n</li>\n</ul>\n<h2>Add the Python script</h2>\n<p>Add a Python file that executes the script for converting the text in your .md and .mdx files to a JSON file:</p>\n<ol>\n<li>\n<p>Add a <code>generate_content_json.py</code> file in the root of your Docusaurus project. For example, I have it here: <code>C:\\Users\\Ivan_Cheban\\my-site\\generate_content_json.py</code>.</p>\n</li>\n<li>\n<p>Copy this code and paste it to the <code>generate_content_json.py</code> file.</p>\n<p>```python\nimport os\nimport json\nimport markdown\nimport re</p>\n<p>def get_content(directory):\n    content = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith('.md') or file.endswith('.mdx'):\n                try:\n                    with open(os.path.join(root, file), 'r', encoding='utf-8') as f:\n                        md_content = f.read()</p>\n<pre><code>                    # Extract title from the first H1 heading\n                    title_match = re.search(r'^#\\s+(.+)$', md_content, re.MULTILINE)\n                    if title_match:\n                        title = title_match.group(1)\n                    else:\n                        # Fallback to frontmatter title if H1 is not found\n                        frontmatter_title_match = re.search(r'^---\\s*\\ntitle:\\s*(.+?)\\s*\\n', md_content, re.MULTILINE)\n                        title = frontmatter_title_match.group(1) if frontmatter_title_match else os.path.splitext(file)[0]\n\n                    # Remove frontmatter\n                    md_content = re.sub(r'^---\\s*\\n.*?\\n---\\s*\\n', '', md_content, flags=re.DOTALL)\n\n                    html_content = markdown.markdown(md_content)\n\n                    # Generate URL with '/docs/' prefix\n                    url = '/docs/' + os.path.relpath(os.path.join(root, file), directory).replace('\\\\', '/')\n                    url = os.path.splitext(url)[0]  # Remove file extension\n                    if url.endswith('/index'):\n                        url = url[:-5]  # Remove 'index' from the end of the URL\n\n                    content.append({\n                        'title': title,\n                        'content': html_content,\n                        'url': url\n                    })\n            except UnicodeDecodeError:\n                print(f\"Warning: Unable to read file {file} with UTF-8 encoding. Skipping this file.\")\nreturn content\n</code></pre>\n<p>def generate_json(content_dir, output_file):\n    content = get_content(content_dir)\n    with open(output_file, 'w', encoding='utf-8') as f:\n        json.dump(content, f, ensure_ascii=False, indent=2)\n    print(f\"Generated {output_file} with {len(content)} articles.\")</p>\n<h1>Paths</h1>\n<p>docs_dir = 'docs'\nstatic_dir = 'static'\noutput_file = os.path.join(static_dir, 'content.json')</p>\n<h1>Generate JSON file</h1>\n<p>generate_json(docs_dir, output_file)</p>\n<p>print(\"JSON generation complete.\")\n```</p>\n</li>\n<li>\n<p>Install the Python library for Markdown. Run this command in the project folder:</p>\n<p><code>sh\npip install markdown</code></p>\n</li>\n<li>\n<p>Run the Python script in the <code>generate_content_json.py</code> file: either click the Play button in VS Code</p>\n<p><img src=\"../img/run-python.png\" alt=\"Install Lunr.js\" width=\"800\"/>\n<br></br></p>\n<p>or run this command in the folder with your Python file:</p>\n<p><code>sh\npython generate_content_json.py</code></p>\n</li>\n</ol>\n<p>This generates the <code>content.json</code> file in the <code>static</code> folder. For example, <code>C:\\Users\\Ivan_Cheban\\my-site\\static\\content.json</code>. The command also shows the following output with the number of parsed Markdown files:</p>\n<p><code>sh\nPS C:\\Users\\Ivan_Cheban\\my-site&gt; python generate_content_json.py\nGenerated static\\content.json with 12 articles.\nJSON generation complete.\nPS C:\\Users\\Ivan_Cheban\\my-site&gt;</code></p>\n<p>The JSON file has the following structure:</p>\n<p><code>json\n[\n  {\n    \"title\": \"Page Title\",\n    \"content\": \"HTML content of the page\",\n    \"url\": \"/docs/path/to/page\"\n  },\n  {\n    \"title\": \"Another Page Title\",\n    \"content\": \"HTML content of another page\",\n    \"url\": \"/docs/path/to/another-page\"\n  },\n  // ... more entries\n]</code></p>\n<p>For example:</p>\n<p><code>json\n[\n  {\n    \"title\": \"Introduction to Docusaurus\",\n    \"content\": \"&lt;h1&gt;Introduction to Docusaurus&lt;/h1&gt;&lt;p&gt;Docusaurus is a modern static website generator...&lt;/p&gt;&lt;h2&gt;Key Features&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Easy to use&lt;/li&gt;&lt;li&gt;Powered by React&lt;/li&gt;&lt;li&gt;Extensible&lt;/li&gt;&lt;/ul&gt;\",\n    \"url\": \"/docs/intro\"\n  },\n  {\n    \"title\": \"Installation Guide\",\n    \"content\": \"&lt;h1&gt;Installation Guide&lt;/h1&gt;&lt;p&gt;To install Docusaurus, follow these steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure you have Node.js installed&lt;/li&gt;&lt;li&gt;Run &lt;code&gt;npx create-docusaurus@latest my-website classic&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Navigate to the project directory&lt;/li&gt;&lt;li&gt;Start the development server with &lt;code&gt;npm run start&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;\",\n    \"url\": \"/docs/getting-started/installation\"\n  }\n]</code></p>\n<p>Let's break down the structure:</p>\n<ol>\n<li>\n<p>The file contains a single JSON array.</p>\n</li>\n<li>\n<p>Each item in the array is an object representing a single documentation page.</p>\n</li>\n<li>\n<p>Each page object has three key-value pairs:</p>\n</li>\n</ol>\n<p>a. <code>\"title\"</code>: The title of the page, which is extracted from either:\n      - The first H1 heading in the markdown file.\n      - The <code>title</code> field in the frontmatter.\n      - The filename (without extension) if neither of the above is found.</p>\n<p>b. <code>\"content\"</code>: The full HTML content of the page. This is generated by converting the markdown content (excluding frontmatter) to HTML.</p>\n<p>c. <code>\"url\"</code>: The URL path to the page on your Docusaurus site, always starting with \"/docs/\".</p>\n<h2>Create the Chatbot component</h2>\n<p>Add all the chatbot JS, CSS, and layout JS files:</p>\n<ol>\n<li>\n<p>Add the <code>Chatbot.js</code> file and the <code>components</code> folder to the <code>src</code> folder: <code>C:\\Users\\Ivan_Cheban\\my-site\\src\\components\\Chatbot.js</code>.</p>\n</li>\n<li>\n<p>Copy and paste the following code to the <code>Chatbot.js</code> file:</p>\n<p>```js\nimport React, { useState, useEffect, useRef } from 'react';\nimport styles from './Chatbot.module.css';</p>\n<p>const Chatbot = () =&gt; {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [articles, setArticles] = useState([]);\n  const messagesEndRef = useRef(null);</p>\n<p>useEffect(() =&gt; {\n    fetch('/content.json')\n      .then(response =&gt; response.json())\n      .then(data =&gt; {\n        setArticles(data);\n        console.log('Articles loaded:', data.length);\n      })\n      .catch(error =&gt; console.error('Error loading content:', error));\n  }, []);</p>\n<p>useEffect(() =&gt; {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);</p>\n<p>const toggleChatbot = () =&gt; setIsOpen(!isOpen);</p>\n<p>const handleInputChange = (event) =&gt; setInputValue(event.target.value);</p>\n<p>const handleSubmit = (event) =&gt; {\n    event.preventDefault();\n    if (!inputValue.trim()) return;</p>\n<pre><code>const question = inputValue.toLowerCase();\nsetMessages(prev =&gt; [...prev, { type: 'user', content: question }]);\nsetInputValue('');\n\nconst relevantArticles = articles.filter(article =&gt; \n  article.content.toLowerCase().includes(question) ||\n  article.title.toLowerCase().includes(question)\n);\n\nif (relevantArticles.length &gt; 0) {\n  const response = \"I found these relevant articles:\";\n  const links = relevantArticles.map(article =&gt; ({ title: article.title, url: article.url }));\n  setMessages(prev =&gt; [...prev, { type: 'bot', content: response, links: links }]);\n} else {\n  setMessages(prev =&gt; [...prev, { type: 'bot', content: \"I'm sorry, I couldn't find any articles related to your question.\" }]);\n}\n</code></pre>\n<p>};</p>\n<p>const renderMessage = (message) =&gt; {\n    if (message.type === 'user') {\n      return <p><strong>You:</strong> {message.content}</p>;\n    } else {\n      return (\n        <div>\n          <p><strong>Bot:</strong> {message.content}</p>\n          {message.links &amp;&amp; (\n            <ul>\n              {message.links.map((link, index) =&gt; (\n                <li key={index}>\n                  <a href={link.url}>{link.title}</a>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      );\n    }\n  };</p>\n<p>return (\n    &lt;&gt;\n      <div className={styles.chatbotToggle} onClick={toggleChatbot}>\n        Ask chatbot\n      </div>\n      {isOpen &amp;&amp; (\n        <div className={styles.chatbot}>\n          <div className={styles.chatbotHeader}>\n            <span>Chatbot</span>\n            <button className={styles.chatbotClose} onClick={toggleChatbot}>×</button>\n          </div>\n          <div className={styles.chatMessages}>\n            {messages.map((message, index) =&gt; (\n              <div key={index}>{renderMessage(message)}</div>\n            ))}\n            <div ref={messagesEndRef} />\n          </div>\n          <form className={styles.chatInputArea} onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              value={inputValue}\n              onChange={handleInputChange}\n              placeholder=\"Ask a question...\"\n              className={styles.userInput}\n            />\n            <button type=\"submit\" className={styles.askButton}>Send</button>\n          </form>\n        </div>\n      )}\n  <br />\n  );\n};</p>\n<p>export default Chatbot;\n```</p>\n</li>\n<li>\n<p>In the same directory (<code>src/components/</code>), add a file named <code>Chatbot.module.css</code>.</p>\n</li>\n<li>\n<p>Copy and paste this CSS code:</p>\n<p>```css\n.chatbotToggle {\n    position: fixed;\n    bottom: 20px;\n    right: 20px;\n    background-color: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border-radius: 5px;\n    cursor: pointer;\n    z-index: 1000;\n  }</p>\n<p>.chatbot {\n    position: fixed;\n    bottom: 70px;\n    right: 20px;\n    width: 300px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    background-color: white;\n    box-shadow: 0 0 10px rgba(0,0,0,0.1);\n    z-index: 1000;\n    display: flex;\n    flex-direction: column;\n  }</p>\n<p>.chatbotHeader {\n    background-color: #007bff;\n    color: white;\n    padding: 10px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }</p>\n<p>.chatbotClose {\n    background: none;\n    border: none;\n    color: white;\n    font-size: 20px;\n    cursor: pointer;\n  }</p>\n<p>.chatMessages {\n    height: 200px;\n    overflow-y: auto;\n    padding: 10px;\n    border-bottom: 1px solid #eee;\n  }</p>\n<p>.chatInputArea {\n    display: flex;\n    flex-direction: column;\n    padding: 10px;\n  }</p>\n<p>.userInput {\n    width: 100%;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 3px;\n    margin-bottom: 10px;\n  }</p>\n<p>.askButton {\n    align-self: center;\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 3px;\n    cursor: pointer;\n    white-space: nowrap;\n  }\n```</p>\n</li>\n<li>\n<p>Add a <code>theme</code> folder and a <code>Layout.js</code> file at <code>src/theme/Layout.js</code>path. For example: <code>C:\\Users\\Ivan_Cheban\\my-site\\src\\theme\\Layout.js</code></p>\n</li>\n<li>\n<p>Add the following code to the <code>Layout.js</code> file:</p>\n<p>```jsx\nimport React from 'react';\nimport Layout from '@theme-original/Layout';\nimport Chatbot from '@site/src/components/Chatbot';</p>\n<p>export default function LayoutWrapper(props) {\n  return (\n    &lt;&gt;\n      <Layout {...props} />\n      <Chatbot />\n  <br />\n  );\n}\n```</p>\n</li>\n</ol>\n<p>That's all you need to run your Docusaurus site with the search chatbot locally or deploy it. This is how the chatbot button looks:</p>\n<p><img src=\"../img/chatbot-button.png\" alt=\"Install Lunr.js\" width=\"800\"/>\n<br></br></p>\n<p>And this is how the chatbot dialog window looks when you click the button:</p>\n<p><img src=\"../img/chatbot-dialog.png\" alt=\"Install Lunr.js\" width=\"800\"/>\n<br></br></p>\n<p>The links to the documentation articles are clickable. The button stays at the bottom even when you scroll the page. To try this out, go to my test site here: https://ivan-documentation-example.netlify.app/</p>\n",
    "url": "/docs/static-site-generators/docusaurus-search-chatbot/"
  },
  {
    "title": "Add search to Docusaurus and deploy to GitHub Pages",
    "content": "<p>{{% pageinfo %}}\nThe goal is to add the full-text search to your Docusaurus site. Use these instructions to add lunr.js Docusaurus search plugin to your site. Deploy your Docusaurus site to GitHub Pages to see the search functionality working.\n{{% /pageinfo %}}</p>\n<h2>What's Lunr.js</h2>\n<p>The lunr.js search plugin for the Docusaurus site is a <a href=\"https://www.npmjs.com/package/docusaurus-lunr-search\">node.js package</a>. Use it to add the full-text search functionality to your Docusaurus site.</p>\n<h2>Prerequisites</h2>\n<p>To add the lunr.js search plugin, you must have installed:</p>\n<ul>\n<li>\n<p><strong>Node.js.</strong> Run <code>node --version</code> in your Command Prompt to see if it's installed. If you don't see the version, download the installer here: <a href=\"https://nodejs.org/en\">https://nodejs.org/en</a>.</p>\n</li>\n<li>\n<p><strong>Docusaurus</strong>. Run <code>npx docusaurus --version</code> in the folder with your Docusaurus project. If you don't see the version of Docusaurus, install it using <a href=\"../docs-as-code/#docusaurus-static-site-generator\">these instructions</a>.</p>\n</li>\n</ul>\n<h2>How to install lunr.js</h2>\n<p>To install <a href=\"https://www.npmjs.com/package/docusaurus-lunr-search\">lunr.js</a> search for your Docusaurus site:</p>\n<ol>\n<li>\n<p>Run <code>npm i docusaurus-lunr-search  --save</code> in your Docusaurus site folder. For example, when you open Command Prompt, you have this path: <code>C:\\Users\\Ivan_Cheban&gt;</code> where <code>Ivan Cheban</code> is your user name. To go to the folder where your Docusaurus is installed: <code>cd test-website</code> where <code>test-website</code> is the folder with your Docusaurus project.</p>\n<p><img src=\"../img/install-lunr-js.png\" alt=\"Install Lunr.js\" width=\"800\"/>\n<br></br></p>\n</li>\n<li>\n<p>Add the docusaurus-lunr-search plugin to your <code>docusaurus.config.js</code> file:</p>\n<p><code>js\n  plugins: [\n    require.resolve('docusaurus-lunr-search')\n  ],</code></p>\n<p>Your <code>docusaurus.config.js</code> file will look like this:</p>\n<p><code>``js\n// @ts-check\n//</code>@type<code>JSDoc annotations allow editor autocompletion and type checking\n// (when paired with</code>@ts-check`).\n// There are various equivalent ways to declare your Docusaurus config.\n// See: https://docusaurus.io/docs/api/docusaurus-config</p>\n<p>import {themes as prismThemes} from 'prism-react-renderer';</p>\n<p>// This runs in Node.js - Don't use client-side code here (browser APIs, JSX...)</p>\n<p>/*<em> @type {import('@docusaurus/types').Config} </em>/\nconst config = {\n  title: 'My Site',\n  tagline: 'Dinosaurs are cool',\n  favicon: 'img/favicon.ico',</p>\n<p>// Set the production url of your site here\n  url: 'https://your-docusaurus-site.example.com',\n  // Set the /<baseUrl>/ pathname under which your site is served\n  // For GitHub pages deployment, it is often '/<projectName>/'\n  baseUrl: '/',</p>\n<p>// GitHub pages deployment config.\n  // If you aren't using GitHub pages, you don't need these.\n  organizationName: 'facebook', // Usually your GitHub org/user name.\n  projectName: 'docusaurus', // Usually your repo name.</p>\n<p>onBrokenLinks: 'throw',\n  onBrokenMarkdownLinks: 'warn',</p>\n<p>// Even if you don't use internationalization, you can use this field to set\n  // useful metadata like html lang. For example, if your site is Chinese, you\n  // may want to replace \"en\" with \"zh-Hans\".\n  i18n: {\n    defaultLocale: 'en',\n    locales: ['en'],\n  },</p>\n<p>presets: [\n    [\n      'classic',\n      /*<em> @type {import('@docusaurus/preset-classic').Options} </em>/\n      ({\n        docs: {\n          sidebarPath: './sidebars.js',\n          // Please change this to your repo.\n          // Remove this to remove the \"edit this page\" links.\n          editUrl:\n            'https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/',\n        },\n        blog: {\n          showReadingTime: true,\n          feedOptions: {\n            type: ['rss', 'atom'],\n            xslt: true,\n          },\n          // Please change this to your repo.\n          // Remove this to remove the \"edit this page\" links.\n          editUrl:\n            'https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/',\n          // Useful options to enforce blogging best practices\n          onInlineTags: 'warn',\n          onInlineAuthors: 'warn',\n          onUntruncatedBlogPosts: 'warn',\n        },\n        theme: {\n          customCss: './src/css/custom.css',\n        },\n      }),\n    ],\n  ],</p>\n<p>plugins: [\n    require.resolve('docusaurus-lunr-search')\n  ],</p>\n<p>themeConfig:\n    /*<em> @type {import('@docusaurus/preset-classic').ThemeConfig} </em>/\n    ({\n      // Replace with your project's social card\n      image: 'img/docusaurus-social-card.jpg',\n      navbar: {\n        title: 'My Site',\n        logo: {\n          alt: 'My Site Logo',\n          src: 'img/logo.svg',\n        },\n        items: [\n          {\n            type: 'docSidebar',\n            sidebarId: 'tutorialSidebar',\n            position: 'left',\n            label: 'Tutorial',\n          },\n          {to: '/blog', label: 'Blog', position: 'left'},\n          {\n            href: 'https://github.com/facebook/docusaurus',\n            label: 'GitHub',\n            position: 'right',\n          },\n        ],\n      },\n      footer: {\n        style: 'dark',\n        links: [\n          {\n            title: 'Docs',\n            items: [\n              {\n                label: 'Tutorial',\n                to: '/docs/intro',\n              },\n            ],\n          },\n          {\n            title: 'Community',\n            items: [\n              {\n                label: 'Stack Overflow',\n                href: 'https://stackoverflow.com/questions/tagged/docusaurus',\n              },\n              {\n                label: 'Discord',\n                href: 'https://discordapp.com/invite/docusaurus',\n              },\n              {\n                label: 'X',\n                href: 'https://x.com/docusaurus',\n              },\n            ],\n          },\n          {\n            title: 'More',\n            items: [\n              {\n                label: 'Blog',\n                to: '/blog',\n              },\n              {\n                label: 'GitHub',\n                href: 'https://github.com/facebook/docusaurus',\n              },\n            ],\n          },\n        ],\n        copyright: <code>Copyright © ${new Date().getFullYear()} My Project, Inc. Built with Docusaurus.</code>,\n      },\n      prism: {\n        theme: prismThemes.github,\n        darkTheme: prismThemes.dracula,\n      },\n    })\n};</p>\n<p>export default config;\n```</p>\n</li>\n</ol>\n<p>{{&lt; alert title=\"Note\" &gt;}}Remember that your Lunr.js search works only in production. It means that you can't check the search locally, you need to deploy your website, for example to GitLab Pages or Netlify to see how it works. To deploy your site to GitLab Pages, read <a href=\"../docusaurus-gitlab-pages/\">this article</a>.{{&lt; /alert &gt;}}</p>\n<h2>Deploy your site to GitHub Pages</h2>\n<p>To deploy your Docusaurus site online using GitHub Pages:</p>\n<ol>\n<li>\n<p>In Visual Studio Code, open the Docusaurus project folder.</p>\n</li>\n<li>\n<p>Go to the Source Control tab.</p>\n<p><img src=\"../img/source-control-panel.png\" alt=\"Install Lunr.js\" width=\"800\"/>\n<br></br></p>\n</li>\n<li>\n<p>Click <strong>Publish to GitHub</strong>.</p>\n</li>\n<li>\n<p>Select <strong>Publish to GitHub public repository</strong>.</p>\n</li>\n<li>\n<p>Click <strong>Open on GitHub</strong> to open the browser GitHub page with the created repository.</p>\n</li>\n<li>\n<p>In your <code>docusaurus.config.js</code> file, change the values for the following fields:</p>\n<ul>\n<li>\n<p><code>url</code>: <code>https://ivancheban.github.io</code></p>\n</li>\n<li>\n<p><code>baseUrl</code>: <code>/test-website/</code></p>\n</li>\n<li>\n<p><code>organizationName</code>: <code>ivancheban</code></p>\n</li>\n<li>\n<p><code>projectName</code>: <code>test-website</code></p>\n</li>\n</ul>\n<p>Your <code>docusaurus.config.js</code> file would look like this:</p>\n<p><code>``js\n// @ts-check\n//</code>@type<code>JSDoc annotations allow editor autocompletion and type checking\n// (when paired with</code>@ts-check`).\n// There are various equivalent ways to declare your Docusaurus config.\n// See: https://docusaurus.io/docs/api/docusaurus-config</p>\n<p>import {themes as prismThemes} from 'prism-react-renderer';</p>\n<p>// This runs in Node.js - Don't use client-side code here (browser APIs, JSX...)</p>\n<p>/*<em> @type {import('@docusaurus/types').Config} </em>/\nconst config = {\n  title: 'My Site',\n  tagline: 'Dinosaurs are cool',\n  favicon: 'img/favicon.ico',</p>\n<p>// Set the production url of your site here\n  url: 'https://ivancheban.github.io',\n  // Set the /<baseUrl>/ pathname under which your site is served\n  // For GitHub pages deployment, it is often '/<projectName>/'\n  baseUrl: '/test-website/',</p>\n<p>// GitHub pages deployment config.\n  // If you aren't using GitHub pages, you don't need these.\n  organizationName: 'ivancheban', // Usually your GitHub org/user name.\n  projectName: 'test-website', // Usually your repo name.</p>\n<p>onBrokenLinks: 'throw',\n  onBrokenMarkdownLinks: 'warn',</p>\n<p>// Even if you don't use internationalization, you can use this field to set\n  // useful metadata like html lang. For example, if your site is Chinese, you\n  // may want to replace \"en\" with \"zh-Hans\".\n  i18n: {\n    defaultLocale: 'en',\n    locales: ['en'],\n  },</p>\n<p>presets: [\n    [\n      'classic',\n      /*<em> @type {import('@docusaurus/preset-classic').Options} </em>/\n      ({\n        docs: {\n          sidebarPath: './sidebars.js',\n          // Please change this to your repo.\n          // Remove this to remove the \"edit this page\" links.\n          editUrl:\n            'https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/',\n        },\n        blog: {\n          showReadingTime: true,\n          feedOptions: {\n            type: ['rss', 'atom'],\n            xslt: true,\n          },\n          // Please change this to your repo.\n          // Remove this to remove the \"edit this page\" links.\n          editUrl:\n            'https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/',\n          // Useful options to enforce blogging best practices\n          onInlineTags: 'warn',\n          onInlineAuthors: 'warn',\n          onUntruncatedBlogPosts: 'warn',\n        },\n        theme: {\n          customCss: './src/css/custom.css',\n        },\n      }),\n    ],\n  ],</p>\n<p>plugins: [\n    require.resolve('docusaurus-lunr-search')\n  ],</p>\n<p>themeConfig:\n    /*<em> @type {import('@docusaurus/preset-classic').ThemeConfig} </em>/\n    ({\n      // Replace with your project's social card\n      image: 'img/docusaurus-social-card.jpg',\n      navbar: {\n        title: 'My Site',\n        logo: {\n          alt: 'My Site Logo',\n          src: 'img/logo.svg',\n        },\n        items: [\n          {\n            type: 'docSidebar',\n            sidebarId: 'tutorialSidebar',\n            position: 'left',\n            label: 'Tutorial',\n          },\n          {to: '/blog', label: 'Blog', position: 'left'},\n          {\n            href: 'https://github.com/facebook/docusaurus',\n            label: 'GitHub',\n            position: 'right',\n          },\n        ],\n      },\n      footer: {\n        style: 'dark',\n        links: [\n          {\n            title: 'Docs',\n            items: [\n              {\n                label: 'Tutorial',\n                to: '/docs/intro',\n              },\n            ],\n          },\n          {\n            title: 'Community',\n            items: [\n              {\n                label: 'Stack Overflow',\n                href: 'https://stackoverflow.com/questions/tagged/docusaurus',\n              },\n              {\n                label: 'Discord',\n                href: 'https://discordapp.com/invite/docusaurus',\n              },\n              {\n                label: 'X',\n                href: 'https://x.com/docusaurus',\n              },\n            ],\n          },\n          {\n            title: 'More',\n            items: [\n              {\n                label: 'Blog',\n                to: '/blog',\n              },\n              {\n                label: 'GitHub',\n                href: 'https://github.com/facebook/docusaurus',\n              },\n            ],\n          },\n        ],\n        copyright: <code>Copyright © ${new Date().getFullYear()} My Project, Inc. Built with Docusaurus.</code>,\n      },\n      prism: {\n        theme: prismThemes.github,\n        darkTheme: prismThemes.dracula,\n      },\n    })\n};</p>\n<p>export default config;\n```</p>\n</li>\n<li>\n<p>Create a folder and file in the root of your Docusaurus project folder: <code>.github/workflows/deploy.yml</code>:</p>\n<p>```yaml\nname: Deploy to GitHub Pages</p>\n<p>on:\n  push:\n    branches:\n      - main\n    # Review gh actions docs if you want to further define triggers, paths, etc\n    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on</p>\n<p>jobs:\n  build:\n    name: Build Docusaurus\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 18\n          cache: npm</p>\n<pre><code>  - name: Install dependencies\n    run: npm install --frozen-lockfile\n  - name: Build website\n    run: npm run build\n\n  - name: Upload Build Artifact\n    uses: actions/upload-pages-artifact@v3\n    with:\n      path: build\n</code></pre>\n<p>deploy:\n    name: Deploy to GitHub Pages\n    needs: build</p>\n<pre><code># Grant GITHUB_TOKEN the permissions required to make a Pages deployment\npermissions:\n  pages: write # to deploy to Pages\n  id-token: write # to verify the deployment originates from an appropriate source\n\n# Deploy to the github-pages environment\nenvironment:\n  name: github-pages\n  url: ${{ steps.deployment.outputs.page_url }}\n\nruns-on: ubuntu-latest\nsteps:\n  - name: Deploy to GitHub Pages\n    id: deployment\n    uses: actions/deploy-pages@v4\n</code></pre>\n<p>```</p>\n</li>\n<li>\n<p>Add a new branch called <code>gh-pages</code>.</p>\n</li>\n<li>\n<p>In your GitHub website, go to <strong>Settings &gt; Pages</strong> and select a branch from which you want to deploy your Docusaurus site. Type: <code>gh-pages</code>. Click <strong>Save</strong>.</p>\n</li>\n<li>\n<p>Commit and push your changes to the remote repository.</p>\n</li>\n<li>\n<p>Go to <strong>Actions</strong> in your web repository.</p>\n<p>You should see the pipeline and the site being built.</p>\n<p><img src=\"../img/actions.png\" alt=\"Actions\" width=\"800\"/>\n<br></br></p>\n</li>\n</ol>\n<p>You can check the settings in the repository and the site here:</p>\n<ul>\n<li>\n<p>repository: https://github.com/ivancheban/test-website</p>\n</li>\n<li>\n<p>site: https://ivancheban.github.io/test-website/</p>\n<p><img src=\"../img/search-site.png\" alt=\"Actions\" width=\"1200\"/>\n<br></br></p>\n</li>\n</ul>\n<p>Your Docusaurus site text is indexed and full-text search works.</p>\n",
    "url": "/docs/static-site-generators/docusaurus-search/"
  },
  {
    "title": "Gatsby API site",
    "content": "<p>{{% pageinfo %}}\nIn this example, let's build the API documentation site using the <a href=\"https://github.com/sarasate/gate\">Gate API theme</a> for Gatsby static site generator. This Gatsby theme is inspired by Slate and Stripes API docs. The end result will look similar to this site:</p>\n<p>https://gate-api.vercel.app/\n{{% /pageinfo %}}</p>\n<h2>Prerequisites</h2>\n<ol>\n<li>\n<p>Check that you have installed the Git client. In the Command Prompt run:</p>\n<p><code>sh\ngit version</code></p>\n<p>If you don't have Git client installed on your computer, read how to <a href=\"https://docsy-site.netlify.app/docs/static-site-generators/jekyll/#git-client\">install Git client</a>.</p>\n</li>\n<li>\n<p>Check that you have:</p>\n<ul>\n<li><a href=\"https://code.visualstudio.com/\">VSCode</a> installed on your computer</li>\n<li>A <a href=\"https://github.com/\">GitHub</a> account</li>\n<li>A <a href=\"https://vercel.com/\">Vercel</a> account</li>\n</ul>\n</li>\n</ol>\n<hr />\n<h2>Install Gatsby CLI</h2>\n<p>Gatsby CLI is an npm package you need to install for running Gatsby commands in the Command Prompt.</p>\n<ol>\n<li>\n<p>Download and install the latest Node.js version from the <a href=\"https://nodejs.org/en/\">official Node.js website</a>.</p>\n</li>\n<li>\n<p>In the Command Prompt, run the following command to install Gatsby CLI globally on your computer.</p>\n<p><code>sh\nnpm install -g gatsby-cli</code></p>\n</li>\n</ol>\n<hr />\n<h2>Fork and clone the Gate API project from GitHub</h2>\n<p>Fork or download the Gatsby API docs project from GitHub to make it your own. Then clone (download) it to your computer.</p>\n<p>To fork the Gatsby API project on GitHub:</p>\n<ol>\n<li>\n<p>Go to <a href=\"https://github.com/sarasate/gate\">https://github.com/sarasate/gate</a></p>\n</li>\n<li>\n<p>Click <strong>Fork</strong>.</p>\n<p><img alt=\"Fork repository from GitHub\" src=\"/docs/img/fork-repo.png\" /></p>\n</li>\n</ol>\n<p>The forked repository becomes your own repository. Now, you can clone or download your own GitHub project to your computer.</p>\n<p>To clone your GitHub repository:</p>\n<ol>\n<li>\n<p>Go to your forked repository.</p>\n<p>In my case, it's: <a href=\"https://github.com/ivancheban/gate\">https://github.com/ivancheban/gate</a></p>\n</li>\n<li>\n<p>Click the <strong>Code</strong> button and copy the https link to your GitHub project.</p>\n<p><img alt=\"Copy GitHub project link\" src=\"/docs/img/copy-repo-https.png\" /></p>\n</li>\n<li>\n<p>Open VSCode and click <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd>.</p>\n</li>\n<li>\n<p>Enter <code>Git: Clone</code> and press ENTER.</p>\n</li>\n<li>\n<p>Paste the link to your GitHub repository.</p>\n<p>In my case, it's: <a href=\"https://github.com/ivancheban/gate.git\">https://github.com/ivancheban/gate.git</a></p>\n</li>\n<li>\n<p>Open the cloned repository folder when you see this notification in VSCode.</p>\n<p><img alt=\"Open cloned repository\" src=\"/docs/img/open-repo-folder.png\" /></p>\n</li>\n</ol>\n<p>This is your cloned GitHub project where you can edit the <code>index.md</code> Markdown content file.</p>\n<p><img alt=\"Project content file\" src=\"/docs/img/project-index.png\" /></p>\n<h2>Build site locally</h2>\n<blockquote>\n<p>Before publishing the site online, let's see how it looks locally. Also, it's convenient to instantly view all changes locally before publishing online.</p>\n</blockquote>\n<p>To build your Gatsby API site and open it locally:</p>\n<ol>\n<li>\n<p>In the Command Prompt, go to the cloned project directory.</p>\n<p>In my case. it's <code>c:\\Users\\ivanc\\gate\\</code>.</p>\n<p><code>sh\ncd c:\\Users\\ivanc\\gate\\</code></p>\n</li>\n<li>\n<p>Install the npm dependencies for this project.</p>\n<p><code>sh\nnpm install</code></p>\n<p>Be patient as installation of the npm packages may take a while.</p>\n<p><img alt=\"Install npm dependencies\" src=\"/docs/img/npm-install.png\" /></p>\n</li>\n<li>\n<p>Build the Gatsby site for the local development.</p>\n<p><code>sh\ngatsby develop</code></p>\n</li>\n<li>\n<p>Go to <a href=\"http://localhost:8000/\">http://localhost:8000/</a> to view the API site locally.</p>\n<p>Your site opens in your browser. As you edit the site content, all the changes display automatically on this live reload server.</p>\n</li>\n</ol>\n<hr />\n<h2>Publish with Vercel</h2>\n<p>To publish your site online:</p>\n<ol>\n<li>\n<p>Log in to <a href=\"https://vercel.com/\">Vercel</a>.</p>\n</li>\n<li>\n<p>Select <strong>New Project</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/vercel-new.png\" /></p>\n</li>\n<li>\n<p>Search and import your <strong>gate</strong> repository.</p>\n<p><img alt=\"img\" src=\"/docs/img/import-gate.png\" /></p>\n</li>\n<li>\n<p>Skip the <strong>Create a Team</strong> offer.</p>\n<p><img alt=\"img\" src=\"/docs/img/skip-create-team.png\" /></p>\n</li>\n<li>\n<p>Click the <strong>Deploy</strong> button.</p>\n<p><img alt=\"img\" src=\"/docs/img/deploy-button.png\" /></p>\n<p>Wait while Vercel builds and deploys your site online. The success message informs that your site is available online.</p>\n<p><img alt=\"img\" src=\"/docs/img/success-deploy.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Go to Dashboard</strong> and then <strong>View Domains</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/view-domains.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Edit</strong> to change your site name to something more suitable for you. Don't change the <code>vercel.app</code> part.</p>\n<p><img alt=\"img\" src=\"/docs/img/gate-api.png\" /></p>\n</li>\n</ol>\n<p>Your site should be available now. You can view my Gatsby API documentation site here:</p>\n<p><a href=\"https://gate-api.vercel.app/\">https://gate-api.vercel.app/</a></p>\n",
    "url": "/docs/static-site-generators/gatsby-api/"
  },
  {
    "title": "Hugo API site",
    "content": "<p>{{% pageinfo %}}\nIn this example, let's build the API documentation site using the DocuAPI theme for Hugo static site generator. This Hugo theme is based on Slate. The end result will look similar to this site:</p>\n<p>https://docuapi-test.netlify.app\n{{% /pageinfo %}}</p>\n<h2>Prerequisites</h2>\n<ol>\n<li>\n<p>Check that you have Hugo installed: <code>hugo version</code>.</p>\n<p>If you don't have Hugo installed on your computer, read <a href=\"https://docsy-site.netlify.app/docs/static-site-generators/hugo-install/\">How to install Hugo on Windows</a>.</p>\n</li>\n<li>\n<p>Check that you have Git client installed: <code>git version</code>.</p>\n<p>If you don't have Git client installed on your computer, read how to <a href=\"https://docsy-site.netlify.app/docs/static-site-generators/jekyll/#git-client\">install Git client</a>.</p>\n</li>\n<li>\n<p>Check that you have:</p>\n<ul>\n<li><a href=\"https://code.visualstudio.com/\">VSCode</a> installed on your computer</li>\n<li>A <a href=\"https://github.com/\">GitHub</a> account</li>\n<li>A <a href=\"https://www.netlify.com/\">Netlify</a> account</li>\n</ul>\n</li>\n</ol>\n<hr />\n<h2>Download the theme</h2>\n<p>To download the API documentation theme:</p>\n<ol>\n<li>\n<p>Go to the theme <a href=\"https://github.com/bep/docuapi\">GitHub repository</a>.</p>\n<p><img alt=\"img\" src=\"/docs/img/docuapi-theme.png\" /></p>\n</li>\n<li>\n<p>Download the zipped project folder.</p>\n<p><img alt=\"img\" src=\"/docs/img/download-theme-docuapi.png\" /></p>\n</li>\n<li>\n<p>Unzip the project folder.</p>\n</li>\n</ol>\n<hr />\n<h2>Create Hugo project</h2>\n<p>To set up a new Hugo project on your computer:</p>\n<ol>\n<li>\n<p>In the Command Prompt, enter: <code>hugo new site docuapi</code> where <code>docuapi</code> is the name of the Hugo project you want to create.</p>\n<p><img alt=\"img\" src=\"/docs/img/hugo-new-site.png\" /></p>\n</li>\n<li>\n<p>Copy the downloaded theme folder to the <code>theme</code> folder of your Hugo project.</p>\n<p>In my case, I copy the <code>docuapi-master</code> folder to <code>c:\\Users\\ivanc\\docuapi\\themes\\</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/copy-theme-folder.png\" /></p>\n</li>\n<li>\n<p>Rename the copied folder from <code>docuapi-master</code> to <code>docuapi</code>. This is the theme name.</p>\n<p><img alt=\"img\" src=\"/docs/img/renamed-folder.png\" /></p>\n</li>\n<li>\n<p>Open the <code>exampleSite</code> folder in <code>c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\exampleSite\\</code>.</p>\n</li>\n<li>\n<p>Copy everything in the <code>exampleSite</code> folder in <code>c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\exampleSite\\</code> to the root of the project folder in <code>c:\\Users\\ivanc\\docuapi\\</code>. Replace the existing folders and files when asked.</p>\n<p><img alt=\"img\" src=\"/docs/img/copy-exampleSite.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Build site locally</h2>\n<blockquote>\n<p>Before publishing the site online, let's see how it looks locally.</p>\n</blockquote>\n<p>To build your Hugo site locally:</p>\n<ol>\n<li>\n<p>In the command prompt, change the folder path to your Hugo folder: <code>cd docuapi</code>. Press <strong>Enter</strong>.</p>\n</li>\n<li>\n<p>Enter <code>hugo server</code>. Press <strong>Enter</strong>.</p>\n<p>Your site is built and served on the local server.</p>\n</li>\n<li>\n<p>Copy the server address <a href=\"//localhost:1313/\">//localhost:1313/</a> and paste it in your browser.</p>\n<p><img alt=\"img\" src=\"/docs/img/hugo-server.png\" /></p>\n<p>You should see this site in your browser.</p>\n<p><img alt=\"img\" src=\"/docs/img/local-site.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Publish site online</h2>\n<blockquote>\n<p>You will use Netlify to deploy and host your Hugo API documentation site online. To publish your site online, you need to edit the configuration files and upload the project folder to GitHub first.</p>\n</blockquote>\n<h3>Edit the configuration file</h3>\n<p>To edit the Hugo site configuration file:</p>\n<ol>\n<li>\n<p>Open the <code>docuapi</code> folder in VSCode.</p>\n</li>\n<li>\n<p>Select the <code>config.toml</code> file.</p>\n<p><img alt=\"img\" src=\"/docs/img/config.toml-file.png\" /></p>\n</li>\n<li>\n<p>Edit the <code>config.toml</code> file.</p>\n<p>```toml\ntheme = \"docuapi\"</p>\n<h1>themesdir = \"../..\"</h1>\n<p>languageCode = \"en-us\"\nbaseurl = \"/\"\ntitle = \"DocuAPI Example Site\"\n```</p>\n<p>The config should look like this.</p>\n<p><img alt=\"img\" src=\"/docs/img/edited-toml.png\" /></p>\n</li>\n</ol>\n<hr />\n<h3>Edit the Netlify configuration file</h3>\n<blockquote>\n<p>You need to edit the Netlify configuration file for correct deploy to the Netlify service.</p>\n</blockquote>\n<p>To edit the Netlify config:</p>\n<ol>\n<li>\n<p>In VSCode, select the <code>netlify.toml</code> file. In my case, it's located in <code>c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/netlify.toml.png\" /></p>\n</li>\n<li>\n<p>Edit the file.</p>\n<p><code>toml\n[context.production.environment]\nHUGO_VERSION = \"0.78.1\"</code></p>\n</li>\n<li>\n<p>Change the value for <code>HUGO_VERSION</code> to your Hugo version.</p>\n<p>{{&lt; alert title=\"Note\" &gt;}}To find out your Hugo version, enter <code>hugo version</code> in the Command Prompt.{{&lt; /alert &gt;}}</p>\n<p>The edited <code>netlify.toml</code> file should look like this.</p>\n<p><img alt=\"img\" src=\"/docs/img/netlify-file.png\" /></p>\n</li>\n<li>\n<p>Move the <code>netlify.toml</code> file from the theme folder <code>c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\</code> to the project root folder <code>c:\\Users\\ivanc\\docuapi\\</code>.</p>\n</li>\n</ol>\n<h3>Upload project folder to GitHub</h3>\n<p>To upload the project folder to GitHub:</p>\n<ol>\n<li>\n<p>In VSCode, open the project folder.</p>\n</li>\n<li>\n<p>Select the <strong>Source Control</strong> icon.</p>\n<p><img alt=\"img\" src=\"/docs/img/source-control.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Publish to GitHub</strong>.</p>\n</li>\n<li>\n<p>Select <strong>Publish to GitHub public repository</strong>.</p>\n<p>When the project folder has been uploaded to the GitHub repository, you will see the success message.</p>\n</li>\n<li>\n<p>Select <strong>Open in GitHub</strong> to view your project folder uploaded and synced to the GitHub repository.</p>\n<p><img alt=\"img\" src=\"/docs/img/github-repo-docuapi.png\" /></p>\n</li>\n</ol>\n<hr />\n<h3>Publish with Netlify</h3>\n<p>To publish your site online:</p>\n<ol>\n<li>\n<p>Log in to <a href=\"https://www.netlify.com/\">Netlify</a>.</p>\n</li>\n<li>\n<p>Select <strong>New site from Git</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/new-site-netlify.png\" /></p>\n</li>\n<li>\n<p>Select <strong>GitHub</strong>.</p>\n</li>\n<li>\n<p>Select your <strong>docuapi</strong> repository.</p>\n<p><img alt=\"img\" src=\"/docs/img/docuapi-repo.png\" /></p>\n</li>\n<li>\n<p>In the <strong>Build Command</strong> field, enter <code>hugo</code>.</p>\n</li>\n<li>\n<p>In the <strong>Publish directory</strong> field, enter <code>public</code>.</p>\n</li>\n<li>\n<p>Select <strong>Deploy site</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/deploy-site.png\" /></p>\n<p>Wait until Netlify deploys your site with some funny name. You should see the green <strong>Published</strong> message.</p>\n</li>\n<li>\n<p>To change the site name, select <strong>Site settings</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/site-settings.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Change site name</strong> and enter the available name. In my case, it's <code>docuapi-test</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/change-name-docuapi.png\" /></p>\n<p>Your site should be available now. You can view my test API documentation site here:</p>\n<p><a href=\"https://docuapi-test.netlify.app/\">https://docuapi-test.netlify.app/</a></p>\n</li>\n</ol>\n",
    "url": "/docs/static-site-generators/hugo-api/"
  },
  {
    "title": "How to install Hugo on Windows",
    "content": "<p>{{% pageinfo %}}\nOur goal is to install Hugo on a computer running Windows.\n{{% /pageinfo %}}</p>\n<h2>Install Go</h2>\n<blockquote>\n<p>Hugo is based on the Go or Golang programming language. You need to install Go before installing Hugo.</p>\n</blockquote>\n<p>To install Go:</p>\n<ol>\n<li>\n<p>Check if Go is installed on your machine: <code>go version</code>.</p>\n<p><img alt=\"Check Go version\" src=\"/docs/img/go-version.png\" /></p>\n</li>\n<li>\n<p>If Go isn't installed, install it from this site:</p>\n<p>https://go.dev/doc/install</p>\n</li>\n</ol>\n<h2>Install Chocolatey</h2>\n<blockquote>\n<p>First, go to the official <a href=\"https://gohugo.io/getting-started/installing/\">Hugo installation page</a>. As you see, there's more than one way to skin a cat. I choose the Chocolatey option to install Hugo.</p>\n</blockquote>\n<p>To install Chocolatey:</p>\n<ol>\n<li>\n<p>Enter the following command in the Command Prompt. Press <strong>Enter</strong>.</p>\n<p><code>powershell\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \" [System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" &amp;&amp; SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"</code></p>\n<p><img alt=\"img\" src=\"/docs/img/choco-install.png\" /></p>\n</li>\n<li>\n<p>Check if you have Chocolatey installed: <code>choco version</code></p>\n<p><img alt=\"img\" src=\"/docs/img/choco-version.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Install Hugo</h2>\n<p>There are two versions of Hugo: standard and extended. Install the extended version as some themes require it.</p>\n<ol>\n<li>\n<p>To install the Hugo extended version using Chocolatey, enter:</p>\n<p><code>choco install hugo-extended -confirm</code></p>\n<p><img alt=\"img\" src=\"/docs/img/hugo-install.png\" /></p>\n</li>\n<li>\n<p>To check if Hugo is installed:</p>\n<p><code>hugo version</code></p>\n<p><img alt=\"img\" src=\"/docs/img/hugo-version-extended.png\" /></p>\n<p>Now you are ready to start your journey with Hugo static site generator.</p>\n</li>\n</ol>\n",
    "url": "/docs/static-site-generators/hugo-install/"
  },
  {
    "title": "Jekyll API site",
    "content": "<p>{{% pageinfo %}}\nOur goal is to build and publish the API documentation site using Jekyll and Vercel. The end result will look like this:</p>\n<p>https://aviator-jekyll-template-master.vercel.app\n{{% /pageinfo %}}</p>\n<h2>Prerequisites</h2>\n<blockquote>\n<p>Assume that you have Jekyll, Git client, and Visual Studio Code editor installed on your computer. If not, read the <a href=\"https://docsy-site.netlify.app/docs/static-site-generators/jekyll/\">Jekyll</a> article first.</p>\n</blockquote>\n<p>To check that you have Jekyll installed:</p>\n<ol>\n<li>\n<p>Open Command Prompt.</p>\n<p><img alt=\"img\" src=\"/docs/img/open-cmd.png\" /></p>\n</li>\n<li>\n<p>Enter <code>jekyll -v</code> and press <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/jekyll-version.png\" /></p>\n</li>\n</ol>\n<p>To check that you have Git and VSCode installed:</p>\n<ol>\n<li>\n<p>In the Command Prompt, enter <code>git --version</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/git-version.png\" /></p>\n</li>\n<li>\n<p>Check that you have Visual Studio Code installed.</p>\n<p><img alt=\"img\" src=\"/docs/img/open-vscode.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Download the theme</h2>\n<p>To download the Jekyll theme for your API documentation site:</p>\n<ol>\n<li>\n<p>Go to the theme <a href=\"https://github.com/CloudCannon/aviator-jekyll-template\">GitHub repository</a>.</p>\n</li>\n<li>\n<p>Select <strong>Code</strong>.</p>\n</li>\n<li>\n<p>Select <strong>Download ZIP</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/download-theme-aviator.png\" /></p>\n</li>\n<li>\n<p>Save the zipped project folder to your computer.</p>\n</li>\n<li>\n<p>Unzip the folder.</p>\n</li>\n</ol>\n<hr />\n<h2>Launch the site locally</h2>\n<blockquote>\n<p>Before publishing this site online, let’s check how the site runs locally on your computer.</p>\n</blockquote>\n<h3>Install Bundler</h3>\n<ol>\n<li>\n<p>Browse to the location where you unzipped the project folder.</p>\n</li>\n<li>\n<p>Delete the existing <code>Gemfile</code> and <code>Gemfile.lock</code> files.</p>\n<p><img alt=\"img\" src=\"/docs/img/delete-gemlock-files.png\" /></p>\n</li>\n<li>\n<p>In the file explorer, copy the path to the project folder.</p>\n<p>In my case, it’s <code>c:\\Users\\ivanc\\aviator-jekyll-template-master\\</code></p>\n<p><img alt=\"img\" src=\"/docs/img/project-folder-path-aviator.png\" /></p>\n</li>\n<li>\n<p>In the Command Prompt, change the directory to your project folder path. Press <strong>Enter</strong>.</p>\n<p><code>cd c:\\Users\\ivanc\\aviator-jekyll-template-master\\</code></p>\n</li>\n<li>\n<p>Enter <code>gem install bundler</code> and press <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/gem-install-bundler-aviator.png\" /></p>\n</li>\n<li>\n<p>Enter the following commands.</p>\n<p>```\nbundle init</p>\n<p>bundle install</p>\n<p>```</p>\n<p><img alt=\"img\" src=\"/docs/img/bundle-init-bundle-install-aviator.png\" /></p>\n<p>These commands created new <code>Gemfile</code> files in your project folder.</p>\n</li>\n</ol>\n<hr />\n<h3>Bundle update</h3>\n<ol>\n<li>\n<p>Open the <code>Gemfile</code> with Notepad.</p>\n<p><img alt=\"img\" src=\"/docs/img/gemfile-edit-aviator.png\" /></p>\n</li>\n<li>\n<p>Delete everything in this file.</p>\n</li>\n<li>\n<p>Enter the following data and save the file.</p>\n<p>```ruby\nsource 'https://rubygems.org'</p>\n<p>gem 'jekyll', '3.7.2'\ngem 'tzinfo-data'</p>\n<p>group :jekyll_plugins do\n gem 'jekyll-seo-tag', '2.4.0'\n gem 'jekyll-sitemap', '1.2.0'\nend\n```</p>\n<p><img alt=\"img\" src=\"/docs/img/gemfile-aviator.png\" /></p>\n</li>\n<li>\n<p>Enter <code>bundle update</code> and press <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/bundle-update.png\" /></p>\n</li>\n</ol>\n<hr />\n<h3>Build the site</h3>\n<p>To build your Jekyll site locally:</p>\n<ol>\n<li>\n<p>Enter <code>bundle exec jekyll serve</code> and press <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/bundle-exec-jekyll-serve.png\" /></p>\n</li>\n<li>\n<p>Copy the server address:</p>\n<p><a href=\"http://127.0.0.1:4000\">http://127.0.0.1:4000</a></p>\n</li>\n<li>\n<p>Paste it in your browser and you should see your site served locally.</p>\n<p><img alt=\"img\" src=\"/docs/img/site-served-locally-aviator.png\" /></p>\n</li>\n</ol>\n<p>{{&lt; alert title=\"Note\" &gt;}}To stop the local server where your site is served, press <code>Ctrl+C</code> in the Command Prompt.{{&lt; /alert &gt;}}</p>\n<hr />\n<h2>Publish the site online</h2>\n<blockquote>\n<p>When you finish editing the site locally, it’s time to publish it online for everybody to see. For this example, I will use the Vercel platform to deploy and host your site. But first you need to upload your project folder to GitHub.</p>\n</blockquote>\n<h3>Publish to GitHub</h3>\n<p>To upload your project folder to GitHub:</p>\n<ol>\n<li>\n<p>In VSCode, open the project folder.</p>\n</li>\n<li>\n<p>Select the <strong>Source Control</strong> icon.</p>\n<p><img alt=\"img\" src=\"/docs/img/source-control.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Publish to GitHub</strong>.</p>\n</li>\n<li>\n<p>Select <strong>Publish to GitHub public repository</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/publish-public-repo-aviator.png\" /></p>\n<p>When the project folder has been uploaded to the GitHub repository, you will see this success message.</p>\n<p><img alt=\"img\" src=\"/docs/img/git-publish-message.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Open in GitHub</strong> to view your project folder uploaded and synced to the GitHub repository.</p>\n<p><img alt=\"img\" src=\"/docs/img/github-repo-aviator.png\" /></p>\n</li>\n</ol>\n<hr />\n<h3>Deploy to Vercel</h3>\n<p>To publish your site online, you need to deploy it to Vercel.</p>\n<ol>\n<li>\n<p>Go to <a href=\"https://vercel.com/login\">Vercel</a>.</p>\n</li>\n<li>\n<p>Select <strong>Continue with GitHub</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/vercel-login.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Import Project</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/import-project.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Continue</strong> to import your project from GitHub.</p>\n<p><img alt=\"img\" src=\"/docs/img/import-git-repository.png\" /></p>\n</li>\n<li>\n<p>Provide the link to your GitHub repository and select <strong>Continue</strong>:</p>\n<p><a href=\"https://github.com/ivancheban/aviator-jekyll-template-master\">https://github.com/ivancheban/aviator-jekyll-template-master</a></p>\n<p><img alt=\"img\" src=\"/docs/img/link-to-repo-aviator.png\" /></p>\n</li>\n<li>\n<p>Enter the project name: for example, <code>aviator-jekyll-template-master</code>. Select <strong>Deploy</strong>.</p>\n<p>{{&lt; alert title=\"Note\" &gt;}}This name will be used in the link to your site. You can always change the site name in the Vercel settings in <strong>Domains</strong>.{{&lt; /alert &gt;}}</p>\n<p><img alt=\"img\" src=\"/docs/img/deploy-project-aviator.png\" /></p>\n<p>{{&lt; alert title=\"Note\" &gt;}}The project deploy takes several minutes. Be patient.{{&lt; /alert &gt;}}</p>\n<p>When the deploy finishes you will see this nice success screen.</p>\n<p><img alt=\"img\" src=\"/docs/img/site-published.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Visit</strong> to go to your API documentation site available online.</p>\n<p>You should see your site similar to this:</p>\n<p><a href=\"https://aviator-jekyll-template-master.vercel.app/\">https://aviator-jekyll-template-master.vercel.app/</a></p>\n</li>\n</ol>\n",
    "url": "/docs/static-site-generators/jekyll-api/"
  },
  {
    "title": "Jekyll",
    "content": "<p>{{% pageinfo %}}\nOur goal is to build and publish the documentation site using Jekyll and Netlify. The end result will look like this: https://sample-jekyll.netlify.app\n{{% /pageinfo %}}</p>\n<h2>Download the theme from the GitHub repo</h2>\n<ol>\n<li>\n<p>Sign up for GitHub.</p>\n<p><img alt=\"img\" src=\"/docs/img/sign-up-GitHub.png\" /></p>\n</li>\n<li>\n<p>If you already have the account there, sign in.</p>\n<p><img alt=\"img\" src=\"/docs/img/sign-in-GitHub.png\" /></p>\n</li>\n<li>\n<p>Go to <a href=\"https://github.com/tomjoht/documentation-theme-jekyll\">Tom's repository</a>.</p>\n<p><img alt=\"img\" src=\"/docs/img/tom-repo.png\" /></p>\n</li>\n<li>\n<p>Click the <strong>Code</strong> button and select <strong>Download ZIP</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/download-zip.png\" /></p>\n</li>\n<li>\n<p>Save the ZIP file to your computer and unzip the contents where you like. Now you have the folder with code and content. Let's proceed with building our documentation site from all this.</p>\n</li>\n</ol>\n<hr />\n<h2>Install Ruby on Windows</h2>\n<blockquote>\n<p>Before we install Jekyll that compiles our site, we need to install Ruby. Jekyll is a Ruby-based program and needs Ruby to run.</p>\n</blockquote>\n<ol>\n<li>\n<p>Go to <a href=\"https://rubyinstaller.org/downloads/\">RubyInstaller for Windows</a>.</p>\n</li>\n<li>\n<p>Install the recommended <strong>Ruby+Devkit 2.6.X (x64)</strong> version.</p>\n<p><img alt=\"img\" src=\"/docs/img/ruby-installer.png\" /></p>\n</li>\n<li>\n<p>Install everything by default.</p>\n<p><img alt=\"img\" src=\"/docs/img/installation-ruby.png\" /></p>\n</li>\n<li>\n<p>When the installation completes, you see this command prompt screen. Press <strong>Enter</strong>`** two times when prompted.</p>\n<p><img alt=\"img\" src=\"/docs/img/ruby-installed.png\" /></p>\n</li>\n<li>\n<p>When the installation in the command prompt exits, let's assume that we have Ruby installed. If you want to make sure, open the command prompt and type <code>ruby -v</code> and press <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/check-ruby-version.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Install Jekyll</h2>\n<ol>\n<li>\n<p>To install Jekyll, enter <code>gem install jekyll</code> in the command prompt and press <strong>Enter</strong>.</p>\n</li>\n<li>\n<p>Check if Jekyll has been installed properly: enter <code>jekyll -v</code> and press <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/check-jekyll-version.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Install Bundler</h2>\n<ol>\n<li>\n<p>Browse to the directory where you downloaded the Documentation theme for Jekyll.</p>\n</li>\n<li>\n<p>Delete the existing <code>Gemfile</code> and <code>Gemfile.lock</code> files.</p>\n<p><img alt=\"img\" src=\"/docs/img/project-folder.png\" /></p>\n</li>\n</ol>\n<h3>Change directory</h3>\n<p>First, you need to change the directory in the Command Prompt.</p>\n<ol>\n<li>\n<p>In your file explorer, copy the path to the unzipped folder with your project.</p>\n<p><img alt=\"img\" src=\"/docs/img/path-to-project-folder.png\" /></p>\n</li>\n<li>\n<p>In the Command prompt, enter <code>cd</code> and right-click to paste the copied path.</p>\n</li>\n<li>\n<p>Press <strong>Enter</strong> to change the directory. Now you can execute commands in the project directory.</p>\n<p><img alt=\"img\" src=\"/docs/img/paste-path-command-prompt.png\" /></p>\n</li>\n</ol>\n<hr />\n<h3>Install Bundler</h3>\n<ol>\n<li>\n<p>To install Bundler, enter <code>gem install bundler</code> and press <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/gem-install-bundler.png\" /></p>\n</li>\n<li>\n<p>Enter the following commands:</p>\n<p><code>powershell\nbundle init\nbundle install</code></p>\n<p><img alt=\"img\" src=\"/docs/img/bundle-init-bundle-install.png\" /></p>\n<p>These commands created new <code>Gemfile</code> files in your project folder.</p>\n</li>\n<li>\n<p>Open the <code>Gemfile</code> with Notepad.</p>\n<p><img alt=\"img\" src=\"/docs/img/gemfile.png\" /></p>\n</li>\n<li>\n<p>Delete everything in this file.</p>\n</li>\n<li>\n<p>Enter the following data and save the file.</p>\n<p>```\nsource \"https://rubygems.org\"</p>\n<p>gem \"jekyll\"\n```</p>\n<p><img alt=\"img\" src=\"/docs/img/notepad-edit-gemfile.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Build the site</h2>\n<p>To build your Jekyll site locally:</p>\n<ol>\n<li>\n<p>Change the directory in the Command Prompt: <code>cd documentation-theme-jekyll-gh-pages</code>.</p>\n</li>\n<li>\n<p>Enter <code>jekyll serve</code>.</p>\n</li>\n<li>\n<p>To access the site locally, copy the address from the Command Prompt: <a href=\"http://127.0.0.1:4000/\">http://127.0.0.1:4000</a></p>\n<p><img alt=\"img\" src=\"/docs/img/jekyll-serve.png\" /></p>\n</li>\n<li>\n<p>Paste the address in your browser and you will see the site.</p>\n<p><img alt=\"img\" src=\"/docs/img/site-built-locally.png\" /></p>\n<p>You can access all the site content locally from the project folder.</p>\n</li>\n</ol>\n<p>{{&lt; alert title=\"Note\" &gt;}}To stop the local server where your site is served, press <code>Ctrl+C</code> in the Command Prompt.{{&lt; /alert &gt;}}</p>\n<hr />\n<h2>CI/CD, GitHub and IDE</h2>\n<blockquote>\n<p>Before you publish your site online, you need to create the CI/CD pipeline. While this term sounds mysterious, there is nothing complicated about it.</p>\n<p>You need to have an editor on your computer where you will change the code and content of your site. This editor should be able to send the changes that you've made to your GitHub repository. It's like a Dropbox folder that syncs your local folder to the cloud.</p>\n<p>For this example, I will use Visual Studio Code editor/IDE.</p>\n</blockquote>\n<h3>VSCode editor</h3>\n<p>Install VSCode from its <a href=\"https://code.visualstudio.com/download\">official site</a>.</p>\n<p><img alt=\"img\" src=\"/docs/img/download-vscode.png\" /></p>\n<p>Useful links for setting up VSCode for viewing and editing Markdown files:</p>\n<ul>\n<li><a href=\"https://sciwiki.fredhutch.org/compdemos/vscode_markdown_howto\">Using Markdown with Visual Studio Code</a></li>\n<li><a href=\"https://medium.com/@michael.isprihanto/how-to-guide-markdown-in-visual-studio-code-e8a68cc01f64\">How-To Guide: Markdown in Visual Studio Code</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/languages/markdown\">Markdown and Visual Studio Code</a></li>\n<li><a href=\"https://gitlab.com/svetlnovikova/webinar/-/blob/master/post-webinar-materials.md\">Lana Novikova's materials about VScode</a> (In Russian)</li>\n</ul>\n<hr />\n<h3>Git client</h3>\n<blockquote>\n<p>You will also need Git client to connect VSCode to your GitHub repository. It's the same as using Word (in this case VSCode) to write/edit your document and Dropbox desktop client (in this case Git client) to sync your changes to the cloud server.</p>\n</blockquote>\n<ol>\n<li>\n<p>Install Git client from its <a href=\"https://git-scm.com/\">official site</a>.</p>\n<p><img alt=\"img\" src=\"/docs/img/download-git-client.png\" /></p>\n</li>\n<li>\n<p>Install everything by default. You may close the Git client window.</p>\n</li>\n</ol>\n<hr />\n<h3>View project folder in the editor</h3>\n<ol>\n<li>\n<p>Run the VSCode.</p>\n</li>\n<li>\n<p>Select <strong>File</strong> &gt; <strong>Open Folder</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/open-project-folder-vscode.png\" /></p>\n</li>\n<li>\n<p>Open the project folder.</p>\n<p><img alt=\"img\" src=\"/docs/img/open-project-folder.png\" /></p>\n<p>Now you will see the folder contents in the VSCode editor. If you open the folder with content and click the <strong>.md</strong> file, you will see the file markup.</p>\n<p><img alt=\"img\" src=\"/docs/img/markdown-markup.png\" /></p>\n<p>Now you can edit the files. But you need to upload this folder to your GitHub repository to sync the changes.</p>\n</li>\n</ol>\n<hr />\n<h3>Upload project folder to GitHub</h3>\n<ol>\n<li>\n<p>Go to the Source Control section of VSCode and click the <strong>Publish to GitHub</strong> button.</p>\n<p><img alt=\"img\" src=\"/docs/img/publish-to-github.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Publish to GitHub public repository</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/publish-to-public-repository.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Open in GitHub</strong> to open your newly created project repository in GitHub.</p>\n<p><img alt=\"img\" src=\"/docs/img/open-in-github.png\" /></p>\n<p>You will see your project folder structure. Now your local folder is synced to the GitHub cloud server. Every change that you make locally will be synced to the GitHub server.</p>\n<p><img alt=\"img\" src=\"/docs/img/project-your-repository.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Publish your site</h2>\n<blockquote>\n<p>Now when you have built the Documentation Site locally, you wonder how to publish it online for everyone to see. Although Tom tells how to publish his site on GitHub Pages, I don't recommend this. There are better and easier ways for publishing the sites built with Static Site Generators. For this example I will use Netlify.</p>\n</blockquote>\n<ol>\n<li>\n<p>Sign up to <a href=\"https://www.netlify.com/\">Netlify</a>.</p>\n<p><img alt=\"img\" src=\"/docs/img/netlify-signup.png\" /></p>\n<p>Or log in, if you already have an account.</p>\n</li>\n<li>\n<p>Press the <strong>New site from Git</strong> button.</p>\n<p><img alt=\"img\" src=\"/docs/img/new-site-from-git.png\" /></p>\n</li>\n<li>\n<p>Select <strong>GitHub</strong> as your Git provider.</p>\n<p><img alt=\"img\" src=\"/docs/img/connect-to-github.png\" /></p>\n</li>\n<li>\n<p>Authorize Netlify's access to your GitHub repository.</p>\n<p>You will see the list of your repositories.</p>\n</li>\n<li>\n<p>Pick the repository that you've created in the previous step.</p>\n<p><img alt=\"img\" src=\"/docs/img/pick-repository.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Deploy site</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/deploy-settings.png\" /></p>\n<p>You will see Netlify deploying your site with some funny name.</p>\n<p><img alt=\"img\" src=\"/docs/img/deploy-progress.png\" /></p>\n<p>{{&lt; alert title=\"Note\" &gt;}}The building of your site for the first time takes several minutes. Be patient. When the build finishes, you will see the <strong>Published</strong> status.{{&lt; /alert &gt;}}</p>\n<p><img alt=\"img\" src=\"/docs/img/site-deployed.png\" /></p>\n</li>\n<li>\n<p>Change the site name to something more relevant.</p>\n<p><img alt=\"img\" src=\"/docs/img/change-site-name.png\" /></p>\n</li>\n<li>\n<p>Click the new site name to visit its page. My test site:</p>\n<p><a href=\"https://sample-jekyll.netlify.app/\">https://sample-jekyll.netlify.app/</a></p>\n<p><img alt=\"img\" src=\"/docs/img/sample-jekyll-site.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Useful links</h2>\n<p>I used some help from these sites:</p>\n<ul>\n<li><a href=\"https://www.netlify.com/blog/2020/04/02/a-step-by-step-guide-jekyll-4.0-on-netlify/\">https://www.netlify.com/blog/2020/04/02/a-step-by-step-guide-jekyll-4.0-on-netlify/</a></li>\n<li><a href=\"https://www.netlify.com/blog/2015/10/28/a-step-by-step-guide-jekyll-3.0-on-netlify/\">https://www.netlify.com/blog/2015/10/28/a-step-by-step-guide-jekyll-3.0-on-netlify/</a></li>\n<li><a href=\"https://idratherbewriting.com/documentation-theme-jekyll/index.html\">https://idratherbewriting.com/documentation-theme-jekyll/index.html</a></li>\n<li><a href=\"https://github.com/tomjoht/documentation-theme-jekyll\">https://github.com/tomjoht/documentation-theme-jekyll</a></li>\n<li><a href=\"https://docs.github.com/en/free-pro-team@latest/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line\">https://docs.github.com/en/free-pro-team@latest/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line</a></li>\n</ul>\n",
    "url": "/docs/static-site-generators/jekyll/"
  },
  {
    "title": "Create online CV with Jekyll",
    "content": "<p>{{% pageinfo %}}\nOur goal is to build and publish the one-page online resume site using Jekyll and Vercel. The end result will look like this:</p>\n<p>https://online-cv-master.vercel.app\n{{% /pageinfo %}}</p>\n<h2>Prerequisites</h2>\n<blockquote>\n<p>Assume that you have Jekyll, Git client, and Visual Studio Code editor installed on your computer. If not, read the <a href=\"https://docsy-site.netlify.app/docs/static-site-generators/jekyll/\">Jekyll</a> article first.</p>\n</blockquote>\n<p>To check that you have Jekyll installed:</p>\n<ol>\n<li>\n<p>Open Command Prompt.</p>\n<p><img alt=\"img\" src=\"/docs/img/open-cmd.png\" /></p>\n</li>\n<li>\n<p>Enter <code>jekyll -v</code> and press <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/jekyll-version.png\" /></p>\n</li>\n</ol>\n<p>To check that you have Git and VSCode installed:</p>\n<ol>\n<li>\n<p>In the Command Prompt, enter <code>git --version</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/git-version.png\" /></p>\n</li>\n<li>\n<p>Check that you have Visual Studio Code installed.</p>\n<p><img alt=\"img\" src=\"/docs/img/open-vscode.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Download the theme</h2>\n<blockquote>\n<p>There are a lot of free preconfigured Jekyll themes that you can download from GitHub. You can view the list of themes for static site generators at <a href=\"https://jamstackthemes.dev/\">JAMstack Themes</a>. I used <a href=\"https://jamstackthemes.dev/theme/jekyll-online-cv/\">this theme</a> for my online resume.</p>\n</blockquote>\n<p>To download the Jekyll theme for your online resume:</p>\n<ol>\n<li>\n<p>Go to the theme <a href=\"https://github.com/sharu725/online-cv\">GitHub repository</a>.</p>\n</li>\n<li>\n<p>Select <strong>Code</strong>.</p>\n</li>\n<li>\n<p>Select <strong>Download ZIP</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/download-theme.png\" /></p>\n</li>\n<li>\n<p>Save the zipped project folder to your computer.</p>\n</li>\n<li>\n<p>Unzip the folder.</p>\n</li>\n</ol>\n<hr />\n<h2>Launch the site locally</h2>\n<blockquote>\n<p>Before changing the data in this CV, let’s check how the site runs locally on your computer.</p>\n</blockquote>\n<h3>Edit the config file</h3>\n<p>To edit the <code>_config.yml</code> file:</p>\n<ol>\n<li>\n<p>Open the project folder in VSCode.</p>\n</li>\n<li>\n<p>Select the <code>_config.yml</code> file.</p>\n<p><img alt=\"img\" src=\"/docs/img/config.yml.png\" /></p>\n</li>\n<li>\n<p>Delete the line: <code>baseurl: '/online-cv' #change it according to your repository name</code>.</p>\n</li>\n<li>\n<p>Delete the lines under the <code># Development Settings</code>.</p>\n<p><code>port: 4000\nhost: 0.0.0.0\nsafe: false</code></p>\n</li>\n</ol>\n<p>This is how your <code>_config.yml</code> file should look.\n<br/></p>\n<p><img alt=\"img\" src=\"/docs/img/edited-config.png\" /></p>\n<hr />\n<h3>Install Bundler</h3>\n<p>To install the Bundler:</p>\n<ol>\n<li>\n<p>In the file explorer, copy the path to the project folder.</p>\n<p>In my case, it’s <code>c:\\Users\\ivanc\\online-cv-master</code></p>\n<p><img alt=\"img\" src=\"/docs/img/project-folder-path.png\" /></p>\n</li>\n<li>\n<p>In the Command Prompt, change the directory to your project folder path. Press <strong>Enter</strong>.</p>\n<p><code>cd c:\\Users\\ivanc\\online-cv-master\\</code></p>\n</li>\n<li>\n<p>Enter <code>gem install bundler</code> and press <strong>Enter</strong>.</p>\n</li>\n<li>\n<p>Enter the following commands:</p>\n<p><code>bundle init\nbundle install</code>\n<img alt=\"img\" src=\"/docs/img/install-bundler.png\" /></p>\n<p>These commands created new <code>Gemfile</code> files in your project folder.</p>\n</li>\n<li>\n<p>Open the <code>Gemfile</code> with Notepad.</p>\n<p><img alt=\"img\" src=\"/docs/img/gemfile-edit.png\" /></p>\n</li>\n<li>\n<p>Delete everything in this file.</p>\n</li>\n<li>\n<p>Enter the following data and save the file.</p>\n<p>```\nsource \"https://rubygems.org\"</p>\n<p>gem \"jekyll\"\n```</p>\n<p><img alt=\"img\" src=\"/docs/img/notepad-edit-gemfile.png\" /></p>\n</li>\n</ol>\n<hr />\n<h3>Build the site</h3>\n<p>To build your Jekyll site locally:</p>\n<ol>\n<li>\n<p>Enter <code>jekyll serve</code> and press <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/jekyll-serve-resume.png\" /></p>\n</li>\n<li>\n<p>Copy the server address:</p>\n<p><a href=\"http://127.0.0.1:4000/online-cv/\">http://127.0.0.1:4000/online-cv/</a></p>\n</li>\n<li>\n<p>Paste it in your browser and you should see your site served locally.</p>\n<p><img alt=\"img\" src=\"/docs/img/site-served-locally.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Edit your resume</h2>\n<blockquote>\n<p>Now that you’ve built the resume site, it’s time to edit its data with your own.</p>\n</blockquote>\n<p>To edit the data in your resume:</p>\n<ol>\n<li>\n<p>In VSCode, open the project folder and select the <code>data.yml</code> file.</p>\n<p><img alt=\"img\" src=\"/docs/img/data.yml.png\" /></p>\n</li>\n<li>\n<p>Edit the data in the resume with your own.</p>\n<p>{{&lt; alert title=\"Note\" &gt;}}When you edit the data in the resume, the changes are applied automatically to the site served locally. Refresh the page in your browser to see the changes.{{&lt; /alert &gt;}}</p>\n</li>\n</ol>\n<hr />\n<h2>Publish the site online</h2>\n<blockquote>\n<p>When you finish editing the site locally, it’s time to publish it online for everybody to see. For this example, I will use another nice platform to deploy and host your site, Vercel. But first you need to upload your project folder to GitHub.</p>\n</blockquote>\n<h3>Publish to GitHub</h3>\n<p>To upload your project folder to GitHub:</p>\n<ol>\n<li>\n<p>In VSCode, open the project folder.</p>\n</li>\n<li>\n<p>Select the <strong>Source Control</strong> icon.</p>\n<p><img alt=\"img\" src=\"/docs/img/source-control.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Publish to GitHub</strong>.</p>\n</li>\n<li>\n<p>Select <strong>Publish to GitHub public repository</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/publish-public-repo.png\" /></p>\n<p>When the project folder has been uploaded to the GitHub repository, you will see this success message.</p>\n<p><img alt=\"img\" src=\"/docs/img/publish-message.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Open in GitHub</strong> to view your project folder uploaded and synced to the GitHub repository.</p>\n<p><img alt=\"img\" src=\"/docs/img/github-repo.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Deploy to Vercel</h2>\n<p>To publish your site online, you need to deploy it to Vercel.</p>\n<ol>\n<li>\n<p>Go to <a href=\"https://vercel.com/login\">Vercel</a>.</p>\n</li>\n<li>\n<p>Select <strong>Continue with GitHub</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/vercel-login.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Import Project</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/import-project.png\" /></p>\n</li>\n<li>\n<p>Select <strong>Continue</strong> to import your project from GitHub.</p>\n<p><img alt=\"img\" src=\"/docs/img/import-git-repository.png\" /></p>\n</li>\n<li>\n<p>Provide the link to your GitHub repository and select <strong>Continue</strong>:</p>\n<p><a href=\"https://github.com/ivancheban/online-cv-master\">https://github.com/ivancheban/online-cv-master</a></p>\n<p><img alt=\"img\" src=\"/docs/img/link-to-repo.png\" /></p>\n</li>\n<li>\n<p>Enter the project name: for example, <code>online-cv-master</code>. Select <strong>Deploy</strong>.</p>\n<p>{{&lt; alert title=\"Note\" &gt;}}This name will be used in the link to your site. You can always change the site name in the Vercel settings in <strong>Domains</strong>.{{&lt; /alert &gt;}}</p>\n<p><img alt=\"img\" src=\"/docs/img/deploy-project.png\" /></p>\n<p>{{&lt; alert title=\"Note\" &gt;}}The project deploy takes several minutes. Be patient.{{&lt; /alert &gt;}}</p>\n<p>When the deploy finishes you will see this nice success screen.</p>\n<p><img alt=\"img\" src=\"/docs/img/successful-deploy.gif\" /></p>\n</li>\n<li>\n<p>Select <strong>Visit</strong> to go to your resume site available online.</p>\n<p>You should see your site similar to this:</p>\n<p><a href=\"https://online-cv-master.vercel.app/\">https://online-cv-master.vercel.app/</a></p>\n</li>\n</ol>\n",
    "url": "/docs/static-site-generators/online-resume/"
  },
  {
    "title": "Pet Store Redoc API",
    "content": "<p>{{&lt; redoc \"https://petstore.swagger.io/v2/swagger.json\" &gt;}}</p>\n",
    "url": "/docs/static-site-generators/petstore-redoc/"
  },
  {
    "title": "Pet Store Swagger API",
    "content": "<p>{{&lt; swaggerui src=\"https://petstore.swagger.io/v2/swagger.json\" &gt;}}</p>\n",
    "url": "/docs/static-site-generators/petstore-swagger/"
  },
  {
    "title": "Use Publii CMS for a blog",
    "content": "<p>{{% pageinfo %}}\nThe goal is to create a personal blog using Publii desktop CMS-based static site generator. See the result here: https://technical-writing-blog.netlify.app/use-publii-cms-for-a-blog\n{{% /pageinfo %}}</p>\n<h2>What's Publii?</h2>\n<p><a href=\"https://getpublii.com/docs/\">Publii</a> is a desktop (!) CMS-based static site generator that uses Vue.js for its WYSIWYG user interface and Handlebars.js for its themes templates. I suspect there's much more to this tool, but its my first impression about this tool.</p>\n<h2>How can a technical writer use this tool?</h2>\n<p>In addition to its primary blog functionality that I used to create this blog, Publii offers many themes in its <a href=\"https://marketplace.getpublii.com/themes/\">Marketplace</a>. The Documentation section has four nice technical writer's themes for your docs. Unfortunately, all of them are not free. But the price is moderate: €35.00.</p>\n<p><img src=\"../img/marketplace-lg.png\" alt=\"Marketplace\" width=\"800\"/>\n<br></br>\nWhile I prefer free static site generators, such Docusaurus or MkDocs Material, some technical writers will find this solution reasonable and suiting their needs.</p>\n<h2>How to install and use Publii?</h2>\n<p>Positioned as a super simple and easy CMS-based static site generator (SSG), Publii isn't that straightforward. There are hundreds of the UI-hidden settings. Beginning from the theme installation from the downloaded ZIP file, you will need to consult their documentation step-by-step. The general steps are:</p>\n<ol>\n<li>Install Publii desktop app for your operating system. For example, EXE file for Windows.</li>\n<li>Select and download a theme from their Marketplace. This is a ZIP file. You can save it to any location and no need to extract it.</li>\n<li>Install the theme from the three dots menu in the upper right corner of the app. Vey cleverly hidden. Bravo, Publii!</li>\n</ol>\n<p><img src=\"../img/site-settings-lg.png\" alt=\"Site settings\" width=\"800\"/>\n<br></br></p>\n<h2>How to change colors and other site settings?</h2>\n<p>You can change your site color scheme and other theme settings in the Theme section. The selected color is applied to all your site elements, such as links or bullet points.</p>\n<p><img src=\"../img/theme-settings-lg.png\" alt=\"Theme settings\" width=\"800\"/>\n<br></br></p>\n<h2>A word of caution</h2>\n<p>Although you may not have sudden power outages as we have here in Ukraine because of the russians who destroyed our power infrastructure, I still recommend creating a backup of your Publii site as soon as possible. I had a nasty situation when the site config file was corrupted due to sudden power outage and had to reinstall the app. The backup file would help.</p>\n",
    "url": "/docs/static-site-generators/publii/"
  },
  {
    "title": "How to remove Hugo from Windows",
    "content": "<p>{{% pageinfo %}}\nOur goal is to remove Hugo static site generator installed on Windows.\n{{% /pageinfo %}}</p>\n<h2>Check Hugo version</h2>\n<p>You can check if Hugo is installed by running this command in the Command Prompt: <code>hugo version</code></p>\n<p>If you see the Hugo version, it means Hugo is installed on your computer.</p>\n<p><img alt=\"img\" src=\"/docs/img/hugo-version.png\" /></p>\n<hr />\n<h2>Find out how you installed Hugo</h2>\n<p>Now I don't remember exactly the method that I used to install Hugo. If you go to the <a href=\"https://gohugo.io/getting-started/installing/\">Hugo install page</a>, there are several methods for installing Hugo on Windows. I recall that I used Chocolatey (Windows) as my installation method.</p>\n<p>If you used Chocolatey, try this command first: <code>choco uninstall hugo</code></p>\n<p>If you see this message, you should use the last resort.</p>\n<p><img alt=\"img\" src=\"/docs/img/choco-uninstall.png\" /></p>\n<hr />\n<h2>Remove Hugo folder</h2>\n<p>In your file explorer, find and delete the Hugo folder.</p>\n<p>In my case, it's <code>C:\\ProgramData\\chocolatey\\lib\\hugo-extended</code></p>\n<p><img alt=\"img\" src=\"/docs/img/hugo-folder.png\" /></p>\n<p>Now check the Hugo version: <code>hugo version</code></p>\n<p>If you see this message, Hugo is uninstalled.</p>\n<p><img alt=\"img\" src=\"/docs/img/hugo-uninstalled.png\" /></p>\n<hr />\n<h2>Remove Chocolatey from Windows</h2>\n<p>As a bonus, here's how to uninstall Chocolatey from your computer.</p>\n<ol>\n<li>\n<p>Check if Chocolatey is installed on your computer: <code>choco version</code></p>\n<p><img alt=\"img\" src=\"/docs/img/choco-version.png\" /></p>\n</li>\n<li>\n<p>Find the folder with Chocolatey and delete it.</p>\n<p>In my case it is <code>C:\\ProgramData\\chocolatey</code></p>\n<p><img alt=\"img\" src=\"/docs/img/choco-folder.png\" /></p>\n</li>\n<li>\n<p>Enter the command <code>choco version</code>.</p>\n<p>You should see this message.</p>\n<p><img alt=\"img\" src=\"/docs/img/choco-not-installed.png\" /></p>\n</li>\n</ol>\n",
    "url": "/docs/static-site-generators/remove-hugo/"
  },
  {
    "title": "Static Site Generators",
    "content": "<p>{{% pageinfo %}}\nThis section is about setting up various static site generators.\n{{% /pageinfo %}}</p>\n<p>In these tutorials I will share my experience in setting up SSG such as Jekyll, Hugo, etc.</p>\n",
    "url": "/docs/static-site-generators//"
  },
  {
    "title": "How to configure Vale for GitHub repository",
    "content": "<p>{{% pageinfo %}}\nOur goal is to configure Vale in your GitHub repository.\n{{% /pageinfo %}}</p>\n<h2>Prerequisites</h2>\n<p>Before you start configuring Vale:</p>\n<ol>\n<li>\n<p>Check that Git is installed.</p>\n<p><code>PowerShell\ngit version</code></p>\n<p>If you don't have Git, see how to <a href=\"../../static-site-generators/jekyll#git-client\">Install Git client</a>.</p>\n</li>\n<li>\n<p>Check that Vale is installed:</p>\n<p><code>PowerShell\nvale --v</code></p>\n<p>If you don't have Vale, see how to <a href=\"../install-vale\">Install Vale</a>.</p>\n</li>\n<li>\n<p>Check that VSCode or other IDE editor is installed. See <a href=\"../../static-site-generators/jekyll#vscode-editor\">Instructions for VSCode editor</a>.</p>\n</li>\n<li>\n<p>Use your repository with Markdown files or use <a href=\"https://github.com/errata-ai/vale-boilerplate\">this test repository</a> with Vale already configured.</p>\n</li>\n</ol>\n<h2>Clone the Vale test repository</h2>\n<blockquote>\n<p>To get the initial Vale configuration, you need to clone or download the Vale test repository.</p>\n</blockquote>\n<p>To clone the Vale test repository, in your Command Prompt enter:</p>\n<p><code>PowerShell\ngit clone https://github.com/errata-ai/vale-boilerplate.git</code></p>\n<p>Alternatively, you can download the <code>vale-boilerplate</code> folder to your computer from <a href=\"https://github.com/errata-ai/vale-boilerplate\">this repository</a>.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-boilerplate-repo.png\" /></p>\n",
    "url": "/docs/vale/configure-vale/"
  },
  {
    "title": "How to install Vale on Windows",
    "content": "<p>{{% pageinfo %}}\nOur goal is to install Vale on a computer running Windows.\n{{% /pageinfo %}}</p>\n<h2>Install Chocolatey</h2>\n<blockquote>\n<p>First, go to the official <a href=\"https://docs.errata.ai/vale/install\">Vale installation page</a>. As you see, there are several options. I choose Chocolatey to install Vale.</p>\n</blockquote>\n<p>To install Chocolatey:</p>\n<ol>\n<li>\n<p>Enter the following command in the Command Prompt. Press <strong>Enter</strong>.</p>\n<p><code>PowerShell\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \" [System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" &amp;&amp; SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"</code></p>\n<p><img alt=\"img\" src=\"/docs/img/choco-install.png\" /></p>\n</li>\n<li>\n<p>Check if you have Chocolatey installed:</p>\n<p><code>PowerShell\nchoco --version</code></p>\n<p><img alt=\"img\" src=\"/docs/img/choco-version.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Install Vale</h2>\n<p>When you have Chololatey installed, install Vale:</p>\n<ol>\n<li>\n<p>In the Command Prompt, run:</p>\n<p><code>PowerShell\nchoco install vale</code></p>\n</li>\n<li>\n<p>Select <code>y</code> when prompted.</p>\n<p><img alt=\"img\" src=\"/docs/img/choco-install-vale.png\" /></p>\n</li>\n<li>\n<p>To check if Vale is installed:</p>\n<p><code>PowerShell\nvale --version</code></p>\n<p><img alt=\"img\" src=\"/docs/img/vale-version.png\" /></p>\n<p>Now you are ready to start your journey with Vale.</p>\n</li>\n</ol>\n",
    "url": "/docs/vale/install-vale/"
  },
  {
    "title": "How to update Vale on Windows",
    "content": "<p>{{% pageinfo %}}\nOur goal is to update the Vale version on a computer running Windows.\n{{% /pageinfo %}}</p>\n<h2>Use Chocolatey</h2>\n<blockquote>\n<p>First, go to the official <a href=\"https://docs.errata.ai/vale/install\">Vale installation page</a>. As you see, the <a href=\"https://community.chocolatey.org/packages/vale\">Chocolatey</a> package manager is the recommended option for installing Vale on Windows. You can use Chocolatey to update Vale.</p>\n</blockquote>\n<p>To update Vale using Chocolatey:</p>\n<ol>\n<li>\n<p>Make sure you have Vale installed.</p>\n<p><code>sh\nvale -v</code></p>\n<p>This command shows the version of Vale installed.</p>\n</li>\n<li>\n<p>Make sure you have Chocolatey installed.</p>\n<p><code>sh\nchoco -v</code></p>\n<p>This command shows the version of Chocolatey installed.</p>\n</li>\n<li>\n<p>Update the Vale version.</p>\n<p><code>sh\nchoco upgrade vale</code></p>\n<p>This command updates Vale to the latest version of Vale stored as the <a href=\"https://community.chocolatey.org/packages/vale\">Chocolatey package</a>.</p>\n<p><img alt=\"img\" src=\"/docs/img/choco-upgrade-vale.png\" /></p>\n</li>\n</ol>\n<h2>Update Vale manually</h2>\n<blockquote>\n<p>The Chocolatey package may not be the latest version of Vale available in the <a href=\"https://github.com/errata-ai/vale/releases\">official Vale release page</a>. You need to download and install the latest Vale version manually.</p>\n</blockquote>\n<p>To update Vale manually:</p>\n<ol>\n<li>\n<p>Go to the <a href=\"https://github.com/errata-ai/vale/releases\">official Vale release page</a>.</p>\n</li>\n<li>\n<p>Download the latest Vale version for your operating system.</p>\n<p>In my case, it's v2.13.0 that has the <code>Latest</code> label. This version supports readability checks by Vale.</p>\n</li>\n<li>\n<p>Unzip the downloaded archive. For example, <code>vale_2.13.0_Windows_64-bit.zip</code>.</p>\n</li>\n<li>\n<p>Copy and replace the <code>vale.exe</code> file to the Chocolatey folder where your Vale is installed. In my case, it's <code>C:\\ProgramData\\chocolatey\\bin</code>.</p>\n</li>\n<li>\n<p>Check the updated Vale version.</p>\n<p><code>sh\nvale -v</code></p>\n<p>You should have the latest Vale version installed.</p>\n</li>\n</ol>\n<h2>VS Code Vale extension for readability</h2>\n<blockquote>\n<p>Currently, VS Code doesn't support automatic readability check. See <a href=\"https://github.com/errata-ai/readability/issues/3\">this GitHub issue</a>. Run the manual check for readability.</p>\n</blockquote>\n<p>To check for readability:</p>\n<ol>\n<li>\n<p>Go to the directory with the Markdown file you want to check for readability. For example:</p>\n<p><code>sh\ncd c:\\Users\\ivanc\\docsy-site\\content\\en\\docs\\vale\\</code></p>\n</li>\n<li>\n<p>Run the Vale check. For example:</p>\n<p><code>sh\nvale vale-styleguides.md</code></p>\n<p>Vale CLI shows the readability scores.</p>\n<p><img alt=\"Readability scores\" src=\"/docs/img/readability-scores.png\" /></p>\n</li>\n</ol>\n<p>For more information, see the Vale <a href=\"https://github.com/errata-ai/readability\">readability metrics</a>.</p>\n",
    "url": "/docs/vale/update-vale/"
  },
  {
    "title": "Style guides, linters, and Vale: Why do tech writers need this?",
    "content": "<p>{{% pageinfo %}}\nThis article can be useful not only for tech writers but also for all who deal with writing documentation in English: developers, QA engineers, business analysts, and others. Not all teams have tech writers. That's why these recommendations can add quality to your documentation.\n{{% /pageinfo %}}</p>\n<p>In this article, you learn about:</p>\n<ul>\n<li>\n<p>Style guides for tech writers.</p>\n</li>\n<li>\n<p>Linters in general and linters for tech writers (by the example of Vale).</p>\n</li>\n<li>\n<p>How to use Vale for checking your texts if they comply with the recommendations in the style guides of Microsoft and Google.</p>\n</li>\n<li>\n<p>How to create your own style guide for Vale.</p>\n</li>\n</ul>\n<hr />\n<h2>What is a style guide?</h2>\n<p>Style guide is a set of recommendations about styles, usage of specific words, phrases, terms. It's a written agreement for consistent writing and look of your documentation. Style guides are <em>a single source of truth</em> when different people have their own vision on using certain words in the text or about the formatting of documentation.</p>\n<p>Tech writers use the recommendations from several generally accepted style guides: <a href=\"https://docs.microsoft.com/en-us/style-guide/\">Microsoft Style Guide</a>, <a href=\"https://developers.google.com/style\">Google developer documentation style guide</a>, etc. One of the oldest and the most well-known style guides is <a href=\"https://www.chicagomanualofstyle.org/book/ed17/frontmatter/toc.html\">The Chicago Manual of Style</a>. This style guide has been published since 1906 and is more than 1000 pages long.</p>\n<p>Mind that recommendations in the style guides from Microsoft and others are recommendations in the first place. These recommendations are preferable but not mandatory. Very often there are in-house style guides in the companies. The tech writers' team approve their internal rules on using certain terms, name conventions, punctuation. However, most of tech writers accept the well-known style guides and don't reinvent the wheel.</p>\n<p>See these examples from style guides.</p>\n<ol>\n<li>\n<p>Microsoft <a href=\"https://docs.microsoft.com/en-us/style-guide/capitalization\">recommends</a> capitalizing only the first word of headings and titles. For example, the heading of this section is: <em>What is a style guide?</em> Google <a href=\"https://developers.google.com/style/capitalization#capitalization-in-titles-and-headings\">recommends</a> the same thing.</p>\n</li>\n<li>\n<p>According to the style guides by <a href=\"https://docs.microsoft.com/en-us/style-guide/capitalization#sentence-style-capitalization-in-titles-and-headings\">Microsoft</a> and <a href=\"https://developers.google.com/style/capitalization#capitalization-in-titles-and-headings\">Google</a>, if a title or heading includes a colon, you should capitalize the first word after it. For example, the title of this article is <em>Style guides, linters, and Vale: Why do tech writers need this?</em></p>\n</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/style-guide/punctuation/commas#use-a-comma\">Microsoft</a> and <a href=\"https://developers.google.com/style/commas#serial-commas\">Google</a> style guides recommend using so-called 'oxford comma' (or serial comma) before the conjunction in a list of three or more items: <em>I dedicate this book to my parents, Ayn Rand, and God.</em></p>\n</li>\n</ol>\n<p>To summarize, style guides provide useful guidance for tech writers and all who want to write in accordance with the acknowledged standards for technical documentation. Knowledge of style guides is one of the competencies for a tech writer, even a beginner. Seasoned tech writers create style guides in the company where they work. However, they all are guided by the well-known style guides as their reference.</p>\n<p>Now, when you understand what style guides tech writers use, here is the question: how to apply these recommendations in practice? Surely, you can read the Microsoft Manual of Style as a book: memorize and take notes of the most useful recommendations. This is a long way: the printed Manual of Style is almost 500 pages. And don't forget that Google has its own style guide. Experienced tech writers know the most important recommendations by heart. Even they make mistakes or don't see them in the texts when editing, as we're all just people.</p>\n<p>Luckily, we have the tools that automate checking texts for their compliance with the recommendations in the style guides from Microsoft and Google. The Vale linter is one of these tools.</p>\n<h2>What are linters?</h2>\n<p>Linter <em>(derived from lint)</em> is a tool for automatic analysis of code for its compliance with certain requirements and rules: syntax, style, etc. This term was invented in 1978 by the programmer <a href=\"https://en.wikipedia.org/wiki/Stephen_C._Johnson\">Stephen Johnson</a> for searching for errors in the code of the С language. Literally, lints are small particles of fiber from the clothes made of cotton. Stephen compared such particles that are captured in the filter of the drier when you wash your clothes in the washing machine with small errors in your code. These errors can cause serious problems during compilation.</p>\n<p>Modern developers make extensive use of linters to meet the syntax requirements of certain programming languages and to detect errors in their code. ESLint is one of the most used linters for JavaScript: more than <a href=\"https://www.npmtrends.com/jslint-vs-jshint-vs-eslint-vs-tslint-vs-@typescript-eslint/eslint-plugin\">16 mln users</a> downloaded this tool in the first months of 2021.</p>\n<p>Now is where the fun begins: there are linters not only for code but also for texts. Vale is one of such linters. This tool was created by <a href=\"https://github.com/jdkato\">Joseph Kato</a> for the markup languages: Markdown, HTML, etc. Tech writers use Vale linter for checking if their texts meet the requirements of style guides: Microsoft, Google, etc.</p>\n<h2>Vale</h2>\n<p><a href=\"https://vale.sh/\">Vale</a> linter is a command line tool that checks if your text meets the requirements of style guides or your own rules. For those who don't like using command prompt, there's a <a href=\"https://marketplace.visualstudio.com/items?itemName=ChrisChinchilla.vale-vscode\">VS Code extension</a> that acts as a standard spellchecker and shows if your text meets the requirements of style guides.</p>\n<p>How does it work?</p>\n<h3>Prerequisites</h3>\n<ol>\n<li>\n<p>You have texts written in the Markdown <code>.md</code> format . Vale also supports HTML, reStructuredText, AsciiDoc, DITA, XML. For more information, see <a href=\"https://docs.errata.ai/vale/scoping#formats\">Vale-supported formats</a>.</p>\n</li>\n<li>\n<p>You need to check if your texts in Markdown files meet the requirements of style guides: Microsoft,  Google.</p>\n</li>\n<li>\n<p>Download the <a href=\"https://github.com/ivancheban/docsy-site/tree/master/styles\">styles</a> folder with style guide rules from this <a href=\"https://github.com/ivancheban/docsy-site\">GitHub repository</a>.</p>\n</li>\n<li>\n<p>Download the configuration file <a href=\"https://github.com/ivancheban/docsy-site/blob/master/.vale.ini\">.vale.ini</a>.</p>\n</li>\n<li>\n<p>Copy the <strong>styles</strong> folder and the <strong>.vale.ini</strong> config file to the root of your project with the Markdown files that you want to check. Usually, this is your documentation project folder.</p>\n<p><img alt=\"img\" src=\"/docs/img/test-vale.png\" /></p>\n</li>\n<li>\n<p>Install Vale: <a href=\"https://docs.errata.ai/vale/install\">installation instructions</a>. Check if Vale is installed: <code>vale --v</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-v.png\" /></p>\n</li>\n</ol>\n<h3>Using Vale</h3>\n<p>Let's check some file in Markdown. I copied one Markdown file to the test-vale folder — <strong>jekyll.md</strong>. This is my <a href=\"https://docsy-site.netlify.app/docs/static-site-generators/jekyll/\">article</a> about Jekyll static site generator. I want to check if my article meets the requirements of the style guides by Microsoft and Google.</p>\n<p>You can use the command prompt but it doesn't have this nice-looking highlighting for errors and warning from the style guides.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-cmd.png\" /></p>\n<p>I use VSCode editor for writing and editing articles in the Markdown format. In VSCode, the linting process looks much nicer.</p>\n<ol>\n<li>\n<p>In VSCode, open your project directory.</p>\n</li>\n<li>\n<p>In the VSCode terminal enter:</p>\n</li>\n</ol>\n<p><code>sh\nvale filename.md</code></p>\n<p>where <code>filename.md</code> is your Markdown file for checking.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-jekyll.png\" /></p>\n<p>As you see, the VSCode terminal has warnings in yellow and errors in red. Vale indicates the lines with the warnings and errors. For example, I used a personal pronoun our (<em>Our goal is…</em>) in the 11th line (11:1). Writing first-person plural (<em>we, our, us, let’s</em>) isn't a mistake but isn't recommended either according to the style guides by <a href=\"https://docs.microsoft.com/en-us/style-guide/grammar/person#avoid-first-person-plural\">Microsoft</a> and <a href=\"https://developers.google.com/style/pronouns#personal-pronouns\">Google</a>. Instead these style guides recommend using the second-person plural (<em>you, your</em>): <em>Your goal is…</em></p>\n<p>Certainly, it's up to you: honor the style guide recommendations or write as you think best. Sometimes the Vale linter produces <em>false positives</em> when there's no mistake. However, the main purpose of linting is to draw your attention to the potential issue. Another example shows not a warning but a red error.\n<img alt=\"img\" src=\"/docs/img/vale-terminal.png\" /></p>\n<p>In the 54th line, I write: <em>… let's assume that we have Ruby installed.</em> Microsoft <a href=\"https://docs.microsoft.com/en-us/style-guide/word-choice/use-contractions\">recommends</a> using contractions <em>we’ve</em> instead of <em>we have</em>.</p>\n<h3>Vale extension for VSCode</h3>\n<p>Instead of entering <code>vale filename.md</code> in the VSCode terminal every time when you need to lint the Markdown file, install the Vale extension for VSCode.</p>\n<ol>\n<li>\n<p>In the VSCode Extensions menu find and install the Vale extension.</p>\n</li>\n<li>\n<p>Configure this extension:</p>\n<ul>\n<li>Specify the path to the project directory with the <strong>.vale.ini</strong> file. In my case, it's: <code>c:\\Users\\ivanc\\test-vale\\.vale.ini</code>.</li>\n</ul>\n<p><img alt=\"img\" src=\"/docs/img/vale-extension-config.png\" /></p>\n</li>\n</ol>\n<p>Now Vale checks all Markdown files that you open in VSCode. The extension links to the <strong>styles</strong> directory and the <strong>.vale.ini</strong> config file. You don't have to copy these files to any project with Markdown files for linting.</p>\n<p>The linting itself runs automatically when you open any Markdown file in VSCode. Vale underlines the words or sentences with problems. You can hover over the underlined text or go to the PROBLEMS tab in the VSCode terminal.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-problems.png\" /></p>\n<p>You can also view the rule of the style guide. Select <strong>View rule</strong> to open the YML file. This file is in the folder of the respective style guide in the <strong>styles</strong> folder. The YML file has the link to the rule in the style guide.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-rule.png\" /></p>\n<h3>Create your own style guide</h3>\n<p>Now, you know how to check if your texts meet the requirements of style guides by Microsoft and Google. What about your own style guide? It's also possible. You can create your own rules and regular expressions. As a template, you can use the existing rules' YML files from Microsoft and Google style guides.</p>\n<p>To add your own rule:</p>\n<ol>\n<li>\n<p>Create a directory with the name of your own style guide. For example, <strong>my-styleguide</strong>.</p>\n</li>\n<li>\n<p>Copy the <strong>my-styleguide</strong> directory to the <strong>styles</strong> directory that has all your other style guides.</p>\n</li>\n<li>\n<p>Open the <strong>.vale.ini</strong> configuration file in Notepad.</p>\n</li>\n<li>\n<p>Add your <strong>my-styleguide</strong> filename to the list of style guides.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-ini.png\" /></p>\n</li>\n<li>\n<p>Save the changes.</p>\n</li>\n<li>\n<p>Add your rule YML file to your style guide directory with this configuration.</p>\n<p><img alt=\"img\" src=\"/docs/img/rule-1.png\" /></p>\n</li>\n<li>\n<p>Save it with the name. For example, <strong>rule-1.yml</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-rule-1.png\" /></p>\n<p>We've created a rule where Vale shows warnings when you write <em>web-site</em> instead of <em>website</em>, <em>dou</em> instead of <em>DOU</em>, and <em>e-mail</em> instead of <em>email</em> regardless of the case (upper or lower case).</p>\n</li>\n<li>\n<p>Open your Markdown file in VSCode.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-check.png\" /></p>\n<p>You see that your style guide rule works: Vale shows warnings for all the cases when you write <em>web-site</em>, <em>e-mail</em>, and <em>dou</em>.</p>\n</li>\n</ol>\n<h2>What's next?</h2>\n<p>All the checks that I've discussed in the previous sections are for local Markdown files on your computer. You can use the Vale linter as part of your CI/CD pipeline as you do with the code linters. Then Vale will lint your text every time when you commit and push changes to git. If there are errors, you won't be able to push your changes to git. You can configure your CI/CD pipeline for GitHub, GitLab. I don't use Vale for the CI/CD pipeline and prefer checking files locally. However, I know that this is the way how tech writers work in <a href=\"https://docs.gitlab.com/ee/development/documentation/testing.html#vale\">GitLab</a>, <a href=\"https://github.com/backstage/backstage\">Spotify</a>, and at other companies.</p>\n<p>By the way, you can access their open source repositories and view their configuration for linting with Vale. You can add more style guides to my configuration in the vale.ini file. Here's the list of available repositories with <a href=\"https://github.com/errata-ai/styles#available-styles\">officially supported style guides</a>. I took the Microsoft and Google style guides from there. Follow the link and download the folder with rules. For example, <a href=\"https://github.com/errata-ai/Joblint/tree/master/Joblint\">this folder for Joblint style guide</a>. This style guide has the rules for Vale to check the text in the job descriptions: if they have sexism, cultural blunders, recruiter fails, etc.</p>\n<p>Another interesting feature is to experiment with creating the rules in <a href=\"https://studio.vale.sh/\">Vale Studio</a>. You can add your own rules and regular expressions to view the immediate result of how this rule works.</p>\n<p>Hope this article helps you automate your document tests and check if they're in line with the recommendations of style guides. Create your own style guides and rules for linting with Vale. Remember that humans are prone to mistakes while such linters as Vale help avoid the human factor.</p>\n",
    "url": "/docs/vale/vale-styleguides/"
  },
  {
    "title": "Vale linter",
    "content": "<p>{{% pageinfo %}}\nThis section provides step-by-step instructions how to install and use Vale linter.\n{{% /pageinfo %}}</p>\n<p>In these tutorials I will share my experience in installing and using Vale linter. To find more about Vale, see <a href=\"https://docs.errata.ai/vale/about\">Vale Documentation</a>.</p>\n<p>The developers use linters to run automatic checks for their code quality. To read more about linters, see <a href=\"https://sourcelevel.io/blog/what-is-a-linter-and-why-your-team-should-use-it\">What is a linter and why your team should use it?</a></p>\n<p>Technical writers use the Vale linter to check if the text in their Markdown (HTML, AsciiDoc, etc.) files is in line with the style guides: Microsoft, Google, etc. The Vale configuration file includes the path to the style guides folder. Each style guide has its own rules in the form of regular expressions. When you run Vale, it searches for the patterns in your text and flags the errors and inconsistencies with the linked style guides. In addition, you can create a list of accepted words and a list of words that should be rejected. Vale flags a warning if you use the words from the rejected list.</p>\n",
    "url": "/docs/vale//"
  }
]