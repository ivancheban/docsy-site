[
  {
    "title": "Search Results",
    "content": "",
    "url": "/ua/search/"
  },
  {
    "title": "Документація",
    "content": "<p>На цьому порталі з документацією ви знайдете відомості про генератори статичних сайтів та інші інструменти для технічних письменників. Цей сайт зроблений на основі теми Docsy за допомогою генератора статичних сайтів Hugo.</p>\n<h2>Пошук у Словниках України Онлайн у 20 томах</h2>\n<p>Щоб подивитися значення слова, введіть його у формі пошуку. На цей момент видано лише 13 томів словника. У словнику доступні слова від <strong>А</strong> до <strong>Преференція</strong>.</p>\n<form target=\"_blank\" action=\"https://sum20ua.com/List/Search/\" method=\"get\"><input id=\"SearchInput\" name=\"searchWord\" pattern=\"[A-za-zА-Яа-я\\sЇїЁёЄєІі]+\" type=\"text\" value=\"\" />\n<input type=\"submit\" value=\" Тлумачення \">\n</form>\n<p><br></br>\nСайт для аудіофілів:</p>\n<p><a href=\"https://audiophilesoft.com\" title=\"Audiophile's Software\"><img src=\"https://audiophilesoft.com/as-small.png\" alt=\"Audiophile's Software\" width=\"80\" height=\"15\"></a></p>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/_"
  },
  {
    "title": "Помилка білда MadCap",
    "content": "<p>{{% pageinfo %}}\nНаша мета — усунути помилку 10086, що виникає під час білда проекта MadCap.\n{{% /pageinfo %}}</p>\n<p>У MadCap Flare може виникати промилка 10086 <strong>The process cannot access the file because it is being used by another process</strong> під час компіляції проекта в форматі PDF.</p>\n<p><img alt=\"img\" src=\"/docs/img/build-error.png\" /></p>\n<p>У моєму випадку така помилка виникає, коли проект MadCap прив’язаний до Git. Потрібно передати всі зміни в гіт, перед тим як запустити білд проекта.</p>\n<p>Ще один варіант вирішення:</p>\n<ol>\n<li>\n<p>Відкрийте диспетчер завдань Windows Task Manager.</p>\n</li>\n<li>\n<p>Виберіть процес <strong>AdobeCollabSync.exe</strong>.</p>\n</li>\n<li>\n<p>Виберіть <strong>Завершити процес</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/end-task.png\" /></p>\n</li>\n</ol>\n<p>Ще один варіант — використовувати Foxit Reader замість Adobe Acrobat Reader.</p>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/madcap-flare/build-error/"
  },
  {
    "title": "Як підключити MadCap Flare до Git",
    "content": "<p>{{% pageinfo %}}\nНаша мета — підключити проект MadCap Flare до репозиторія в GitHub. Після підключення вашого проекта до Git, ви зможете передавати всі локальні зміни до Git і синхронізувати цей репозиторій з будь-яким проектом MadCap Flare.\n{{% /pageinfo %}}</p>\n<h2>Підключення проекта MadCap Flare до Git</h2>\n<blockquote>\n<p>У цьому відео на YouTube я показую, як підключити ваш локальний проект MadCap Flare до репозиторія в GitHub.</p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8TDqoyx_Wa8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/madcap-flare/connect-madcap-to-git/"
  },
  {
    "title": "MadCap Flare",
    "content": "<p>{{% pageinfo %}}\nУ цьому розділі наведено поради щодо використання MadCap Flare.\n{{% /pageinfo %}}</p>\n<p>У цих інструкціях я ділюся досвідом роботи з MadCap Flare. Ви можете використовувати цей інструмент, щоб створювати онлайн-довідку у форматі HTML5 або PDF з єдиного джерела.</p>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/madcap-flare/_"
  },
  {
    "title": "Інструменти для документації: Docusaurus та MkDocs Material",
    "content": "<p>{{% pageinfo %}}\nМета полягає в тому, щоб допомогти вам вибрати інструмент для документації, який використовує підхід docs-as-code, Markdown, і не вимагає багато часу для розгортання.\n{{% /pageinfo %}}</p>\n<h2>Вступ</h2>\n<p>Хоча існує багато інструментів для створення документації, якими можуть скористатися технічні письменники, іноді навіть досвідчені технічні письменники задаються питанням: який інструмент я повинен використовувати для свого проєкту? Ваш проєкт може бути описом API або документацією для кінцевого користувача, онлайн-допомогою для вашого продукту або будь-якою іншою документацією. У цій статті я зосереджуюся на документації, що взаємодіє з користувачами, а не на внутрішній документації, яку ви пишете в системах вікі, наприклад Confluence або CMS, як-от SharePoint Online. Звичайно, у вашого сайту з документацією, що взаємодіє з користувачами, може бути аутентифікація або захист паролем.</p>\n<p>Добре, отже, ваш менеджер або ваше тестове завдання вимагає від вас вибрати найкраще рішення для документування продукту/API/чогось іншого. Вони навіть можуть дати вам декілька підказок, як-от Word, SharePoint, або навіть деякі невідомі комерційні інструменти для створення сайтів із документацією. Перше питання, яке я б задав, — чи використовували вони цей інструмент раніше та чи задоволені вони ним. Якщо обидві відповіді — так, можливо, не варто переконувати їх, що ваш інструмент зробить роботу краще. Однак ви все ще можете створити демо-сайт або показати їм доступні проєкти, створені за допомогою генераторів статичних сайтів Docusaurus або MkDocs Material.</p>\n<h2>Docusaurus і MkDocs Material</h2>\n<p>Ви, напевно, чули про <a href=\"https://docusaurus.io/\">Docusaurus</a> та <a href=\"https://squidfunk.github.io/mkdocs-material/\">MkDocs Material</a>? Це генератори статичних сайтів (SSG), які створюють статичний сайт з документацією. Ці SSG використовують підхід <a href=\"../docs-as-code\">docs-as-code</a>, Markdown та git. Вони спеціально розроблені для технічних письменників або розробників, які хочуть швидко та без зусиль створити гарний сайт із документацією. Я написав <a href=\"../docs-as-code/#генератор-статичних-сайтів-docusaurus\">повне керівництво</a> про те, як почати працювати з Docusaurus кілька років тому. Оскільки цей інструмент розвивається, деякі речі могли змінитися. Саме тому я знову покроково розгляну, як розгорнути сайт з документацією Docusaurus.</p>\n<p><a href=\"https://squidfunk.github.io/mkdocs-material/\">MkDocs Material</a> давно є в моєму списку найкращих SSG для створення сайтів із документацією. Тема Material для MkDocs розроблена для спеціально для документації. Вона має багато функцій, вам краще ознайомитися з їхньою документацією.</p>\n<h2>Docusaurus</h2>\n<p>{{% pageinfo %}}\nМета полягає в тому, щоб побудувати й розгорнути тестовий сайт Docusaurus. Потім ви зможете повторити ці кроки, щоб створити свій власний сайт із документацією та запустити його як публічно доступний сайт за допомогою сервісу GitHub Pages.\n{{% /pageinfo %}}</p>\n<h3>Попередні вимоги</h3>\n<p>Вам потрібно встановити наступні елементи на свій комп'ютер.</p>\n<h4>Node.js</h4>\n<p>Ви можете перевірити, чи вже встановлено Node.js, набравши <code>node -v</code> в терміналі або командному рядку. Потрібна версія 18 або новіша.</p>\n<p><img src=\"../img/command-prompt-node.png\" alt=\"Command Prompt with Node.js version\" width=\"500\"/></p>\n<p>Якщо у вас старіша версія, видаліть її за допомогою <strong>Додати або видалити програми</strong> в Windows. Потім встановіть найновішу версію з <a href=\"https://nodejs.org/en/download/current\">цього сайту</a>.</p>\n<h4>Установка пакету Docusaurus</h4>\n<p>Використовуйте команду Node.js, щоб установити Docusaurus:</p>\n<ol>\n<li>\n<p>Уведіть <code>npm init docusaurus</code>.</p>\n</li>\n<li>\n<p>Уведіть <code>y</code> після підказки та натисніть Enter.</p>\n<p><img src=\"../img/npm-init-docusaurus.png\" alt=\"NPM Init Docusaurus\" width=\"500\"/></p>\n</li>\n<li>\n<p>Уведіть назву вашого сайту (проєкту), коли вас про це попросять, і натисніть Enter.</p>\n<p><img src=\"../img/project-name.png\" alt=\"Project name\" width=\"500\"/></p>\n</li>\n<li>\n<p>Виберіть рекомендований шаблон <code>classic</code>, натиснувши Enter.</p>\n<p><img src=\"../img/classic-template.png\" alt=\"Classic template\" width=\"500\"/></p>\n</li>\n<li>\n<p>Виберіть JavaScript за допомогою стрілок на клавіатурі та натисніть Enter.</p>\n<p><img src=\"../img/javascript.png\" alt=\"JavaScript\" width=\"500\"/></p>\n</li>\n<li>\n<p>Уведіть <code>cd test-docusaurus-docs</code>, щоб перейти до папки зі встановленим Docusaurus.</p>\n</li>\n<li>\n<p>Уведіть <code>npm start</code>, щоб запустити сервер із миттєвим перезавантаженням для відкриття сайту з документацією у вашому браузері на локальному хості.</p>\n<p><img src=\"../img/npm-start.png\" alt=\"NPM start\" width=\"500\"/></p>\n</li>\n</ol>\n<p>Ваш сайт відкривається в браузері за цією адресою: <a href=\"http://localhost:3000/\">http://localhost:3000/</a></p>\n<p><img alt=\"Docusaurus default site\" src=\"../img/docusaurus-default.png\" /></p>\n<p>Переклад на українську мову, зберігаючи форматування в markdown, включаючи зображення:</p>\n<h3>Публікація сайту Docusaurus на GitHub Pages</h3>\n<p>Тепер, коли ви згенерували свій сайт локально, ви можете почати редагувати його вміст у Markdown і налаштувати тему сайту: CSS, логотип, назву, бокове меню тощо. Я не збираюся показувати всі ці кроки, оскільки я описав їх <a href=\"../docs-as-code/#налаштування-зовнішнього-вигляду-сайта\">тут</a>. Замість цього я надам інструкції щодо публікації вашого сайту на GitHub Pages, щоб він був доступний для всіх в інтернеті.</p>\n<p>Щоб створити репозиторій у GitHub для вашого проєкту:</p>\n<ol>\n<li>\n<p>Використовуйте VS Code, щоб відкрити ваш проект Docusaurus: <strong>File &gt; Open Folder...</strong> та виберіть назву вашого проекту, яку ви ввели при встановленні Docusaurus. У моєму випадку це <code>test-docusaurus-docs</code>.</p>\n</li>\n<li>\n<p>Виберіть вкладку <strong>Source Control</strong> у лівій бічній панелі VS Code.</p>\n<p><img alt=\"Панель керування джерелами\" src=\"../img/source-control-panel.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Initialize Repository</strong>.</p>\n</li>\n<li>\n<p>Виберіть <strong>Commit</strong>.</p>\n<p><img alt=\"Commit\" src=\"../img/commit.png\" /></p>\n</li>\n<li>\n<p>Уведіть повідомлення про зміни. Наприклад: перший коміт. Натисніть Enter.</p>\n</li>\n<li>\n<p>Виберіть <strong>Publish Branch</strong>.</p>\n</li>\n<li>\n<p>Виберіть <strong>Publish to GitHub public repository</strong>.</p>\n<p><img alt=\"Commit\" src=\"../img/publish_public.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Open on GitHub</strong>, щоб відкрити проект у веб-версії GitHub.</p>\n<p><img alt=\"Відкрити проект на GitHub\" src=\"../img/open-on-github.png\" /></p>\n</li>\n</ol>\n<p>Щоб опублікувати ваш сайт на GitHub Pages:</p>\n<ol>\n<li>\n<p>У VS Code перейдіть до вкладки Explorer та виберіть файл <code>docusaurus.config.js</code>, який містить конфігурацію вашого сайту Docusaurus. У моєму випадку шлях до нього такий: <code>C:\\Users\\ivanc\\test-docusaurus-docs\\docusaurus.config.js</code>.</p>\n</li>\n<li>\n<p>Змініть значення для наступних параметрів:</p>\n<ul>\n<li><code>organizationName</code> - У моєму випадку це <code>ivancheban</code>, мій обліковий запис GitHub.</li>\n<li><code>projectName</code> - У моєму випадку це <code>test-docusaurus-docs</code>, назва вашого проекту Docusaurus, яку ви вибрали та опублікували на GitHub.</li>\n<li><code>url</code> - У моєму випадку це <code>https://ivancheban.github.io</code>.</li>\n<li><code>baseUrl</code> - У моєму випадку це <code>/test-docusaurus-docs/</code>.</li>\n</ul>\n</li>\n<li>\n<p>У кореневій папці вашого проекту Docusaurus створіть файл <code>deploy.yml</code> за цим шляхом: <code>.github/workflows/deploy.yml</code>. Це означає, що спочатку ви створюєте папку <code>.github</code>, потім у ній папку <code>workflows</code>, і лише потім файл <code>deploy.yml</code>. Вставте наступний код усередину файлу <code>deploy.yml</code>.</p>\n</li>\n</ol>\n<p>```yml\nname: Deploy to GitHub Pages</p>\n<p>on:\n  push:\n    branches:\n      - main\n    # Review gh actions docs if you want to further define triggers, paths, etc\n    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on</p>\n<p>jobs:\n  build:\n    name: Build Docusaurus\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 18\n          cache: npm</p>\n<pre><code>  - name: Install dependencies\n    run: npm ci\n  - name: Build website\n    run: npm run build\n\n  - name: Upload Build Artifact\n    uses: actions/upload-pages-artifact@v3\n    with:\n      path: build\n</code></pre>\n<p>deploy:\n    name: Deploy to GitHub Pages\n    needs: build</p>\n<pre><code># Grant GITHUB_TOKEN the permissions required to make a Pages deployment\npermissions:\n  pages: write # to deploy to Pages\n  id-token: write # to verify the deployment originates from an appropriate source\n\n# Deploy to the github-pages environment\nenvironment:\n  name: github-pages\n  url: ${{ steps.deployment.outputs.page_url }}\n\nruns-on: ubuntu-latest\nsteps:\n  - name: Deploy to GitHub Pages\n    id: deployment\n    uses: actions/deploy-pages@v4\n</code></pre>\n<p>```</p>\n<p>Продовжуйте публікацію вашого сайту на GitHub Pages:</p>\n<ol>\n<li>\n<p>Зробіть коміт і надішліть свої зміни:</p>\n<ul>\n<li><code>Ctrl + Shift + P</code>.</li>\n<li>Виберіть <code>Git: Commit All</code>.</li>\n<li>Додайте повідомлення про коміт.</li>\n<li><code>Ctrl + Shift + P</code>.</li>\n<li>Виберіть <code>Git: Push</code>.</li>\n</ul>\n</li>\n<li>\n<p>Створіть гілку <code>gh-pages</code> у вашому проекті Docusaurus. Хоча ви робите коміт і надсилаєте зміни в гілку <code>main</code>, гілка <code>gh-pages</code> буде використовуватися для публікації вашого сайту на GitHub Pages.</p>\n</li>\n<li>\n<p>Перейдіть до <strong>Settings</strong> на сторінці вашого проєкту на GitHub.</p>\n<p><img alt=\"Settings in GitHub\" src=\"../img/settings-github.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Pages</strong> та виберіть гілку <code>gh-pages</code>. Збережіть зміни.</p>\n<p><img alt=\"GitHub Pages\" src=\"../img/gh-pages.png\" /></p>\n</li>\n<li>\n<p>Перейдіть до <strong>Settings &gt; Environments</strong> та видаліть <code>gh-pages</code> з обмеження.</p>\n<p><img alt=\"GitHub Pages\" src=\"../img/gh-pages-remove-limitation.png\" /></p>\n</li>\n<li>\n<p>Змініть щось у своїх локальних файлах, зробіть коміт і надішліть зміни. Коміт до основної гілки починає публікацію сайту. Зачекайте, поки пайплайн завершить генерацію та публікацію вашого сайту. Перевірте згенерований і опублікований сайт. У моєму випадку це: <a href=\"https://ivancheban.github.io/test-docusaurus-docs/\">https://ivancheban.github.io/test-docusaurus-docs/</a>.</p>\n</li>\n</ol>\n<h2>MkDocs Material</h2>\n<p>{{% pageinfo %}}\nМета — згенерувати та опублікувати тестовий сайт MkDocs Material. Потім ви зможете повторити ці кроки, щоб зробити свій власний сайт із документацією та опублікувати його в інтернеті за допомогою сервісу GitHub Pages.\n{{% /pageinfo %}}</p>\n<h3>Попередні вимоги</h3>\n<p>Вам потрібно мати Python з pip для MkDocs. Потім ви можете встановити пакети MkDocs та MkDocs Material за допомогою pip.</p>\n<ol>\n<li>\n<p><strong>Переконайтеся, що Python встановлено</strong>: Ви можете перевірити, чи встановлено Python у вашій системі, відкривши командний рядок та ввівши <code>python --version</code>. Якщо Python встановлено, ви побачите щось на зразок <code>Python 3.11.3</code>. Якщо у вас не встановлено Python, установіть його з їхнього <a href=\"https://www.python.org/downloads/windows/\">офіційного веб-сайту</a>.</p>\n</li>\n<li>\n<p><strong>Переконайтеся, що pip встановлено</strong>: Ви можете перевірити, чи встановлено pip, ввівши <code>pip --version</code> в командному рядку. Якщо pip встановлено, він відобразить версію.</p>\n</li>\n<li>\n<p><strong>Установіть MkDocs</strong>: Уведіть <code>pip install mkdocs</code> в командному рядку. Переконайтеся, що MkDocs встановлено, ввівши <code>mkdocs --version</code>.</p>\n</li>\n<li>\n<p><strong>Установіть MkDocs Material</strong>: Уведіть <code>pip install mkdocs-material</code> в командному рядку. Щоб перевірити, чи встановлено MkDocs Material, уведіть <code>mkdocs serve --help</code>. Ця команда повинна вказати material як опцію в розділі <code>--theme</code>. Якщо material є в переліку, це означає, що MkDocs Material встановлено правильно.</p>\n<p><img src=\"../img/material-theme.png\" alt=\"Material theme\" width=\"500\"/></p>\n</li>\n</ol>\n<p>Для отримання додаткової інформації дивіться <a href=\"https://www.mkdocs.org/user-guide/installation/\">Встановлення MkDocs</a> та <a href=\"https://squidfunk.github.io/mkdocs-material/getting-started/#with-pip\">Встановлення MkDocs Material</a>.</p>\n<h3>Встановлення сайту MkDocs</h3>\n<p>Ви можете продовжити створення абсолютно нового сайту MkDocs Material, використовуючи <a href=\"https://squidfunk.github.io/mkdocs-material/creating-your-site/\">ці інструкції</a>. Або ви можете скопіювати мій репозиторій з готовою конфігурацією:</p>\n<ol>\n<li>\n<p>Скопіюйте (fork) або завантажте архівований проект звідси: <a href=\"https://github.com/ivancheban/my-project\">https://github.com/ivancheban/my-project</a>.</p>\n</li>\n<li>\n<p>Відкрийте файл <code>mkdocs.yml</code>, щоб відредагувати конфігурацію вашого сайту.</p>\n</li>\n</ol>\n<p>```yml\nsite_name: Docs site\nsite_url: https://ivancheban.github.io/my-project/\nnav:\n    - Introduction: 'index.md'\n    - User Guide:\n        - 'Test': 'test-folder/test.md'\n        - 'Test 1': 'test-folder/test1.md'\n        - 'Test 2': 'test-folder/test2.md'\n    - About:\n        - 'About this site': 'about.md'\ntheme:\n  features:\n    - navigation.footer\n  name: material\n  custom_dir: overrides\n  logo: img/logo.svg\n  favicon: img/favicon.ico\n  palette: \n    scheme: default\n    accent: light blue</p>\n<p>extra_css:\n  - stylesheets/extra.css</p>\n<p>plugins:\n  - search\n  - mike</p>\n<p>extra:\n  version:\n    provider: mike\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/ivancheban\n    - icon: fontawesome/brands/linkedin\n      link: https://linkedin.com/in/ivan-cheban-a24b576\n  generator: false</p>\n<p>markdown_extensions:\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n  - admonition\n  - pymdownx.details\n  - pymdownx.tabbed:\n      alternate_style: true\ncopyright: Copyright &copy; 2023 Ivan Cheban\n```</p>\n<p>Щоб запустити сайт на вашому локальному хості, введіть: <code>mkdocs serve</code>. Це запускає сайт у вашому браузері за цією адресою: <a href=\"http://127.0.0.1:8000/my-project/\">http://127.0.0.1:8000/my-project/</a>.</p>\n<p><img alt=\"MkDocs local site\" src=\"../img/mkdocs-local-site.png\" /></p>\n<h2>Розгортання MkDocs Material на GitHub Pages</h2>\n<p>Тепер, коли ви перевірили, що ваш сайт MkDocs Material працює локально, настав час розмістити його на GitHub як публічний сайт.</p>\n<ol>\n<li>\n<p>Використовуйте <a href=\"#публікація-сайту-docusaurus-на-github-pages\">кроки 1–8 із публікаціх сайту Docusaurus на GitHub Pages</a> для фіксації змін і надсилання вашого проєкту MkDocs до репозиторію GitHub.</p>\n</li>\n<li>\n<p>Створіть гілку <code>gh-pages</code> у репозиторії.</p>\n</li>\n<li>\n<p>У веб-інтерфейсі репозиторію перейдіть до <strong>Settings &gt; Pages</strong> і оберіть <code>gh-pages</code> як гілку для публікації вашого сайту. Збережіть зміни.</p>\n</li>\n<li>\n<p>У кореневому каталозі вашого проєкту MkDocs створіть новий файл робочого процесу GitHub Actions: <code>.github/workflows/ci.yml</code> та скопіюйте і вставте в нього наступний код:</p>\n</li>\n</ol>\n<p><code>yml\nname: ci \non:\n  push:\n    branches:\n      - master \n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n      - uses: actions/cache@v3\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material \n      - run: mkdocs gh-deploy --force</code></p>\n<p>Зробіть коміт і передайте ваші зміни: commit and push.</p>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/static-site-generators/docs-as-code-tools-for-technical-writer/"
  },
  {
    "title": "Підхід docs-as-code для створення документації на прикладі генератора статичних сайтів Docusaurus",
    "content": "<p>{{% pageinfo %}}\nСтаття адресована насамперед техрайтерам, але буде корисною також для команд розробників, які шукають спосіб створення внутрішнього або зовнішнього сайта з документацією для програмного продукту.\n{{% /pageinfo %}}</p>\n<p>У цій статті ви дізнаєтесь:</p>\n<ul>\n<li>\n<p>Що таке підхід docs-as-code</p>\n</li>\n<li>\n<p>Як швидко створити сайт із документацією за допомогою генератора статичних сайтів Docusaurus</p>\n</li>\n<li>\n<p>Як налаштувати зовнішній вигляд сайта з документацією</p>\n</li>\n<li>\n<p>Як створювати та редагувати статті документації на сайті</p>\n</li>\n<li>\n<p>Як безкоштовно опублікувати сайт із документацією в інтернеті</p>\n</li>\n<li>\n<p>Як налаштувати CI/CD пайплайн для автоматизації публікації змін на сайті</p>\n</li>\n</ul>\n<hr />\n<h2>Docs-as-code</h2>\n<p>Підхід до створення документації <em>docs-as-code</em> (документація як код) набуває все більшого поширення серед техрайтерів та інших спеціалістів, які пишуть документацію для програмних продуктів. Спочатку розберемося, що означає це поняття.</p>\n<p>Досвідчений техрайтер Google Том Джонсон у своєму блозі <a href=\"https://idratherbewriting.com/learnapidoc/pubapis_docs_as_code.html\">зазначає</a>: «Ставитись до документації як коду — означає використовувати ті самі системи, процеси та послідовність виконуваних дій з документацією, які ви використовуєте з програмним кодом». Він наводить такі ознаки підходу <em>docs-as-code</em>:</p>\n<ul>\n<li>\n<p><strong>Робота з файлами у форматі «легкої» (lightweight) або «читабельної» (plain) розмітки.</strong> Це насамперед Markdown (.md) — найбільш поширений формат вихідного коду документації для docs-as-code. Маркдаун — дійсно простий і читабельний формат розмітки. Наприклад, виділення жирним шрифтом робиться за допомогою двох зірочок ** на початку та в кінці слова або фрази, які потрібно виділити жирним. Таким чином файли у форматі Маркдаун можна прочитати у вихідному коді документації навіть до конвертації в HTML. Для цього не потрібний WYSIWYG редактор, що конвертує складний для прочитання код XML, як це робить Word або MadCap Flare.</p>\n</li>\n<li>\n<p><strong>Використання open-source (безкоштовного) генератора статичних сайтів.</strong> На сьогодні існують десятки безкоштовних генераторів статичних сайтів з відкритим кодом. Це означає, що їхній код можна завантажити собі на комп’ютер із відкритого репозиторія в GitHub, побудувати сайт локально, щоб автоматично отримати HTML-сторінки з додаванням CSS-стилів для кольорової теми, JS-елементів тощо. Ці сторінки можна завантажити на вебсервер, щоб зібраний сайт був доступний в інтернеті. Серед найбільш відомих генераторів статичних сайтів такі: Jekyll, Hugo, Gatsby, Next.js тощо. Перелік досить довгий. Більше можна знайти на сайті <a href=\"https://jamstack.org/generators/\">Jamstack</a>. Генератори можна використовувати не тільки для створення сайтів із документацією, але насамперед для блогів, лендингів тощо.</p>\n</li>\n<li>\n<p><strong>Робота з файлами за допомогою текстового редактора.</strong> Техрайтери, які працюють за принципом <em>docs-as-code</em>, використовують редактори коду (IDE), якими користуються й розробники. Це може бути Visual Studio Code, WebStorm, PyCharm та інші редактори коду. У цих редакторах можна працювати з файлами у форматі Маркдаун і одночасно мати попередній перегляд кінцевого результату в HTML. Крім того, можна користуватися багатьма розширеннями, що спрощують роботу з гітом: перевірка правопису тощо.</p>\n</li>\n<li>\n<p><strong>Зберігання документації в репозиторії системи контролю версій.</strong> Як і розробники, техрайтери комітять (<em>commit</em> — фіксація змін) зміни до коду документації локально та пушать (<em>push</em> — передача змін на сервер) ці зміни в гіт сервер у GitHub, GitLab, Bitbucket або іншу систему контролю версій (VCS). Крім відомих переваг системи контролю версій, як-от відстежування змін за допомогою діффів (<em>diff</em> або <em>difference</em> — візуальне виділення різниці між поточною і попередньою версіями файла), репозиторій гіт може використовуватись у CI/CD пайплайні для збирання та публікації сайта.</p>\n</li>\n<li>\n<p><strong>Спільна робота над документацією в репозиторії гіта команди техрайтерів.</strong> Як і розробники, команда техрайтерів спільно працює над проєктом сайта з документацією: роблять <em>master</em> і <em>develop</em> гілки, виводять фіча бранчі (<em>feature branch</em> — гілка для роботи над окремою функціональністю, що у випадку документації може бути окрема стаття на сайті з документацією), створюють мердж ріквести (<em>merge request</em> — запит на об’єднання змін із фіча гілки в develop після закінчення написання статті) і код рев’ю лідом.</p>\n</li>\n<li>\n<p><strong>Автоматизація процесу побудови та публікації сайта з документацію за допомогою пайплайна CI/CD.</strong> Зазвичай процес автоматичного будування сайта з документацією та публікації (<em>deploy</em>) на вебсервер налаштовуються спеціалістами devops або system engineers. Такі спеціалісти створюють скрипт із усіма кроками й командами генерації статичного сайта: після пуша змін у master гілку автоматично запускається скрипт, що виконує команди будування сайта на сервері та деплоїть згенеровані HTML-сторінки разом з усіма стилями CSS й елементами JS у вигляді статичного сайта з документацією.</p>\n</li>\n<li>\n<p><strong>Запуск тестів документації.</strong> Як і розробники, техрайтери тестують документацію на відповідність певним вимогам: відсутність неробочих посилань, лінтер Vale з правилами перевірки на відповідність вимогам стайлгайдів Майкрософт, Гугл і власних стайлгайдів. Про це я писав у <a href=\"../../vale/vale-styleguides/\">попередній статті</a>.</p>\n</li>\n<li>\n<p><strong>Управління процесами створення та оновлення документації за методологіями Scrum, Agile, Kanban.</strong> Як і розробники, техрайтери працюють за спринтами (<em>sprint</em> — період, що зазвичай триває один місяць, за який розробники поставляють частину розробленої функціональності для демонстрації замовнику виконаної роботи). Техрайтери використовують Jira або інший трекер задач і проводять відповідні Scrum-церемонії (<em>daily standup, Sprint Planning, Retro</em> тощо). Часто техрайтери лінкують у джирі свої задачі з документування фіч до задач розробників.</p>\n</li>\n</ul>\n<p>Отже, ми з’ясували, що процес розробки сайта з документацією загалом схожий на процес розробки коду. Далі спробуємо на практиці встановити потрібні інструменти <em>docs-as-code</em>, згенерувати сайт з документацією та опублікувати його в інтернеті.</p>\n<h2>Генератор статичних сайтів Docusaurus</h2>\n<p>Чому я обрав <a href=\"https://docusaurus.io/docs\">Docusaurus</a> як генератор статичних сайтів (<em>SSG — static site generator</em>) для сайта з документацією? Хоча мій улюблений генератор сайтів — це Hugo, який я використовую для свого власного пет проєкта (цей сайт), налаштування такого сайта хоч і добре описане в документації, але забирає багато часу. Натомість підняти сайт на Docusaurus можна дуже швидко — буквально за лічені хвилини ви зможете мати локальний сайт з документацією та почати писати туди в Маркдаун файлах. Звісно, щоб налаштувати CI/CD пайплайн і кастомізувати CSS для власних кольорових схем, шрифти, картинки тощо, а потім опублікувати сайт в інтернеті знадобиться трохи більше часу. Але не набагато більше.</p>\n<p>Щоб установити й запустити Docusaurus:</p>\n<ol>\n<li>\n<p>Переконайтесь, що на комп’ютері встановлено Node.js. У командному рядку введіть: <code>node -v</code></p>\n<p>{{&lt; alert title=\"Примітка\" &gt;}}Після всіх команд тут і далі потрібно натискати Enter.{{&lt; /alert &gt;}}</p>\n</li>\n<li>\n<p>Установіть <a href=\"https://nodejs.org/en/download/\">Node.js</a>, якщо версія не відображається.</p>\n</li>\n<li>\n<p>Перезавантажте комп’ютер.</p>\n</li>\n<li>\n<p>Створіть папку, де хочете розгорнути проєкт сайта з документацією. Наприклад, у командному рядку введіть: <code>md my-docusaurus-projects</code>, щоб створити папку та <code>cd my-docusaurus-projects</code>, щоб перейти до створеної папки.</p>\n</li>\n<li>\n<p>Створіть сайт із документацією за допомогою останньої версії генератора Docusaurus із назвою проєкта <code>my-site</code>:</p>\n<p><code>sh\nnpx create-docusaurus@latest my-site classic</code></p>\n<p>{{&lt; alert title=\"Примітка\" &gt;}}<code>classic</code> — це попередньо встановлена тема сайта.{{&lt; /alert &gt;}}</p>\n</li>\n<li>\n<p>Введіть <code>yes</code>, коли з’явиться повідомлення про продовження встановлення.</p>\n<p>Зачекайте, поки система встановить усі залежності npm.</p>\n</li>\n<li>\n<p>Після закінчення встановлення перейдіть до папки новоствореного проєкта сайта: <code>cd my-site</code></p>\n</li>\n<li>\n<p>Запустіть сайт на локальному сервері:</p>\n<p><code>sh\nnpm start</code></p>\n<p>Сайт із документацією відкриється в браузері за адресою: <a href=\"http://localhost:3000/\">http://localhost:3000/</a>.</p>\n<p><img alt=\"img\" src=\"/docs/img/docusaurus-site.webp\" /></p>\n</li>\n</ol>\n<h2>Налаштування зовнішнього вигляду сайта</h2>\n<p>Отже, ми запустили сайт локально в браузері. Папка проєкта сайта з усіма необхідними файлами знаходиться в моєму випадку за шляхом <code>c:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site</code>. Зараз ми змінимо:</p>\n<ul>\n<li>\n<p>Назву сайта</p>\n</li>\n<li>\n<p>Зображення логотипу</p>\n</li>\n<li>\n<p>Кольорову схему теми</p>\n</li>\n<li>\n<p>Текст на домашній сторінці</p>\n</li>\n</ul>\n<p>Прочитати про всі налаштування сайта, створеного за допомогою Docusaurus, можна в офіційній документації: <a href=\"https://docusaurus.io/docs\">https://docusaurus.io/docs</a>.</p>\n<p>Щоб змінити назву сайта:</p>\n<ol>\n<li>\n<p>Відкрийте папку проєкта в редакторі коду VS Code.</p>\n</li>\n<li>\n<p>Виберіть файл <code>docusaurus.config.js</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/docusaurus-config.webp\" /></p>\n</li>\n<li>\n<p>Змініть назву сайта <code>title: 'My Site'</code> на свою. Наприклад: <code>Documentation site</code>.</p>\n<p>{{&lt; alert title=\"Примітка\" &gt;}}Усі зміни відразу відображаються в браузері, тому що ми запустили сайт на локальному сервері в режимі live reload.{{&lt; /alert &gt;}}</p>\n</li>\n<li>\n<p>У цьому ж файлі нижче змініть назву сайта <code>title: 'My Site'</code> в навігаційному меню.</p>\n<p><img alt=\"img\" src=\"/docs/img/navbar.webp\" /></p>\n</li>\n</ol>\n<p>Щоб змінити зображення логотипу (динозаврик):</p>\n<ol>\n<li>\n<p>Скопіюйте своє зображення логотипу до папки <code>c:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site\\static\\img\\</code>.</p>\n</li>\n<li>\n<p>Замініть зображення <code>logo.svg</code> на своє зображення з таким же іменем і розширенням файла. Наприклад, я завантажив логотип звідси: <a href=\"https://www.svgrepo.com/download/205072/documents-document.svg\">https://www.svgrepo.com/download/205072/documents-document.svg</a>.</p>\n</li>\n<li>\n<p>Перезавантажте сторінку сайта з документацією в браузері, щоб побачити новий логотип.</p>\n</li>\n</ol>\n<p>Щоб змінити кольорову схему теми:</p>\n<ol>\n<li>\n<p>У VS Code виберіть файл <code>c:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site\\src\\css\\main.css</code>.</p>\n</li>\n<li>\n<p>Змініть код кольору hex для параметра <code>--ifm-color-primary</code> з <code>#25c2a0</code> на <code>#90a3b0</code> або інший колір на ваш смак.</p>\n<p>{{&lt; alert title=\"Примітка\" &gt;}}Зміни застосовуються не тільки для домашньої сторінки, а й для кольорової схеми на інших сторінках сайта (бокове меню, верхнє меню навігації, колір посилань тощо).{{&lt; /alert &gt;}}</p>\n</li>\n</ol>\n<p>Щоб змінити текст на домашній сторінці сайта:</p>\n<ol>\n<li>\n<p>Змініть підзаголовок сайта <code>tagline</code> у файлі <code>docusaurus.config.js</code> з <code>Dinosaurs are cool</code> на <code>How to create your documentation site with Docusaurus</code>.</p>\n</li>\n<li>\n<p>Змініть назви та посилання, копірайт тощо в нижній частині сайта <code>footer</code>.</p>\n</li>\n<li>\n<p>Якщо вам не потрібний блог на сайті з документацією, закоментуйте (<code>//</code>) рядок, щоб не відображати його в меню навігації.</p>\n<p><img alt=\"img\" src=\"/docs/img/comment-out.webp\" /></p>\n</li>\n<li>\n<p>Змініть назву розділу сайта з документацією <code>label</code> з <code>Tutorial</code> на <code>Docs</code>.</p>\n</li>\n<li>\n<p>У VS Code виберіть файл <code>my-site\\src\\components\\HomepageFeatures.js</code> і змініть текст і зображення можливостей на домашній сторінці.</p>\n<p><img alt=\"img\" src=\"/docs/img/homepage-features.webp\" /></p>\n</li>\n<li>\n<p>У VS Code виберіть файл <code>my-site\\src\\pages\\index.js</code>, щоб змінити надпис на кнопці з <code>Docusaurus Tutorial - 5min</code> на <code>Start here</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/action-button.webp\" /></p>\n<p>Після всіх цих змін домашня сторінка буде виглядати так.</p>\n<p><img alt=\"img\" src=\"/docs/img/start-page.webp\" /></p>\n</li>\n</ol>\n<h2>Створення та редагування статей документації</h2>\n<p>Після кастомізації домашньої сторінки сайта з документацією можна починати писати власне документацію. Щоб перейти до власне документації, натисніть кнопку Start here на домашній сторінці.</p>\n<p>Так виглядає зразок документації в шаблоні Docusaurus.</p>\n<p><img alt=\"img\" src=\"/docs/img/default-intro.webp\" /></p>\n<h3>Розташування статей документації</h3>\n<p>Уся документація в Docusaurus міститься у вигляді файлів Маркдаун у папці <code>c:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site\\docs\\</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/docs-folder.webp\" /></p>\n<h3>Ієрархія статей у розділі документації</h3>\n<p>Перша стаття <strong>Tutorial Intro</strong> — це файл <code>intro.md</code>. Його розташування в сайдбарі (<em>sidebar</em> — бокове меню) визначається параметром <code>sidebar_position: 1</code>. Назва береться з першого заголовка в тексті Маркдаун файла.</p>\n<p>Щоб змінити ієрархічне розташування статті в сайдбарі, змініть значення параметра <code>sidebar_position</code>. Наприклад, щоб перемістити цю статтю в кінець: <code>sidebar_position: 4</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/sidebar-position.webp\" /></p>\n<p>Щоб відкривати іншу статтю після переходу з домашньої сторінки, змініть шлях до потрібної статті у файлі <code>my-site\\src\\pages\\index.js</code>.</p>\n<p>Наприклад, будемо першою показувати статтю <strong>Create a Page</strong> файла <code>c:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site\\docs\\tutorial-basics\\create-a-page.md</code>. Для цього змініть значення параметра <code>to</code> з <code>/docs/intro</code> на <code>/docs/tutorial-basics/create-a-page</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/first-page.webp\" /></p>\n<h3>Підрозділи в розділі документації</h3>\n<p>У нашому тестовому сайті з документацією є два підрозділи: Tutorial – Basics та Tutorial – Extras. Ці підрозділи містять інші статті, які можна побачити, натиснувши на відповідний підрозділ у сайдбарі. Цим підрозділам відповідають папки <strong>tutorial-basics</strong> і <strong>tutorial-extras</strong> у папці <code>c:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site\\docs\\</code>.</p>\n<p>Щоб додати новий підрозділ зі статтями, скопіюйте одну з цих папок і вставте її в папку <strong>docs</strong> із новою назвою, наприклад <strong>my-docs</strong>.</p>\n<p>{{&lt; alert title=\"Примітка\" &gt;}}Дотримуйтесь правил неймінгу папок і файлів: усі маленькі літери, дефіси замість пробілів.{{&lt; /alert &gt;}}</p>\n<p>Далі перейменуйте Маркдаун файли в папці <strong>my-docs</strong>.</p>\n<h3>Ієрархія підрозділів документації</h3>\n<p>Щоб визначити порядок розташування підрозділів зі статтями документації, змініть значення параметра position у файлі <code>C:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site\\docs\\tutorial-basics\\_category_.json</code>. Наприклад, змінимо порядок підрозділів <code>tutorial-basics</code> і <code>tutorial-extras</code>. Для цього змінимо 3 на 2 для <code>tutorial-basics</code> і 2 на 3 для <code>tutorial-extras</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/category-json.webp\" /></p>\n<p>Порядок розташування цих підрозділів зміниться в сайдбарі.</p>\n<p><img alt=\"img\" src=\"/docs/img/changed-sections.webp\" /></p>\n<p>Ієрархія статей у межах підрозділу змінюється за допомогою параметра <code>sidebar_postion</code>, як було описано в підрозділі <a href=\"./#ієрархія-статей-у-розділі-документації\">Ієрархія статей в розділі документації</a>.</p>\n<h2>Публікація сайта з документацією</h2>\n<p>Отже, ми зробили локальний сайт із документацією та можемо переглядати його в браузері. Настав час опублікувати його в інтернеті, щоб він був доступний для перегляду за посиланням. Для цього нам знадобиться:</p>\n<ul>\n<li>\n<p>Акаунт у <a href=\"https://github.com/\">GitHub</a>, куди ми завантажимо вихідний код проєкта з документацією.</p>\n</li>\n<li>\n<p>Акаунт у <a href=\"https://app.netlify.com/\">Netlify</a>, де ми будемо хостити наш згенерований сайт.</p>\n</li>\n</ul>\n<p>{{&lt; alert title=\"Примітка\" &gt;}}Спочатку зареєструйтеся в GitHub, щоб можна було увійти в Netlify за допомогою акаунта GitHub.{{&lt; /alert &gt;}}</p>\n<p>Крім того, потрібно завантажити та встановити гіт локально на комп’ютері: <a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a>.</p>\n<p>Щоб перевірити, чи встановлено у вас гіт локально, у командному рядку введіть:</p>\n<p><code>sh\ngit version</code></p>\n<h3>Завантаження в GitHub</h3>\n<p>Спочатку прив’яжіть локальну папку з проєктом документації до репозиторія в GitHub.</p>\n<ol>\n<li>\n<p>Відкрийте папку проєкта з документацію у VS Code. У моєму випадку це: <code>c:\\Users\\Ivan_Cheban\\my-docusaurus-projects\\my-site\\</code></p>\n</li>\n<li>\n<p>Перейдіть на вкладку Source Control у боковому меню VS Code.</p>\n</li>\n<li>\n<p>Виберіть <strong>Publish to GitHub</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/publish-github.webp\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Publish to GitHub public repository</strong>.</p>\n</li>\n<li>\n<p>Дочекайтесь, коли ваш проєкт буде опубліковано та виберіть <strong>Open on GitHub</strong>, щоб перейти до створеного репозиторія в GitHub.</p>\n<p><img alt=\"img\" src=\"/docs/img/github-my-site.webp\" /></p>\n</li>\n</ol>\n<p>Тепер ваш локальний проєкт синхронізовано з репозиторієм у GitHub. На жаль, усі зміни, які ви вносите локально, потрібно синхронізувати з репозиторієм у гіті вручну.</p>\n<p>Після того, як ви внесете всі потрібні зміни:</p>\n<ol>\n<li>\n<p>У VS Code натисніть <kbd>Ctrl+Shift+P</kbd>.</p>\n</li>\n<li>\n<p>Введіть або виберіть <strong>Git: Commit All</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/commit-all.webp\" /></p>\n</li>\n<li>\n<p>Введіть повідомлення, що ви змінили.</p>\n</li>\n<li>\n<p>Натисніть <kbd>Ctrl+Shift+P</kbd>.</p>\n</li>\n<li>\n<p>Введіть або виберіть <strong>Git: Push</strong>.</p>\n<p>Ваші зміни передано на сервер GitHub.</p>\n</li>\n</ol>\n<h3>Публікація сайта за допомогою Netlify</h3>\n<p>Тепер ми можемо опублікувати наш сайт із документацією через сервіс Netlify. Це безкоштовно, якщо доменне ім’я сайта буде містити netlify.app.</p>\n<ol>\n<li>\n<p>Перейдіть до https://app.netlify.com/</p>\n</li>\n<li>\n<p>Увійдіть за допомогою вашого акаунта в GitHub.</p>\n</li>\n<li>\n<p>Виберіть New site from Git.</p>\n<p><img alt=\"img\" src=\"/docs/img/new-site.webp\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>GitHub</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/github.webp\" /></p>\n</li>\n<li>\n<p>Авторизуйте Netlify для доступу до вашого GitHub репозиторія та виберіть репозиторій із вашим сайтом.</p>\n<p><img alt=\"img\" src=\"/docs/img/import-github.webp\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Deploy site</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/deploy-netlify.webp\" /></p>\n</li>\n<li>\n<p>Дочекайтеся завершення публікації сайта (deploy).</p>\n</li>\n<li>\n<p>Оскільки сайт публікується з випадковим ім’ям, як-от <code>inspiring-benz-dc91fd</code>, відразу змініть назву сайта в <strong>Site settings</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/site-settings-netlify.webp\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Change site name</strong> та введіть свою назву.</p>\n<p><img alt=\"img\" src=\"/docs/img/change-site-name-netlify.webp\" /></p>\n<p>Я ввів <code>ivan-documentation-example</code>.</p>\n</li>\n<li>\n<p>Перейдіть за посиланням на опублікований сайт. У моєму випадку це:</p>\n<p>https://ivan-documentation-example.netlify.app/</p>\n</li>\n</ol>\n<h2>CI/CD пайплайн</h2>\n<p>Якщо ви дотримувалися кроків у попередніх розділах, то опублікували свій сайт в інтернеті. Тепер хочу пояснити, як автоматично оновлювати свій сайт із документацією за допомогою пайплайна CI/CD.</p>\n<p>Насправді автоматичний пайплайн уже налаштовано — сервіс Netlify створив хук у ваш репозиторій GitHub і буде відстежувати будь-які зміни. Як тільки ви зробите комміт і пуш змін зі свого локального проєкта до репозиторія в GitHub, Netlify почне процес будування та деплоя сайта. Це не забирає багато часу (1-2 хвилини), оскільки все кешується, і деплоїться тільки дельта — зміни між початковою та поточною версією файлів.</p>\n<p>Спробуйте змінити щось у файлах локально, а потім повторіть кроки для Git: Commit All і Git: Push, описані в розділі <a href=\"./#завантаження-в-github\">Завантаження в GitHub</a>.</p>\n<p>Усі зміни публікуються до гілки master. Якщо ви створите гілку develop або іншу, зміни, які ви запушите в ці гілки, не будуть відображатися на сайті, оскільки гілка master вважається Production. Звісно, усе це налаштовується. Однак пропоную всі процеси налаштування в локальній інфраструктурі залишити спеціалістам, які цим займаються: devops або system engineers. Вони створять скрипти та середовища (environments) для публікації локального інстанса сайта (корисно, щоб переглядати статті до публікації на продакшн). Спеціалісти також розберуться з налаштуванням deployment server (Octopus або інше), місцем хостинга файлів (AWS S3 бакіти або інше).</p>\n<p>Ваша задача — створити демо для сайта з документацію та продемонструвати, як він працює. Далі вже керівництво прийме рішення, чи потрібно й надалі користуватися Confluence або іншою внутрішньою базою знань. А можливо, цей сайт із документацією доопрацюють фронтенд інженери, щоб він виконував функцію головного сайта з документацією для вашого продукту.</p>\n<p>Підхід <em>docs-as-code</em> дає змогу користуватися всіма перевагами інструментів, якими користуються розробники програмного забезпечення. Ви можете налаштувати лінтер Vale, щоб перевіряти текст документації на відповідність вимогам стайл гайдів Майкрософт і Гугл, а також власних стайл гайдів. Про це я писав у статті: <a href=\"../../vale/vale-styleguides/\">Як перевіряти документацію за допомогою автоматичного засобу — лінтера Vale</a>.</p>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/static-site-generators/docs-as-code/"
  },
  {
    "title": "Як опублікувати сайт на Docusaurus у GitLab Pages",
    "content": "<p>{{% pageinfo %}}\nНаша мета — задеплоїти (опублікувати) сайт на Докузаурусі (Docusaurus) у GitLab Pages. Я використовую <a href=\"https://ivan-documentation-example.netlify.app/\">цей приклад сайту на Docusaurus</a> із <a href=\"../docs-as-code#генератор-статичних-сайтів-docusaurus\">цієї статті</a>.\n{{% /pageinfo %}}</p>\n<h2>Попередні вимоги</h2>\n<blockquote>\n<p>Перш ніж розпочати публікацію в GitLab Pages, раджу прочитати більше про <a href=\"https://docs.gitlab.com/ee/user/project/pages/\">цю послугу</a>. Або можна відразу перейти до інструкцій нижче в тексті.</p>\n</blockquote>\n<ul>\n<li>Ви створили сайт на Docusaurus за <a href=\"../docs-as-code#генератор-статичних-сайтів-docusaurus\">цією інструкцією</a></li>\n<li>У вас є свій сайт на Docusaurus, який потрібно опублікувати в GitLab Pages.</li>\n</ul>\n<p>Якщо хоч одна з цих умов виконана, ви готові до публікації сайту на Docusaurus в GitLab Pages.</p>\n<h3>Створення репозиторію в GitLab</h3>\n<blockquote>\n<p>Спочатку потрібно створити окремий репозиторій у GitLab, якщо у вас його ще немає.</p>\n</blockquote>\n<p>Щоб створити репозиторій у GitLab, виконайте такі дії:</p>\n<ol>\n<li>\n<p>Перейдіть за цим посиланням, щоб створити порожній репозиторій:</p>\n<p>https://gitlab.com/projects/new#blank_project</p>\n</li>\n<li>\n<p>Заповніть ці поля:</p>\n</li>\n</ol>\n<p>a. Project name - будь-яка назва вашого проєкту.</p>\n<p>b. Project slug - ім’я цього репозиторію.</p>\n<p>c. Виберіть <strong>Public</strong>.</p>\n<p>d. Зніміть вибір з опції <strong>Initialize repository with a README</strong>.</p>\n<p>e. Виберіть <strong>Create project</strong>.</p>\n<pre><code>![Create a repo](../img/create-project.png)\n</code></pre>\n<p>Порожній репозиторій створено.</p>\n<p><img alt=\"Empty repo\" src=\"../img/created-repo.png\" /></p>\n<h3>Завантажте ваш проєкт Docusaurus на сервер</h3>\n<p>Щоб створити локальний репозиторій Git у папці з вашим проєктом Docusaurus і завантажити його до новоствореного репозиторію, виконайте такі дії:</p>\n<ol>\n<li>\n<p>Склонуйте новостворений репозиторій у командному рядку:</p>\n<p><code>sh\ngit clone https://gitlab.com/ivancheban/your-test-site.git</code></p>\n<p>де <code>your-test-site</code> — це ім’я вашого репозиторію.</p>\n<p><img alt=\"Git clone\" src=\"../img/git-clone.png\" /></p>\n</li>\n<li>\n<p>У командному рядку перейдіть до папки <code>your-test-site</code>.</p>\n<p><code>sh\ncd your-test-site</code></p>\n<p><img alt=\"Go to folder\" src=\"../img/go-to-folder.png\" /></p>\n</li>\n<li>\n<p>Змініть гілку у Git на <code>main</code>.</p>\n<p><code>sh\ngit switch -c main</code></p>\n</li>\n<li>\n<p>Скопіюйте файли з папки вашого існуючого проєкту Docusaurus до папки <code>your-test-site</code> без прихованої папки <code>.git</code>.</p>\n<p><img alt=\"Copy files\" src=\"../img/copy-files.png\" /></p>\n</li>\n<li>\n<p>У командному рядку додайте всі скопійовані файли:</p>\n<p><code>sh\ngit add --all</code></p>\n</li>\n<li>\n<p>Укажіть, які зміни внесли для доданих файлів.</p>\n<p><code>sh\ngit commit -m \"add files\"</code></p>\n</li>\n<li>\n<p>Завантажте змінені файли на сервер.</p>\n<p><code>sh\ngit push -u origin main</code></p>\n</li>\n<li>\n<p>Оновіть сторінку GitLab з вашим репозиторієм у браузері, щоб побачити завантажені файли.</p>\n<p><img alt=\"Repo with upload files\" src=\"../img/repo-uploaded.png\" /></p>\n</li>\n</ol>\n<h3>Створення власної копії проєкту</h3>\n<blockquote>\n<p>Ще один спосіб (набагато простіший) — це створити копію (fork) мого проєкту з GitLab.</p>\n</blockquote>\n<p>Щоб створити копію мого проєкту з GitLab, виконайте такі дії:</p>\n<ol>\n<li>\n<p>Перейдіть до <a href=\"https://gitlab.com/ivancheban/test-site\">https://gitlab.com/ivancheban/test-site</a>.</p>\n</li>\n<li>\n<p>Виберіть <strong>Fork</strong>.</p>\n<p><img alt=\"Fork\" src=\"../img/fork.png\" /></p>\n</li>\n<li>\n<p>Заповніть поля:</p>\n<p>a. The project namespace - виберіть своє ім’я GitLab з розкривного списку.</p>\n<p>b. Project slug - уведіть ім’я репозиторію.</p>\n<p>c. Виберіть <strong>Fork project</strong>.</p>\n<p><img alt=\"Fork project\" src=\"../img/fork-project.png\" /></p>\n</li>\n<li>\n<p>Склонуйте скопійований проєкт.</p>\n<p><code>sh\ngit clone https://gitlab.com/ivancheban/my-test-site.git</code></p>\n<p>де <code>my-test-site</code> — це ім’я репозиторію скопійованого проєкту.</p>\n</li>\n</ol>\n<h2>Створення конфігурації CI</h2>\n<p>Щоб створити файл конфігурації CI (Continuous Integration), виконайте такі дії:</p>\n<ol>\n<li>\n<p>Відкрийте свій проєкт з Docusaurus у VS Code.</p>\n<p><img alt=\"Open project folder\" src=\"../img/open-project.png\" /></p>\n</li>\n<li>\n<p>Натисніть кнопку <strong>New file</strong>, щоб додати новий файл.</p>\n<p><img alt=\"Add new file\" src=\"../img/new-file.png\" /></p>\n</li>\n<li>\n<p>Уведіть ім’я та розширення файлу: <code>.gitlab-ci.yml</code>. Натисніть Enter.</p>\n<p>Файл створено.</p>\n</li>\n<li>\n<p>Скопіюйте код нижче і вставте його всередині файлу <code>.gitlab-ci.yml</code>.</p>\n<p>```yaml\nimage: node:latest</p>\n<h1>allow caching for faster deployment</h1>\n<p>cache:\n  paths:\n    - node_modules/\n    - public/\n    - .cache/</p>\n<p>pages:\n  stage: deploy\n  script:\n    - yarn install\n    - yarn build:gitlab\n  artifacts:\n      paths:\n        - public\n  only:\n    - main\n```</p>\n</li>\n<li>\n<p>Додайте код нижче до файлу <code>package.json</code>.</p>\n<p><code>json\n\"build:gitlab\": \"docusaurus build --out-dir public\",</code></p>\n<p><img alt=\"Build\" src=\"../img/build-docusaurus.png\" /></p>\n</li>\n<li>\n<p>Змініть значення параметру <code>baseUrl</code> у файлі <code>docusaurus.config.js</code> на <code>/my-test-site/</code>, де <code>my-test-site</code> — це ім’я вашого репозиторію.</p>\n<p><img alt=\"Base url\" src=\"../img/base-url.png\" /></p>\n</li>\n<li>\n<p>Укажіть, які зміни внесли до файлів, і завантажте змінені файли на сервер: commit і push.</p>\n</li>\n</ol>\n<h2>Публікація сайту в GitLab Pages</h2>\n<blockquote>\n<p>Тепер у вас є локальний проєкт із Docusaurus (локально і на сервері) з файлом конфігурації CI. Час почати публікацію.</p>\n</blockquote>\n<p>Щоб почати публікацію в GitLab Pages, виконайте такі дії:</p>\n<ol>\n<li>\n<p>Змініть щось у тексті документації проєкту.</p>\n</li>\n<li>\n<p>Укажіть, які зміни внесли до файлів, і завантажте змінені файли на сервер: commit і push.</p>\n</li>\n<li>\n<p>Перейдіть до <strong>Deployments &gt; Pages</strong> у репозиторії GitLab repo.</p>\n<p><img alt=\"Pages\" src=\"../img/pages.png\" /></p>\n</li>\n<li>\n<p>Перейдіть за посиланням опублікованого сайту в GitLab Pages.</p>\n<p><a href=\"https://ivancheban.gitlab.io/my-test-site\">https://ivancheban.gitlab.io/my-test-site</a></p>\n<p><img alt=\"Pages link\" src=\"../img/pages-link.png\" /></p>\n</li>\n</ol>\n<p>Ваш сайт опубліковано в інтернеті. Публікація (deployment) запускається автоматично, коли ви вносите зміни і завантажуєте змінені файли в репозиторій. Ви можете переглянути пайплайн для кожної публікації в розділі <strong>CI/CD &gt; Pipelines</strong>.</p>\n<p><img alt=\"Pipelines\" src=\"../img/pipelines.png\" /></p>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/static-site-generators/docusaurus-gitlab-pages/"
  },
  {
    "title": "Сайт для документації API на Hugo",
    "content": "<p>{{% pageinfo %}}\nНаша мета — опублікувати сайт для документації API, використовуючи тему DocuAPI для генератора статичних сайтів Hugo. Творець цієї теми Hugo надихався відомою темою Slate. Кінцевий результат буде схожий на цей сайт:</p>\n<p>https://docuapi-test.netlify.app\n{{% /pageinfo %}}</p>\n<h2>Попередні вимоги</h2>\n<ol>\n<li>\n<p>Переконайтеся, що у вас встановлено Hugo: <code>hugo version</code>.</p>\n<p>Якщо на вашому комп’ютері не встановлено Hugo, прочитайте статтю <a href=\"https://docsy-site.netlify.app/ua/docs/static-site-generators/hugo-install/\">Як встановити Hugo на Windows</a>.</p>\n</li>\n<li>\n<p>Переконайтеся , що у вас встановлено клієнт Git: <code>git version</code>.</p>\n<p>Якщо на вашому комп’ютері не встановлено клієнт Git, прочитайте як <a href=\"https://docsy-site.netlify.app/ua/docs/static-site-generators/jekyll/#клієнт-git\">встановити клієнт Git</a>.</p>\n</li>\n<li>\n<p>Переконайтесь, що у вас:</p>\n<ul>\n<li>Встановлено <a href=\"https://code.visualstudio.com/\">VSCode</a></li>\n<li>Зареєстроано обліковий запис <a href=\"https://github.com/\">GitHub</a></li>\n<li>Зареєстроано обліковий запис <a href=\"https://www.netlify.com/\">Netlify</a></li>\n</ul>\n</li>\n</ol>\n<hr />\n<h2>Завантажте тему</h2>\n<p>Щоб завантажити тему Hugo для документації API:</p>\n<ol>\n<li>\n<p>Перейдіть до <a href=\"https://github.com/bep/docuapi\">репозиторію GitHub</a> для цієї теми.</p>\n<p><img alt=\"img\" src=\"/docs/img/docuapi-theme.png\" /></p>\n</li>\n<li>\n<p>Завантажте заархівовану папку проекту.</p>\n<p><img alt=\"img\" src=\"/docs/img/download-theme-docuapi.png\" /></p>\n</li>\n<li>\n<p>Розпакуйте папку проекту.</p>\n</li>\n</ol>\n<hr />\n<h2>Створіть проект Hugo</h2>\n<p>Щоб створити новий проект Hugo на комп’ютері:</p>\n<ol>\n<li>\n<p>У командному рядку введіть: <code>hugo new site docuapi</code>, де <code>docuapi</code> — назва проекту Hugo, який ви хочете створити.</p>\n<p><img alt=\"img\" src=\"/docs/img/hugo-new-site.png\" /></p>\n</li>\n<li>\n<p>Скопіюйте завантажену папку теми в папку <code>theme</code> вашого проекту Hugo.</p>\n<p>У моєму випадку я копіюю папку <code>docuapi-master</code> до папки <code>c:\\Users\\ivanc\\docuapi\\themes\\</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/copy-theme-folder.png\" /></p>\n</li>\n<li>\n<p>Перейменуйте скопійовану папку <code>docuapi-master</code> на <code>docuapi</code>. Це назва теми.</p>\n<p><img alt=\"img\" src=\"/docs/img/renamed-folder.png\" /></p>\n</li>\n<li>\n<p>Відкрийте папку <code>exampleSite</code> у <code>c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\exampleSite\\</code>.</p>\n</li>\n<li>\n<p>Скопіюйте все, що знаходиться в папці <code>exampleSite</code> у <code>c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\exampleSite\\</code> до кореневої папки проекту в <code>c:\\Users\\ivanc\\docuapi\\</code>. Скопіюйте файли та папки із заміною.</p>\n<p><img alt=\"img\" src=\"/docs/img/copy-exampleSite.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Скомпілюйте сайт локально</h2>\n<blockquote>\n<p>Перш ніж публікувати сайт в Інтернеті, давайте подивимось, як він виглядає локально.</p>\n</blockquote>\n<p>Щоб скомпілювати сайт Hugo локально:</p>\n<ol>\n<li>\n<p>У командному рядку змініть шлях до папки з проектом Hugo: <code>cd docuapi</code>. Натисніть <strong>Enter</strong>.</p>\n</li>\n<li>\n<p>Введіть <code>hugo server</code>. Натисніть <strong>Enter</strong>.</p>\n<p>Ваш сайт скомпілюється та буде доступний на локальному сервері.</p>\n</li>\n<li>\n<p>Скопіюйте адресу сервера <a href=\"//localhost:1313/\">//localhost:1313/</a> і вставте її в браузер.</p>\n<p><img alt=\"img\" src=\"/docs/img/hugo-server.png\" /></p>\n<p>Маєте побачити цей сайт у своєму браузері.</p>\n<p><img alt=\"img\" src=\"/docs/img/local-site.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Опублікуйте сайт в інтернеті</h2>\n<blockquote>\n<p>Використовуйте сервіс Netlify для розгортання та розміщення сайту в Інтернеті. Щоб сайт був доступний онлайн, спочатку відредагуйте файли конфігурації та завантажте папку проекту на GitHub.</p>\n</blockquote>\n<h3>Відредагуйте файл конфігурації</h3>\n<p>Щоб відредагувати файл конфігурації для сайту Hugo:</p>\n<ol>\n<li>\n<p>Відкрийте папку <code>docuapi</code> у редакторі VSCode.</p>\n</li>\n<li>\n<p>Виберіть файл <code>config.toml</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/config.toml-file.png\" /></p>\n</li>\n<li>\n<p>Відредагуйте файл <code>config.toml</code>.</p>\n<p>```go\ntheme = \"docuapi\"</p>\n<h1>themesdir = \"../..\"</h1>\n<p>languageCode = \"en-us\"\nbaseurl = \"/\"\ntitle = \"DocuAPI Example Site\"\n```</p>\n<p>Ось так має виглядати відредагований файл конфігурації.</p>\n<p><img alt=\"img\" src=\"/docs/img/edited-toml.png\" /></p>\n</li>\n</ol>\n<hr />\n<h3>Відредайгуте файл конфігурації для сервісу Netlify</h3>\n<blockquote>\n<p>Щоб сервіс Netlify правильно скомпілював ваш сайт, йому потрібний файл конфігурації Netlify.</p>\n</blockquote>\n<p>Щоб відредагувати файл конфігурації Netlify:</p>\n<ol>\n<li>\n<p>У редакторі VSCode виберіть файл <code>netlify.toml</code>. У моєму випадку цей файл розташований тут: <code>c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/netlify.toml.png\" /></p>\n</li>\n<li>\n<p>Відредагуйте файл.</p>\n<p><code>go\n[context.production.environment]\nHUGO_VERSION = \"0.78.1\"</code></p>\n</li>\n<li>\n<p>Змініть значення версії Hugo для параметра <code>HUGO_VERSION</code> на вашу версію Hugo.</p>\n<p>{{&lt; alert title=\"Примітка\" &gt;}}Щоб дізнатися, яка у вас версія Hugo, введіть <code>hugo version</code> у командному рядку.{{&lt; /alert &gt;}}</p>\n<p>Відредагований файл <code>netlify.toml</code> має виглядати так.</p>\n<p><img alt=\"img\" src=\"/docs/img/netlify-file.png\" /></p>\n</li>\n<li>\n<p>Перемістіть файл <code>netlify.toml</code> з папки теми у <code>c:\\Users\\ivanc\\docuapi\\themes\\docuapi\\</code> до кореневої папки проекту <code>c:\\Users\\ivanc\\docuapi\\</code>.</p>\n</li>\n</ol>\n<h3>Завантажте папку проекту на GitHub</h3>\n<p>Щоб завантажити папку проекту на GitHub:</p>\n<ol>\n<li>\n<p>Відкрийте папку проекту в редакторі VSCode.</p>\n</li>\n<li>\n<p>Виберіть піктограму <strong>Source Control</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/source-control.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Publish to GitHub</strong>.</p>\n</li>\n<li>\n<p>Виберіть <strong>Publish to GitHub public repository</strong>.</p>\n<p>Коли папку проекту буде завантажено до репозиторія GitHub, ви побачите повідомлення про успішне завершення операції.</p>\n</li>\n<li>\n<p>Виберіть <strong>Open in GitHub</strong>, щоб переглянути папку проекту, завантажену до репозиторія GitHub та синхронізовану з ним.</p>\n<p><img alt=\"img\" src=\"/docs/img/github-repo-docuapi.png\" /></p>\n</li>\n</ol>\n<hr />\n<h3>Опублікуйте сайт за допомогою сервіса Netlify</h3>\n<p>Щоб зробити ваш сайт доступним онлайн:</p>\n<ol>\n<li>\n<p>Увійдіть до <a href=\"https://www.netlify.com/\">Netlify</a>.</p>\n</li>\n<li>\n<p>Виберіть <strong>New site from Git</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/new-site-netlify.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>GitHub</strong>.</p>\n</li>\n<li>\n<p>Виберіть свій репозиторій <strong>docuapi</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/docuapi-repo.png\" /></p>\n</li>\n<li>\n<p>У полі <strong>Build Command</strong> введіть <code>hugo</code>.</p>\n</li>\n<li>\n<p>У полі <strong>Publish directory</strong> введіть <code>public</code>.</p>\n</li>\n<li>\n<p>Виберіть <strong>Deploy site</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/deploy-site.png\" /></p>\n<p>Зачекайте, поки Netlify скомпілює ваш сайт з якоюсь кумедною назвою. Ви повинні побачити зелене повідомлення <strong>Published</strong>.</p>\n</li>\n<li>\n<p>Щоб змінити назву сайте, виберіть <strong>Site settings</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/site-settings.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Change site name</strong> і введіть доступну назву. У моєму випадку це <code>docuapi-test</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/change-name-docuapi.png\" /></p>\n<p>Ваш сайт вже має бути доступний онлайн. Ось як виглядає мій тестовий сайт з документацією API:</p>\n<p><a href=\"https://docuapi-test.netlify.app/\">https://docuapi-test.netlify.app/</a></p>\n</li>\n</ol>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/static-site-generators/hugo-api/"
  },
  {
    "title": "Як встановити Hugo на Windows",
    "content": "<p>{{% pageinfo %}}\nНаша мета — встановити Hugo на комп'ютері під управлінням Windows.\n{{% /pageinfo %}}</p>\n<h2>Установіть Go</h2>\n<blockquote>\n<p>Для роботи Hugo потрібна мова програмування Go або Golang.</p>\n</blockquote>\n<p>Щоб установити Go:</p>\n<ol>\n<li>\n<p>Перевірте, чи встановлено Go на вашому комп’ютері: <code>go version</code>.</p>\n<p><img alt=\"Check Go version\" src=\"/docs/img/go-version.png\" /></p>\n</li>\n<li>\n<p>Якщо Go не встановлено, установіть пакет із сайту:</p>\n<p>https://go.dev/doc/install</p>\n</li>\n</ol>\n<h2>Установіть Chocolatey</h2>\n<blockquote>\n<p>Спочатку перейдіть на офіційну <a href=\"https://gohugo.io/getting-started/installing/\">сторінку встановлення Hugo</a>. Як бачите, існує багато способів установки. Я вибираю варіант Chocolatey для встановлення Hugo.</p>\n</blockquote>\n<p>Щоб установити Chocolatey:</p>\n<ol>\n<li>\n<p>Введіть таку команду в командному рядку. Натисніть клавішу <strong>Enter</strong>.</p>\n<p><code>powershell\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \" [System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" &amp;&amp; SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"</code></p>\n<p><img alt=\"img\" src=\"/docs/img/choco-install.png\" /></p>\n</li>\n<li>\n<p>Перевірте, чи встановлено Chocolatey: <code>choco version</code></p>\n<p><img alt=\"img\" src=\"/docs/img/choco-version.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Установіть Hugo</h2>\n<p>Існує дві версії Hugo: стандартна і розширена. Встановіть розширену версію, оскільки вона потрібна для деяких тем.</p>\n<ol>\n<li>\n<p>Щоб встановити розширену версію Hugo за допомогою Chocolatey, введіть:</p>\n<p><code>choco install hugo-extended -confirm</code></p>\n<p><img alt=\"img\" src=\"/docs/img/hugo-install.png\" /></p>\n</li>\n<li>\n<p>Щоб перевірити, чи встановлено Hugo:</p>\n<p><code>hugo version</code></p>\n<p><img alt=\"img\" src=\"/docs/img/hugo-version-extended.png\" /></p>\n<p>Тепер ви готові розпочати свою подорож із генератором статичних сайтів Hugo.</p>\n</li>\n</ol>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/static-site-generators/hugo-install/"
  },
  {
    "title": "Сайт для документації API на Jekyll",
    "content": "<p>{{% pageinfo %}}\nНаша мета — створити й опублікувати сайт із документацією API, використовуючи Jekyll та Vercel. Кінцевий результат буде виглядати так:</p>\n<p>https://aviator-jekyll-template-master.vercel.app\n{{% /pageinfo %}}</p>\n<h2>Попередні умови</h2>\n<blockquote>\n<p>Припустимо, що на вашому комп’ютері встановлено Jekyll, клієнт Git та редактор Visual Studio Code. Якщо ні, спочатку прочитайте статтю про <a href=\"https://docsy-site.netlify.app/docs/static-site-generators/jekyll/\">Jekyll</a>.</p>\n</blockquote>\n<p>Щоб перевірити, чи встановлено Jekyll:</p>\n<ol>\n<li>\n<p>Відкрийте командний рядок.</p>\n<p><img alt=\"img\" src=\"/docs/img/open-cmd.png\" /></p>\n</li>\n<li>\n<p>Уведіть <code>jekyll -v</code> і натисніть <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/jekyll-version.png\" /></p>\n</li>\n</ol>\n<p>Щоб перевірити, чи встановлено Git і VSCode:</p>\n<ol>\n<li>\n<p>У командному рядку введіть <code>git --version</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/git-version.png\" /></p>\n</li>\n<li>\n<p>Переконайтесь, що у вас встановлено Visual Studio Code.</p>\n<p><img alt=\"img\" src=\"/docs/img/open-vscode.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Завантажте тему</h2>\n<p>Щоб завантажити тему Jekyll для сайту з документацією API:</p>\n<ol>\n<li>\n<p>Перейдіть на сторінку <a href=\"https://github.com/CloudCannon/aviator-jekyll-template\">репозиторію GitHub</a>.</p>\n</li>\n<li>\n<p>Виберіть <strong>Code</strong>.</p>\n</li>\n<li>\n<p>Виберіть <strong>Download ZIP</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/download-theme-aviator.png\" /></p>\n</li>\n<li>\n<p>Збережіть архівовану папку проекту собі на комп’ютер.</p>\n</li>\n<li>\n<p>Розпакуйте папку.</p>\n</li>\n</ol>\n<hr />\n<h2>Запустіть сайт локально</h2>\n<blockquote>\n<p>Перш ніж публікувати цей сайт в інтернеті, давайте перевіримо, як він працює локально на вашому комп’ютері.</p>\n</blockquote>\n<h3>Установіть Bundler</h3>\n<ol>\n<li>\n<p>Перейдіть до розташування, де ви розпакували папку проекту.</p>\n</li>\n<li>\n<p>Видаліть існуючі файли <code>Gemfile</code> і <code>Gemfile.lock</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/delete-gemlock-files.png\" /></p>\n</li>\n<li>\n<p>У провіднику файлів скопіюйте шлях до папки проекту.</p>\n<p>У моєму випадку це <code>c:\\Users\\ivanc\\aviator-jekyll-template-master\\</code></p>\n<p><img alt=\"img\" src=\"/docs/img/project-folder-path-aviator.png\" /></p>\n</li>\n<li>\n<p>У командному рядку змініть каталог на шлях до папки проекту. Натисніть <strong>Enter</strong>.</p>\n<p><code>cd c:\\Users\\ivanc\\aviator-jekyll-template-master\\</code></p>\n</li>\n<li>\n<p>Уведіть <code>gem install bundler</code> і натисніть <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/gem-install-bundler-aviator.png\" /></p>\n</li>\n<li>\n<p>Уведіть такі команди.</p>\n<p>```\nbundle init</p>\n<p>bundle install</p>\n<p>```</p>\n<p><img alt=\"img\" src=\"/docs/img/bundle-init-bundle-install-aviator.png\" /></p>\n<p>Ці команди створили нові файли <code>Gemfile</code> у папці вашого проекту.</p>\n</li>\n</ol>\n<hr />\n<h3>Bundle update</h3>\n<ol>\n<li>\n<p>Відкрийте файл <code>Gemfile</code> за допомогою Блокнота.</p>\n<p><img alt=\"img\" src=\"/docs/img/gemfile-edit-aviator.png\" /></p>\n</li>\n<li>\n<p>Видаліть усе в цьому файлі.</p>\n</li>\n<li>\n<p>Введіть наступні дані та збережіть файл.</p>\n<p>```ruby\nsource 'https://rubygems.org'</p>\n<p>gem 'jekyll', '3.7.2'\ngem 'tzinfo-data'</p>\n<p>group :jekyll_plugins do\n gem 'jekyll-seo-tag', '2.4.0'\n gem 'jekyll-sitemap', '1.2.0'\nend\n```</p>\n<p><img alt=\"img\" src=\"/docs/img/gemfile-aviator.png\" /></p>\n</li>\n<li>\n<p>Уведіть <code>bundle update</code> і натисніть <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/bundle-update.png\" /></p>\n</li>\n</ol>\n<hr />\n<h3>Скомпілюйте сайт</h3>\n<p>Щоб скомпілювати сайт Jekyll локально:</p>\n<ol>\n<li>\n<p>Уведіть <code>bundle exec jekyll serve</code> і натисніть <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/bundle-exec-jekyll-serve.png\" /></p>\n</li>\n<li>\n<p>Скопіюйте адресу сервера:</p>\n<p><a href=\"http://127.0.0.1:4000\">http://127.0.0.1:4000</a></p>\n</li>\n<li>\n<p>Вставте його у свій браузер, і ви побачите, як ваш сайт запущено локально.</p>\n<p><img alt=\"img\" src=\"/docs/img/site-served-locally-aviator.png\" /></p>\n</li>\n</ol>\n<p>{{&lt; alert title=\"Примітка\" &gt;}}Щоб зупинити локальний сервер, на якому обслуговується ваш сайт, натисніть <code>Ctrl+C</code> у командному рядку.{{&lt; /alert &gt;}}</p>\n<hr />\n<h2>Опублікуйте сайт в інтернеті</h2>\n<blockquote>\n<p>Коли ви закінчите редагувати сайт локально, настав час опублікувати його в інтернеті, щоб його бачили всі. У цьому прикладі я буду використовувати платформу Vercel для розгортання та розміщення вашого сайту. Але спочатку потрібно завантажити папку проекту на GitHub.</p>\n</blockquote>\n<h3>Завантажте на GitHub</h3>\n<p>Щоб завантажити папку проекту на GitHub:</p>\n<ol>\n<li>\n<p>Відкрийте папку проекту у VSCode.</p>\n</li>\n<li>\n<p>Виберіть піктограму <strong>Source Control</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/source-control.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Publish to GitHub</strong>.</p>\n</li>\n<li>\n<p>Виберіть <strong>Publish to GitHub public repository</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/publish-public-repo-aviator.png\" /></p>\n<p>Коли папку проекту буде завантажено до репозиторію GitHub, ви побачите це повідомлення про успішне завершення операції.</p>\n<p><img alt=\"img\" src=\"/docs/img/git-publish-message.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Open in GitHub</strong>, щоб переглянути папку проекту, завантажену та синхронізовану в репозиторії GitHub.</p>\n<p><img alt=\"img\" src=\"/docs/img/github-repo-aviator.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Публікація за допомогою сервіса Vercel</h2>\n<p>Щоб опублікувати свій сайт в інтернеті, скористайтеся сервісом Vercel.</p>\n<ol>\n<li>\n<p>Перейдіть на сторінку <a href=\"https://vercel.com/login\">Vercel</a>.</p>\n</li>\n<li>\n<p>Виберіть <strong>Continue with GitHub</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/vercel-login.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Import Project</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/import-project.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Continue</strong>, щоб імпортувати ваш проект із GitHub.</p>\n<p><img alt=\"img\" src=\"/docs/img/import-git-repository.png\" /></p>\n</li>\n<li>\n<p>Уведіть посилання на ваш репозиторий GitHub і виберіть <strong>Continue</strong>:</p>\n<p><a href=\"https://github.com/ivancheban/aviator-jekyll-template-master\">https://github.com/ivancheban/aviator-jekyll-template-master</a></p>\n<p><img alt=\"img\" src=\"/docs/img/link-to-repo-aviator.png\" /></p>\n</li>\n<li>\n<p>Уведіть назву проекту: наприклад, <code>aviator-jekyll-template-master</code>. Виберіть <strong>Deploy</strong>.</p>\n<p>{{&lt; alert title=\"Примітка\" &gt;}}Цю назву буде використано в посиланні на ваш сайт. Ви завжди можете змінити назву сайту в налаштуваннях Vercel у розділі <strong>Domains</strong>.{{&lt; /alert &gt;}}</p>\n<p><img alt=\"img\" src=\"/docs/img/deploy-project-aviator.png\" /></p>\n<p>{{&lt; alert title=\"Примітка\" &gt;}}Компіляція проекту займає кілька хвилин. Наберіться терпіння.{{&lt; /alert &gt;}}</p>\n<p>Коли компіляція закінчиться, ви побачите цей веселий екран про успішну публікацю сайту.</p>\n<p><img alt=\"img\" src=\"/docs/img/site-published.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Visit</strong>, щоб перейти на сторінку вашого сайту з документацією API, доступного онлайн.</p>\n<p>Маєте побачити ваш сайт, подібний до цього:</p>\n<p><a href=\"https://aviator-jekyll-template-master.vercel.app/\">https://aviator-jekyll-template-master.vercel.app/</a></p>\n</li>\n</ol>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/static-site-generators/jekyll-api/"
  },
  {
    "title": "Jekyll",
    "content": "<p>{{% pageinfo %}}\nНаша мета — створити та опублікувати сайт з технічною документацією за допомогою Jekyll та Netlify. Кінцевий результат буде виглядати так: https://sample-jekyll.netlify.app\n{{% /pageinfo %}}</p>\n<h2>Завантажте тему з репозиторію GitHub</h2>\n<ol>\n<li>\n<p>Зареєструйтеся на GitHub.</p>\n<p><img src=\"/docs/img/sign-up-GitHub.png\"></p>\n</li>\n<li>\n<p>Якщо у вас вже є обліковий запис, увійдіть.</p>\n<p><img alt=\"img\" src=\"/docs/img/sign-in-GitHub.png\" /></p>\n</li>\n<li>\n<p>Перейдіть до <a href=\"https://github.com/tomjoht/documentation-theme-jekyll\">репозиторія Тома</a>.</p>\n<p><img alt=\"img\" src=\"/docs/img/tom-repo.png\" /></p>\n</li>\n<li>\n<p>Натисніть кнопку <strong>Code</strong> і виберіть <strong>Download ZIP</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/download-zip.png\" /></p>\n</li>\n<li>\n<p>Збережіть ZIP-файл на своєму комп’ютері та розпакуйте вміст, де вам заманеться. Тепер у вас є папка з кодом та вмістом. Давайте приступимо до створення нашого сайту з усього цього.</p>\n</li>\n</ol>\n<hr />\n<h2>Встановіть Ruby на Windows</h2>\n<blockquote>\n<p>Перш ніж ми встановимо Jekyll, який компілює наш сайт, нам потрібно встановити Ruby. Jekyll — це програма на основі Ruby, для запуску якої потрібен Ruby.</p>\n</blockquote>\n<ol>\n<li>\n<p>Перейдіть до <a href=\"https://rubyinstaller.org/downloads/\">RubyInstaller for Windows</a>.</p>\n</li>\n<li>\n<p>Встановіть рекомендовану  версію <strong>Ruby+Devkit 2.6.X (x64)</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/ruby-installer.png\" /></p>\n</li>\n<li>\n<p>Встановіть все за замовчуванням.</p>\n<p><img alt=\"img\" src=\"/docs/img/installation-ruby.png\" /></p>\n</li>\n<li>\n<p>Після завершення встановлення ви побачите цей екран командного рядка. Натисніть <code>Enter</code> двічі, коли потрібно буде підтвердити вибір.</p>\n<p><img alt=\"img\" src=\"/docs/img/ruby-installed.png\" /></p>\n</li>\n<li>\n<p>Коли інсталяція в командному рядку завершиться, припустимо, що ми встановили Ruby. Якщо ви хочете переконатися, відкрийте командний рядок і введіть <code>ruby -v</code> і натисніть <code>Enter</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/check-ruby-version.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Встановіть Jekyll</h2>\n<ol>\n<li>\n<p>Щоб встановити Jekyll, введіть <code>gem install jekyll</code> у командному рядку та натисніть <code>Enter</code>.</p>\n</li>\n<li>\n<p>Перевірте, чи правильно встановлено Jekyll: введіть <code>jekyll -v</code> і натисніть <code>Enter</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/check-jekyll-version.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Встановіть Bundler</h2>\n<ol>\n<li>\n<p>Перейдіть до каталогу, куди ви завантажили проект для Jekyll.</p>\n</li>\n<li>\n<p>Видаліть існуючі файли <code>Gemfile</code> і <code>Gemfile.lock</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/project-folder.png\" /></p>\n</li>\n</ol>\n<h3>Змініть шлях до проекту</h3>\n<p>По-перше, вам потрібно змінити каталог у командному рядку.</p>\n<ol>\n<li>\n<p>У провіднику скопіюйте шлях до розпакованої папки з вашим проектом.</p>\n<p><img alt=\"img\" src=\"/docs/img/path-to-project-folder.png\" /></p>\n</li>\n<li>\n<p>У командному рядку введіть <code>cd</code> та клацніть правою кнопкою миші, щоб вставити скопійований шлях.</p>\n</li>\n<li>\n<p>Натисніть <code>Enter</code>, щоб змінити каталог. Тепер ви можете виконувати команди в каталозі проекту.</p>\n<p><img alt=\"img\" src=\"/docs/img/paste-path-command-prompt.png\" /></p>\n</li>\n</ol>\n<hr />\n<h3>Встановіть Bundler</h3>\n<ol>\n<li>\n<p>Щоб встановити Bundler, введіть <code>gem install bundler</code> і натисніть <code>Enter</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/gem-install-bundler.png\" /></p>\n</li>\n<li>\n<p>Введіть такі команди:</p>\n<p><code>bundle init\nbundle install</code></p>\n<p><img alt=\"img\" src=\"/docs/img/bundle-init-bundle-install.png\" /></p>\n<p>Ці команди створили нові файли <code>Gemfile</code> у папці проекту.</p>\n</li>\n<li>\n<p>Відкрийте <code>Gemfile</code> за допомогою Блокнота.</p>\n<p><img alt=\"img\" src=\"/docs/img/gemfile.png\" /></p>\n</li>\n<li>\n<p>Видаліть усе в цьому файлі.</p>\n</li>\n<li>\n<p>Введіть наступні дані та збережіть файл.</p>\n<p>```\nsource \"https://rubygems.org\"</p>\n<p>gem \"jekyll\"\n```</p>\n<p><img alt=\"img\" src=\"/docs/img/notepad-edit-gemfile.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Скомпілюйте сайт</h2>\n<p>Щоб скомпілювати свій сайт Jekyll локально:</p>\n<ol>\n<li>\n<p>Змініть каталог в командному рядку: <code>cd documentation-theme-jekyll-gh-pages</code>.</p>\n</li>\n<li>\n<p>Уведіть <code>jekyll serve</code>.</p>\n</li>\n<li>\n<p>Щоб отримати доступ до сайту локально, скопіюйте адресу з командного рядка: <a href=\"http://127.0.0.1:4000/\">http://127.0.0.1:4000</a></p>\n<p><img alt=\"img\" src=\"/docs/img/jekyll-serve.png\" /></p>\n</li>\n<li>\n<p>Вставте адресу у свій браузер, і ви побачите сайт.</p>\n<p><img alt=\"img\" src=\"/docs/img/site-built-locally.png\" /></p>\n</li>\n</ol>\n<p>Ви можете отримати доступ до всього вмісту сайту локально з папки проекту.</p>\n<p>{{% alert title=\"Примітка\" %}}\nЩоб зупинити локальний сервер, на якому запущено ваш сайт, натисніть <code>Ctrl+C</code> в командному рядку.\n{{% /alert %}}</p>\n<hr />\n<h2>CI/CD, GitHub and IDE</h2>\n<blockquote>\n<p>Перш ніж публікувати свій сайт в Інтернеті, вам потрібно створити процес CI / CD. Хоча цей термін звучить загадково, в цьому немає нічого складного.</p>\n<p>На комп’ютері потрібно мати редактор, де ви будете змінювати код та вміст свого сайту. Цей редактор повинен мати можливість надсилати внесені вами зміни до вашого репозиторія на GitHub. Це як папка Dropbox, яка синхронізує вашу локальну папку з хмарою.</p>\n<p>У цьому прикладі я буду використовувати редактор / інструмент розробки Visual Studio Code.</p>\n</blockquote>\n<h3>Редактор VSCode</h3>\n<p>Установіть VSCode з <a href=\"https://code.visualstudio.com/download\">офіційного сайту</a>.</p>\n<p><img alt=\"img\" src=\"/docs/img/download-vscode.png\" /></p>\n<p>Корисні посилання для налаштування VSCode для перегляду та редагування файлів Markdown:</p>\n<ul>\n<li><a href=\"https://sciwiki.fredhutch.org/compdemos/vscode_markdown_howto\">Using Markdown with Visual Studio Code</a></li>\n<li><a href=\"https://medium.com/@michael.isprihanto/how-to-guide-markdown-in-visual-studio-code-e8a68cc01f64\">How-To Guide: Markdown in Visual Studio Code</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/languages/markdown\">Markdown and Visual Studio Code</a></li>\n<li><a href=\"https://gitlab.com/svetlnovikova/webinar/-/blob/master/post-webinar-materials.md\">Матеріали Лани Новікової про VScode</a> (російською мовою)</li>\n</ul>\n<hr />\n<h3>Клієнт Git</h3>\n<blockquote>\n<p>Вам також знадобиться клієнт Git для підключення VSCode до вашого репозиторія на GitHub. Це те саме, що використовувати Word (в даному випадку VSCode) для написання / редагування документа, а десктопний клієнт Dropbox (в даному випадку клієнт Git) для синхронізації змін із хмарним сервером.</p>\n</blockquote>\n<ol>\n<li>\n<p>Встановіть клієнт Git з його <a href=\"https://git-scm.com/\">офіційного сайту</a>.</p>\n<p><img alt=\"img\" src=\"/docs/img/download-git-client.png\" /></p>\n</li>\n<li>\n<p>Встановіть все за замовчуванням. Ви можете закрити вікно клієнта Git.</p>\n</li>\n</ol>\n<hr />\n<h3>Перегляньте папку проекта в редакторі</h3>\n<ol>\n<li>\n<p>Запустіть VSCode.</p>\n</li>\n<li>\n<p>Виберіть <strong>File</strong> &gt; <strong>Open Folder</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/open-project-folder-vscode.png\" /></p>\n</li>\n<li>\n<p>Відкрийте папку проекта.</p>\n<p><img alt=\"img\" src=\"/docs/img/open-project-folder.png\" /></p>\n<p>Тепер ви побачите вміст папки в редакторі VSCode. Якщо відкрити папку із вмістом і натиснути файл <strong>.md</strong>, ви побачите розмітку файла.</p>\n<p><img alt=\"img\" src=\"/docs/img/markdown-markup.png\" /></p>\n<p>Тепер ви можете редагувати файли. Але вам потрібно завантажити цю папку до вашого репозиторія GitHub, щоб синхронізувати зміни.</p>\n</li>\n</ol>\n<hr />\n<h3>Завантажте папку проекта на GitHub</h3>\n<ol>\n<li>\n<p>Перейдіть до розділу Source Control у VSCode і натисніть кнопку <strong>Publish to GitHub</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/publish-to-github.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Publish to GitHub public repository</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/publish-to-public-repository.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Open in GitHub</strong>, щоб відкрити щойно створений репозиторий проекта на GitHub.</p>\n<p><img alt=\"img\" src=\"/docs/img/open-in-github.png\" /></p>\n<p>Ви побачите структуру папок вашого проекта. Тепер ваша локальна папка синхронізується із хмарним сервером GitHub. Кожну зміна, яку ви внесете локально, буде синхронізовано з сервером GitHub.</p>\n<p><img alt=\"img\" src=\"/docs/img/project-your-repository.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Опублікуйте свій сайт</h2>\n<blockquote>\n<p>Тепер, коли ви скомпілювали свій сайт з документацією локально, ви задаєтесь питанням, як опублікувати його в Інтернеті, щоб його бачили всі. Хоча Том розповідає, як опублікувати свій сайт на GitHub Pages, я не рекомендую цього. Існують кращі та простіші способи публікації сайтів, побудованих за допомогою статичних генераторів сайтів. Для цього прикладу я буду використовувати Netlify.</p>\n</blockquote>\n<ol>\n<li>\n<p>Зареєструйтесь у <a href=\"https://www.netlify.com/\">Netlify</a>.</p>\n<p><img alt=\"img\" src=\"/docs/img/netlify-signup.png\" /></p>\n<p>Або увійдіть, якщо у вас вже є обліковий запис.</p>\n</li>\n<li>\n<p>Натисніть кнопку <strong>New site from Git</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/new-site-from-git.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>GitHub</strong> як провайдера Git.</p>\n<p><img alt=\"img\" src=\"/docs/img/connect-to-github.png\" /></p>\n</li>\n<li>\n<p>Дозвольте доступ Netlify до вашого репозиторія на GitHub.</p>\n<p>Ви побачите список своїх репозиторіїв.</p>\n</li>\n<li>\n<p>Виберіть репозиторій, який ви створили в попередньому кроці.</p>\n<p><img alt=\"img\" src=\"/docs/img/pick-repository.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Deploy site</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/deploy-settings.png\" /></p>\n<p>Ви побачите, як Netlify компілює ваш сайт з якоюсь кумедною назвою.</p>\n<p><img alt=\"img\" src=\"/docs/img/deploy-progress.png\" /></p>\n<p>{{&lt; alert title=\"Примітка\" &gt;}}Компіляція вашого сайту вперше займає кілька хвилин. Наберіться терпіння. Коли компіляція завершиться, ви побачите статус <strong>Published</strong>.{{&lt; /alert &gt;}}</p>\n<p><img alt=\"img\" src=\"/docs/img/site-deployed.png\" /></p>\n</li>\n<li>\n<p>Змініть назву сайту на будь-яку доступну.</p>\n<p><img alt=\"img\" src=\"/docs/img/change-site-name.png\" /></p>\n</li>\n<li>\n<p>Клацніть нову назву сайту, щоб відвідати його сторінку. Маєте побачити свій сайт, який буде виглядати так:</p>\n<p><a href=\"https://sample-jekyll.netlify.app/\">https://sample-jekyll.netlify.app/</a></p>\n<p><img alt=\"img\" src=\"/docs/img/sample-jekyll-site.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Корисні посилання</h2>\n<p>Я скористався порадами з цих сайтів:</p>\n<ul>\n<li><a href=\"https://www.netlify.com/blog/2020/04/02/a-step-by-step-guide-jekyll-4.0-on-netlify/\">https://www.netlify.com/blog/2020/04/02/a-step-by-step-guide-jekyll-4.0-on-netlify/</a></li>\n<li><a href=\"https://www.netlify.com/blog/2015/10/28/a-step-by-step-guide-jekyll-3.0-on-netlify/\">https://www.netlify.com/blog/2015/10/28/a-step-by-step-guide-jekyll-3.0-on-netlify/</a></li>\n<li><a href=\"https://idratherbewriting.com/documentation-theme-jekyll/index.html\">https://idratherbewriting.com/documentation-theme-jekyll/index.html</a></li>\n<li><a href=\"https://github.com/tomjoht/documentation-theme-jekyll\">https://github.com/tomjoht/documentation-theme-jekyll</a></li>\n<li><a href=\"https://docs.github.com/en/free-pro-team@latest/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line\">https://docs.github.com/en/free-pro-team@latest/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line</a></li>\n</ul>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/static-site-generators/jekyll/"
  },
  {
    "title": "Створити онлайн-резюме за допомогою Jekyll",
    "content": "<p>{{% pageinfo %}}\nНаша мета — створити й опублікувати односторінковий сайт-резюме за допомогою Jekyll і Vercel. Кінцевий результат буде виглядати так:</p>\n<p>https://online-cv-master.vercel.app\n{{% /pageinfo %}}</p>\n<h2>Передумови</h2>\n<blockquote>\n<p>Припустимо, що на вашому комп’ютері встановлено Jekyll, клієнт Git та редактор Visual Studio Code. Якщо ні, спочатку прочитайте статтю про <a href=\"https://docsy-site.netlify.app/docs/static-site-generators/jekyll/\">Jekyll</a>.</p>\n</blockquote>\n<p>Щоб перевірити, чи встановлений у вас Jekyll:</p>\n<ol>\n<li>\n<p>Відкрийте командний рядок.</p>\n<p><img alt=\"img\" src=\"/docs/img/open-cmd.png\" /></p>\n</li>\n<li>\n<p>Уведіть <code>jekyll -v</code> і натисніть <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/jekyll-version.png\" /></p>\n</li>\n</ol>\n<p>Щоб перевірити, чи встановлені Git і VSCode:</p>\n<ol>\n<li>\n<p>У командному рядку введіть <code>git --version</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/git-version.png\" /></p>\n</li>\n<li>\n<p>Переконайтесь, що у вас установлено Visual Studio Code.</p>\n<p><img alt=\"img\" src=\"/docs/img/open-vscode.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Завантажте тему</h2>\n<blockquote>\n<p>Є багато безкоштовних попередньо налаштованих тем для Jekyll, які можна завантажити з GitHub. Ви можете переглянути список тем для генераторів статичних сайтів на <a href=\"https://jamstackthemes.dev/\">JAMstack Themes</a>. Я використав <a href=\"https://jamstackthemes.dev/theme/jekyll-online-cv/\">цю тему</a> для мого онлайн-резюме.</p>\n</blockquote>\n<p>Щоб завантажити тему Jekyll для вашого онлайн-резюме:</p>\n<ol>\n<li>\n<p>Перейдіть до <a href=\"https://github.com/sharu725/online-cv\">репозиторію GitHub</a> для цієї теми.</p>\n</li>\n<li>\n<p>Виберіть <strong>Code</strong>.</p>\n</li>\n<li>\n<p>Виберіть <strong>Download ZIP</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/download-theme.png\" /></p>\n</li>\n<li>\n<p>Збережіть архівовану папку проекту на свій комп’ютер.</p>\n</li>\n<li>\n<p>Розпакуйте папку.</p>\n</li>\n</ol>\n<hr />\n<h2>Запустіть сайт локально</h2>\n<blockquote>\n<p>Перш ніж змінювати дані у цьому резюме, давайте перевіримо, як сайт працює локально на вашому комп’ютері.</p>\n</blockquote>\n<h3>Відредагуйте конфігураційний файл</h3>\n<p>Щоб відредагувати файл <code>_config.yml</code>:</p>\n<ol>\n<li>\n<p>Відкрийте папку проекту у VSCode.</p>\n</li>\n<li>\n<p>Виберіть файл <code>_config.yml</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/config.yml.png\" /></p>\n</li>\n<li>\n<p>Видаліть цей рядок: <code>baseurl: '/online-cv' #change it according to your repository name</code>.</p>\n</li>\n<li>\n<p>Видаліть рядки нижче <code># Development Settings</code>.</p>\n<p><code>port: 4000\nhost: 0.0.0.0\nsafe: false</code></p>\n</li>\n</ol>\n<p>Ось як має виглядати ваш файл <code>_config.yml</code>.\n<br/></p>\n<p><img alt=\"img\" src=\"/docs/img/edited-config.png\" /></p>\n<hr />\n<h3>Установіть Bundler</h3>\n<p>Щоб установити Bundler:</p>\n<ol>\n<li>\n<p>У провіднику файлів скопіюйте шлях до папки проекту.</p>\n<p>У моєму випадку це <code>c:\\Users\\ivanc\\online-cv-master</code></p>\n<p><img alt=\"img\" src=\"/docs/img/project-folder-path.png\" /></p>\n</li>\n<li>\n<p>У командному рядку змініть каталог на шлях до папки проекту. Натисніть <strong>Enter</strong>.</p>\n<p><code>cd c:\\Users\\ivanc\\online-cv-master\\</code></p>\n</li>\n<li>\n<p>Уведіть <code>gem install bundler</code> і натисніть <strong>Enter</strong>.</p>\n</li>\n<li>\n<p>Уведіть такі команди:</p>\n<p><code>bundle init\nbundle install</code>\n<img alt=\"img\" src=\"/docs/img/install-bundler.png\" /></p>\n<p>Ці команди створили нові файли <code>Gemfile</code> у папці проекту.</p>\n</li>\n<li>\n<p>Відкрийте <code>Gemfile</code> за домогою Блокнота.</p>\n<p><img alt=\"img\" src=\"/docs/img/gemfile-edit.png\" /></p>\n</li>\n<li>\n<p>Видаліть усе в цьому файлі.</p>\n</li>\n<li>\n<p>Введіть наступні дані та збережіть файл.</p>\n<p>```\nsource \"https://rubygems.org\"</p>\n<p>gem \"jekyll\"\n```</p>\n<p><img alt=\"img\" src=\"/docs/img/notepad-edit-gemfile.png\" /></p>\n</li>\n</ol>\n<hr />\n<h3>Скомпілюйте сайт</h3>\n<p>Щоб скомпілювати наш сайт за допомогою Jekyll локально:</p>\n<ol>\n<li>\n<p>Уведіть <code>jekyll serve</code> і натисніть <strong>Enter</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/jekyll-serve-resume.png\" /></p>\n</li>\n<li>\n<p>Скопіюйте адресу сервера:</p>\n<p><a href=\"http://127.0.0.1:4000/online-cv/\">http://127.0.0.1:4000/online-cv/</a></p>\n</li>\n<li>\n<p>Вставте адресу сервера у свій браузер, і ви побачите, як ваш сайт запуститься локально.</p>\n<p><img alt=\"img\" src=\"/docs/img/site-served-locally.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Відредагуйте своє резюме</h2>\n<blockquote>\n<p>Тепер, коли ви скомпілювали сайт з резюме, час замінити в ньому дані на власні.</p>\n</blockquote>\n<p>Щоб відредагувати дані у своєму резюме:</p>\n<ol>\n<li>\n<p>У VSCode відкрийте папку проекту й виберіть файл <code>data.yml</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/data.yml.png\" /></p>\n</li>\n<li>\n<p>Замініть дані в резюме на власні.</p>\n<p>{{&lt; alert title=\"Примітка\" &gt;}}Коли ви змінюєте дані в резюме, зміни на сайті, запущеному локально, застосовуються автоматично. Оновіть сторінку у браузері, щоб побачити зміни.{{&lt; /alert &gt;}}</p>\n</li>\n</ol>\n<hr />\n<h2>Опублікуйте сайт в інтернеті</h2>\n<blockquote>\n<p>Коли закінчите редагувати сайт локально, час опублікувати його в інтернеті, щоб його бачили всі. Для цього прикладу я використаю іншу приємну платформу для розгортання та розміщення вашого сайта, Vercel. Але спочатку потрібно завантажити папку проекту на GitHub.</p>\n</blockquote>\n<h3>Опублікувати на GitHub</h3>\n<p>Щоб завантажити папку проекту на GitHub:</p>\n<ol>\n<li>\n<p>У VSCode відкрийте папку проекту.</p>\n</li>\n<li>\n<p>Виберіть піктограму <strong>Source Control</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/source-control.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Publish to GitHub</strong>.</p>\n</li>\n<li>\n<p>Виберіть <strong>Publish to GitHub public repository</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/publish-public-repo.png\" /></p>\n<p>Коли папку проекту буде завантажено до репозиторія GitHub, ви побачите це повідомлення про успішне завершення операції.</p>\n<p><img alt=\"img\" src=\"/docs/img/publish-message.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Open in GitHub</strong>, щоб переглянути папку проекту, завантажену та синхронізовану з репозиторієм GitHub.</p>\n<p><img alt=\"img\" src=\"/docs/img/github-repo.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Публікація сайта за допомогою сервіса Vercel</h2>\n<p>Щоб опублікувати свій сайт в інтернеті, скористайтесь сервісом Vercel.</p>\n<ol>\n<li>\n<p>Перейдіть на сторінку <a href=\"https://vercel.com/login\">Vercel</a>.</p>\n</li>\n<li>\n<p>Виберіть <strong>Continue with GitHub</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/vercel-login.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Import Project</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/import-project.png\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Continue</strong>, щоб імпортувати проект із GitHub.</p>\n<p><img alt=\"img\" src=\"/docs/img/import-git-repository.png\" /></p>\n</li>\n<li>\n<p>Надайте посилання на ваш репозиторій GitHub і виберіть <strong>Continue</strong>:</p>\n<p><a href=\"https://github.com/ivancheban/online-cv-master\">https://github.com/ivancheban/online-cv-master</a></p>\n<p><img alt=\"img\" src=\"/docs/img/link-to-repo.png\" /></p>\n</li>\n<li>\n<p>Уведіть назву проекту: наприклад, <code>online-cv-master</code>. Виберіть <strong>Deploy</strong>.</p>\n<p>{{&lt; alert title=\"Примітка\" &gt;}}Ця назва буде використовуватися в посиланні на ваш сайт з резюме. Адресу вашого сайту можна буде змінити пізніше в налаштуваннях Vercel <strong>Domains</strong>.{{&lt; /alert &gt;}}</p>\n<p><img alt=\"img\" src=\"/docs/img/deploy-project.png\" /></p>\n<p>{{&lt; alert title=\"Примітка\" &gt;}}Компіляція проекту займає кілька хвилин. Наберіться терпіння.{{&lt; /alert &gt;}}</p>\n<p>Коли компіляція закінчиться, ви побачите цю веселу заставку про успішне завершення операції.</p>\n<p><img alt=\"img\" src=\"/docs/img/successful-deploy.gif\" /></p>\n</li>\n<li>\n<p>Виберіть <strong>Visit</strong>, щоб перейти на сайт з вашим резюме, доступним онлайн.</p>\n<p>Маєте побачити сайт, подібний до цього:</p>\n<p><a href=\"https://online-cv-master.vercel.app/\">https://online-cv-master.vercel.app/</a></p>\n</li>\n</ol>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/static-site-generators/online-resume/"
  },
  {
    "title": "Створення блогу за допомогою Publii CMS",
    "content": "<p>{{% pageinfo %}}\nМета полягає в тому, щоб створити особистий блог за допомогою генератора статичних сайтів Publii для ПК на основі CMS. Перегляньте результат тут: https://technical-writing-blog.netlify.app/use-publii-cms-for-a-blog\n{{% /pageinfo %}}</p>\n<h2>Що таке Publii?</h2>\n<p><a href=\"https://getpublii.com/docs/\">Publii</a> це настільний (!) генератор статичних сайтів на основі CMS, який використовує Vue.js для WYSIWYG інтерфейсу користувача та Handlebars.js для шаблонів тем. Я підозрюю, що в цьому інструменті є набагато більше технологій, але це моє перше враження про цей інструмент.</p>\n<h2>Як техрайтер може використовувати цей інструмент?</h2>\n<p>Крім основної функції блогу, яку я використовував для створення цього блогу, Publii пропонує багато тем на своєму <a href=\"https://marketplace.getpublii.com/themes/\">Marketplace</a>. У розділі «Документація» є чотири чудові технічні теми для сайту з документацією. На жаль, вони платні. Але ціна помірна: 35,00 євро.</p>\n<p><img src=\"../img/marketplace-lg.png\" alt=\"Marketplace\" width=\"800\"/>\n<br></br></p>\n<p>Хоча я віддаю перевагу безкоштовним генераторам статичних сайтів, таким як Docusaurus або MkDocs Material, деякі технічні автори вважатимуть це рішення розумним і відповідним їхнім потребам.</p>\n<h2>Як встановити й використовувати Publii?</h2>\n<p>Publii, що позиціонується як надпростий і легкий генератор статичних сайтів (SSG) на основі CMS, не такий уже й простий. Є сотні прихованих налаштувань інтерфейсу користувача. Починаючи з інсталяції теми із завантаженого ZIP-файлу, вам потрібно буде покроково ознайомитися з їхньою документацією. Загальні кроки:</p>\n<ol>\n<li>Установіть настільну програму Publii для вашої операційної системи. Наприклад, файл EXE для Windows.</li>\n<li>Виберіть і завантажте тему з їх Marketplace. Це ZIP-файл. Ви можете зберегти його в будь-якому місці, і не потрібно його розпаковувати.</li>\n<li>Установіть тему з меню з трьома крапками у верхньому правому куті програми. Дуже вміло сховано. Браво, Publii!</li>\n</ol>\n<p><img src=\"../img/site-settings-lg.png\" alt=\"Site settings\" width=\"800\"/>\n<br></br></p>\n<h2>Як змінити кольори та інші налаштування сайту?</h2>\n<p>Ви можете змінити колірну схему сайту та інші параметри теми в розділі «Тема». Вибраний колір буде застосовано до всіх елементів вашого сайту, як-от посилання або пункти списку.</p>\n<p><img src=\"../img/theme-settings-lg.png\" alt=\"Theme settings\" width=\"800\"/>\n<br></br></p>\n<h2>Застереження</h2>\n<p>Хоча у вас може не бути раптових відключень електроенергії, як тут, в Україні, через росіян, які зруйнували нашу енергетичну інфраструктуру, я все одно рекомендую створити резервну копію вашого сайту Publii якнайшвидше. У мене була неприємна ситуація, коли файл конфігурації сайту був пошкоджений через раптове відключення електроенергії, і довелося перевстановити програму. Файл резервної копії допоміг би.</p>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/static-site-generators/publii/"
  },
  {
    "title": "Як видалити Hugo з Windows",
    "content": "<p>{{% pageinfo %}}\nНаша мета — видалити генератор статичних сайтів Hugo, встановлений на Windows.\n{{% /pageinfo %}}</p>\n<h2>Перевірте версію Hugo</h2>\n<p>Ви можете перевірити, чи встановлено Hugo, запустивши цю команду в командному рядку: <code>hugo version</code></p>\n<p>Якщо ви бачите версію Hugo, це означає, що Hugo встановлено на вашому комп'ютері.</p>\n<p><img alt=\"img\" src=\"/docs/img/hugo-version.png\" /></p>\n<hr />\n<h2>Дізнайтеся, як ви встановили Hugo</h2>\n<p>Зараз я точно не пам’ятаю метод, який використовував для встановлення Hugo. Якщо ви перейдете на <a href=\"https://gohugo.io/getting-started/installing/\">сторінку встановлення Hugo</a>, там описано кілька способів встановлення Hugo під Windows. Я пам’ятаю, що використовував Chocolatey (Windows) як спосіб установлення.</p>\n<p>Якщо ви використовували Chocolatey, спробуйте спочатку цю команду: <code>choco uninstall hugo</code></p>\n<p>Якщо ви бачите це повідомлення, слід вдатися до крайнього заходу.</p>\n<p><img alt=\"img\" src=\"/docs/img/choco-uninstall.png\" /></p>\n<hr />\n<h2>Видаліть папку Hugo</h2>\n<p>У своєму провіднику файлів знайдіть і видаліть папку Hugo.</p>\n<p>У моєму випадку це <code>C:\\ProgramData\\chocolatey\\lib\\hugo-extended</code></p>\n<p><img alt=\"img\" src=\"/docs/img/hugo-folder.png\" /></p>\n<p>Тепер перевірте версію Hugo: <code>hugo version</code></p>\n<p>Якщо ви бачите це повідомлення, Hugo видалено.</p>\n<p><img alt=\"img\" src=\"/docs/img/hugo-uninstalled.png\" /></p>\n<hr />\n<h2>Видаліть Chocolatey з Windows</h2>\n<p>Як бонус, ось як видалити Chocolatey з комп’ютера.</p>\n<ol>\n<li>\n<p>Перевірте, чи встановлено Chocolatey на вашому комп’ютері: <code>choco version</code></p>\n<p><img alt=\"img\" src=\"/docs/img/choco-version.png\" /></p>\n</li>\n<li>\n<p>Знайдіть папку з Chocolatey і видаліть її.</p>\n<p>У моєму випадку це <code>C:\\ProgramData\\chocolatey</code></p>\n<p><img alt=\"img\" src=\"/docs/img/choco-folder.png\" /></p>\n</li>\n<li>\n<p>Введіть команду <code>choco version</code>.</p>\n<p>Ви повинні побачити це повідомлення.</p>\n<p><img alt=\"img\" src=\"/docs/img/choco-not-installed.png\" /></p>\n</li>\n</ol>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/static-site-generators/remove-hugo/"
  },
  {
    "title": "Генератори статичних сайтів",
    "content": "<p>{{% pageinfo %}}\nУ цьому розділі йдеться про налаштування різноманітних генераторів статичних сайтів.\n{{% /pageinfo %}}</p>\n<p>У цих інструкціях я розповім про мій досвід налаштування генераторів статичних сайтів: Jekyll, Hugo тощо.</p>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/static-site-generators/_"
  },
  {
    "title": "Налаштувати Vale",
    "content": "<p>{{% pageinfo %}}\nНаша мета — налаштувати Vale, щоб перевіряти файли Markdown.\n{{% /pageinfo %}}</p>\n<h2>Попередні умови</h2>\n<p>Перед тим, як нашаштовувати Vale:</p>\n<ol>\n<li>\n<p>Перевірте, чи встановлено Git.</p>\n<p><code>PowerShell\ngit version</code></p>\n<p>Якщо у вас не встановлено Git, див. статтю про те, як <a href=\"../../static-site-generators/jekyll/#git-client\">устновити клієнт Git</a>.</p>\n</li>\n<li>\n<p>Перевірте, чи встановлено Vale:</p>\n<p><code>PowerShell\nvale --v</code></p>\n<p>Якщо у вас не встановлено Vale, див. статтю про те, як <a href=\"../install-vale/\">установити Vale</a>.</p>\n</li>\n<li>\n<p>Перевірте, чи є у вас на комп’ютері VSCode або інший редактор IDE. Див. статтю з <a href=\"../../static-site-generators/jekyll/#vscode-editor\">інструкціями для редактора коду VSCode</a>.</p>\n</li>\n<li>\n<p>Використовуйте свій репозиторій з файлами Markdown або <a href=\"https://github.com/errata-ai/vale-boilerplate\">цей тестовий репозиторий</a>, де вже є готова конфігурація Vale.</p>\n</li>\n</ol>\n<h2>Завантажте тестовий репозиторій Vale</h2>\n<blockquote>\n<p>Щоб отримати початкову конфігурацію Vale, склонуйте або завантажте файли з тестового репозиторія Vale у GitHub.</p>\n</blockquote>\n<p>To clone the Vale test repository, in your Command Prompt enter:</p>\n<p><code>PowerShell\ngit clone https://github.com/errata-ai/vale-boilerplate.git</code></p>\n<p>Alternatively, you can download the <code>vale-boilerplate</code> folder to your computer from <a href=\"https://github.com/errata-ai/vale-boilerplate\">this repository</a>.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-boilerplate-repo.png\" /></p>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/vale/configure-vale/"
  },
  {
    "title": "Як встановити Vale на Windows",
    "content": "<p>{{% pageinfo %}}\nНаша мета — встановити Vale на комп’ютері з Windows.\n{{% /pageinfo %}}</p>\n<h2>Установіть Chocolatey</h2>\n<blockquote>\n<p>Спочатку перейдіть на офіційну <a href=\"https://docs.errata.ai/vale/install\">сторінку установки Vale</a>. Як бачите, є кілька варіантів. Я вибираю Chocolatey для встановлення Vale.</p>\n</blockquote>\n<p>Щоб установити Chocolatey:</p>\n<ol>\n<li>\n<p>Введіть таку команду в командному рядку. Натисніть <strong>Enter</strong>.</p>\n<p><code>PowerShell\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \" [System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" &amp;&amp; SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"</code></p>\n<p><img alt=\"img\" src=\"/docs/img/choco-install.png\" /></p>\n</li>\n<li>\n<p>Перевірте, чи встановлений у вас Chocolatey:</p>\n<p><code>PowerShell\nchoco version</code></p>\n<p><img alt=\"img\" src=\"/docs/img/choco-version.png\" /></p>\n</li>\n</ol>\n<hr />\n<h2>Установіть Vale</h2>\n<p>Коли ви встановили Chololatey, встановіть Vale.</p>\n<ol>\n<li>\n<p>In the Command Prompt, runУ командному рядку введіть:</p>\n<p><code>PowerShell\nchoco install vale</code></p>\n</li>\n<li>\n<p>Виберіть <code>y</code>, коли потрібно буде зробити вибір.</p>\n<p><img alt=\"img\" src=\"/docs/img/choco-install-vale.png\" /></p>\n</li>\n<li>\n<p>Щоб перевірити, чи встановлено Vale:</p>\n<p><code>PowerShell\nvale --v</code></p>\n<p><img alt=\"img\" src=\"/docs/img/vale-version.png\" /></p>\n<p>Тепер ви готові розпочати подорож з Vale.</p>\n</li>\n</ol>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/vale/install-vale/"
  },
  {
    "title": "Стайлгайди, лінтери, Vale: навіщо це техрайтерам?",
    "content": "<p>{{% pageinfo %}}\nВажливо! Ця стаття стане в нагоді не тільки техрайтерам, але й усім, хто має справу з написанням документації англійською мовою: розробникам, QA-інженерам, бізнес-аналітикам та іншим. Не у всіх командах є техрайтери, тому поради в цій статті допоможуть вам зробити документацію більш якісною.\n{{% /pageinfo %}}</p>\n<p>У цій статті ви дізнаєтесь:</p>\n<ul>\n<li>\n<p>Що таке стайлгайди для техрайтерів.</p>\n</li>\n<li>\n<p>Що таке лінтери взагалі і лінтер для техрайтерів (на прикладі лінтера Vale).</p>\n</li>\n<li>\n<p>Як використовувати Vale для перевірки текстів на відповідність вимогам стайлгайдів Microsoft і Google.</p>\n</li>\n<li>\n<p>Як створити власний стайлгайд для Vale.</p>\n</li>\n</ul>\n<hr />\n<h2>Що таке стайлгайд?</h2>\n<p>Стайлгайд <em>(від англ. style guide)</em> — стилістичний посібник, у якому зібрані рекомендації щодо вживання певних слів, виразів, термінів. Це письмова домовленість для консистентного (однакового) написання та оформлення документації. Стайлгайди створюють, щоб мати <em>a single source of truth</em> (єдине джерело правди), коли у різних людей виникає своє бачення щодо вживання того чи іншого слова в тексті чи оформлення документації.</p>\n<p>Техрайтери (технічні письменники) у своїй роботі використовують рекомендації кількох визнаних стайлгайдів: <a href=\"https://docs.microsoft.com/en-us/style-guide/\">Microsoft Style Guide</a>, <a href=\"https://developers.google.com/style\">Google developer documentation style guide</a> тощо. Один із найдавніших і найвідоміших стайлгайдів — <a href=\"https://www.chicagomanualofstyle.org/book/ed17/frontmatter/toc.html\">The Chicago Manual of Style</a>. Він видається з 1906 року та має більше 1 000 сторінок.</p>\n<p>Хочу наголосити, що рекомендації у стайлгайдах від Майкрософт та інших — це насамперед рекомендації, яких бажано, але необов’язково суворо дотримуватись у своїх текстах. Часто в компаніях існують власні стайлгайди, у яких команда техрайтерів затвердила внутрішню політику із вживання певних термінів, назв. Однак більшість техрайтерів орієнтуються на визнані стайлгайди та не вигадують велосипеда.</p>\n<p>Наведу приклади рекомендацій зі стайлгайдів.</p>\n<ol>\n<li>\n<p>Майкрософт <a href=\"https://docs.microsoft.com/en-us/style-guide/capitalization\">радить</a> починати заголовок або назву розділу з великої літери, а всі інші слова — з маленької. Наприклад, назва цього розділу англійською має бути: <em>What is a style guide?</em> Гугл <a href=\"https://developers.google.com/style/capitalization#capitalization-in-titles-and-headings\">рекомендує</a> те саме.</p>\n</li>\n<li>\n<p>Відповідно до стайлгайдів <a href=\"https://docs.microsoft.com/en-us/style-guide/capitalization#sentence-style-capitalization-in-titles-and-headings\">Майкрософт</a> і <a href=\"https://developers.google.com/style/capitalization#capitalization-in-titles-and-headings\">Гугл</a>, якщо в заголовку чи назві розділу є двокрапка, як у назві цієї статті, потрібно писати з великої літери слово після двокрапки: <em>Style guides, linters, and Vale: Why do tech writers need this?</em></p>\n</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/style-guide/punctuation/commas#use-a-comma\">Майкрософт</a> і <a href=\"https://developers.google.com/style/commas#serial-commas\">Гугл</a> радять використовувати «оксфордську кому» (Oxford or serial comma) перед сполучниками and або or у переліку з трьох і більше предметів, понять тощо: <em>I dedicate this book to my parents, Ayn Rand, and God.</em></p>\n</li>\n</ol>\n<p>Отже, стайлгайди — це збірник корисних порад для техрайтерів і всіх, хто хоче писати відповідно до визнаних стандартів технічної документації. Знання стайлгайдів — це одна з компетенцій техрайтера, навіть початківця. Досвідчені техрайтери самі створюють стайлгайди в компанії, де працюють. Однак усі техрайтери орієнтуються на відомі стайлгайди, як на еталон.</p>\n<p>А тепер, коли ми дізналися, що таке стайлгайди, виникає питання: як застосовувати ці рекомендації на практиці? Звісно, можна читати стайлгайд від Майкрософт як звичайну книгу: запам’ятовувати та виписувати особливо корисні поради та випадки. Проте це довгий шлях: у друкованому стайлгайді Microsoft Manual of Style майже 500 сторінок, а ще є стайлгайд від Гугл. Досвідчені техрайтери знають напам’ять найважливіші рекомендації, але іноді й вони роблять помилки чи пропускають їх у текстах під час редагування — усі ми люди.</p>\n<p>Є інструменти, що автоматизують перевірку текстів на відповідність вимогам стайлгайдів Майкрософт, Гугл. Один із таких інструментів — лінтер Vale.</p>\n<h2>Що таке лінтери?</h2>\n<p>Лінтер <em>(англ. linter або lint)</em> — інструмент автоматичного аналізу коду на відповідність певним вимогам і правилам: синтаксис, стилістика тощо. Цей термін вигадав у 1978 р. програміст <a href=\"https://en.wikipedia.org/wiki/Stephen_C._Johnson\">Стівен Джонсон</a> для пошуку помилок у коді мови С. У буквальному сенсі лінт — це частинки волокон тканини з бавовни. Стівен порівняв такі частинки, що утворюються під час прання одягу та повинні осідати у фільтрі сушильної машини, з невеличкими помилками в коді, що призводять до серйозних проблем під час компіляції.</p>\n<p>Сучасні розробники коду широко використовують лінтери для дотримання норм синтаксису певних мов програмування, а також для виявлення неправильних конструкцій, що призводять до помилок у коді. ESLint — один з найбільш використовуваних лінтерів для мови JavaScript: за перші місяці 2021 р. цей інструмент завантажували більш ніж <a href=\"https://www.npmtrends.com/jslint-vs-jshint-vs-eslint-vs-tslint-vs-@typescript-eslint/eslint-plugin\">16 млн користувачів на тиждень</a>.</p>\n<p>А тепер найцікавіше — існують лінтери не тільки для коду, але і для текстів. Один з таких лінтерів — це Vale. Цей інструмент створив розробник <a href=\"https://github.com/jdkato\">Джозеф Като</a> для мов з розміткою: Markdown, HTML тощо. Техрайтери використовують лінтер Vale для перевірки текстів на відповідність вимогам стайлгайдів: Microsoft, Google тощо.</p>\n<h2>Vale</h2>\n<p>Лінтер <a href=\"https://docs.errata.ai/vale/about\">Vale</a> — це інструмент, що працює за допомогою командного рядка й перевіряє тексти на відповідність вимогам стайлгайдів або ваших власних правил. Для тих, хто не любить працювати з командним рядком, є комерційний варіант цього інструмента — <a href=\"https://errata.ai/vale-server/\">Vale Server</a>. Однак у цій статті мова піде саме про <a href=\"https://github.com/errata-ai/vale\">безкоштовну версію</a> лінтера Vale.</p>\n<p>Спочатку розберемося, як це працює.</p>\n<h3>Попередні вимоги</h3>\n<ol>\n<li>\n<p>У вас є тексти у форматі Markdown (також підтримуються HTML, reStructuredText, AsciiDoc, DITA, XML). Більше про <a href=\"https://docs.errata.ai/vale/scoping#formats\">підтримку форматів</a>, з якими працює Vale.</p>\n</li>\n<li>\n<p>Вам потрібно перевірити текст у файлах Markdown на відповідність вимогам стайлгайдів Майкрософт, Гугл.</p>\n</li>\n<li>\n<p>Завантажте папку <a href=\"https://github.com/ivancheban/docsy-site/tree/master/styles\">styles</a> із правилами стайлгайдів із <a href=\"https://github.com/ivancheban/docsy-site\">репозиторія GitHub</a>.</p>\n</li>\n<li>\n<p>Завантажте файл з конфігурацією <a href=\"https://github.com/ivancheban/docsy-site/blob/master/.vale.ini\">.vale.ini</a>.</p>\n</li>\n<li>\n<p>Покладіть папку <strong>styles</strong> і файл з конфігурацією <strong>.vale.ini</strong> в корінь вашого проекта з файлами Markdown, які потрібно перевірити. Зазвичай це папка вашого проекта з документацією.</p>\n<p><img alt=\"img\" src=\"/docs/img/test-vale.png\" /></p>\n</li>\n<li>\n<p>Установіть Vale: <a href=\"https://docs.errata.ai/vale/install\">інструкції зі встановлення</a>. Щоб перевірити, чи встановлено Vale: <code>vale --v</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-v.png\" /></p>\n</li>\n</ol>\n<h3>Використання Vale</h3>\n<p>Перейдемо до перевірки файлів Markdown. Я поклав у тестову папку test-vale один файл у форматі Markdown — <strong>jekyll.md</strong>. Це моя <a href=\"https://docsy-site.netlify.app/docs/static-site-generators/jekyll/\">стаття</a> про генератор статичних файлів Jekyll. Я хочу перевірити, наскільки в цій статті я дотримувався рекомендацій стайлгайдів Майкрософт і Гугл. Ну що, поїхали?</p>\n<p>Можна скористатися командним рядком, але там не так красиво підсвічуються помилки та зауваження стайлгайдів.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-cmd.png\" /></p>\n<p>Я використовую редактор коду VSCode для написання та редагування статей у форматі Markdown. У VSCode процес перевірки виглядає набагато краще.</p>\n<ol>\n<li>\n<p>У VSCode відкрийте папку проекта.</p>\n</li>\n<li>\n<p>У терміналі VSCode введіть:</p>\n</li>\n</ol>\n<p><code>sh\nvale filename.md</code></p>\n<p>де <code>filename.md</code> — ваш файл у форматі Markdown, який потрібно перевірити.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-jekyll.png\" /></p>\n<p>Як бачимо, у терміналі VSCode виводяться попередження (warning) жовтим кольором і помилки (error) червоним. Також указані рядки, у яких знайдено помилки. Наприклад, в 11-му рядку (11:1) я вжив займенник our (<em>Our goal is…</em>). Написання від першої особи множини (<em>we, our, us, let’s</em>) — це не помилка, але й не рекомендується відповідно до стайлгайдів <a href=\"https://docs.microsoft.com/en-us/style-guide/grammar/person#avoid-first-person-plural\">Майкрософт</a> і <a href=\"https://developers.google.com/style/pronouns#personal-pronouns\">Гугл</a>. Натомість стайлгайди рекомендують використовувати другу особу (<em>you, your</em>): <em>Your goal is…</em></p>\n<p>Звісно, що вирішувати вам: дослухатися до рекомендацій стайлгайдів або писати, як вважаєте за краще самі. Іноді трапляються <em>false positives</em> — хибні спрацьовування, коли помилки немає. Однак головна мета цієї перевірки — привернути вашу увагу до потенційної проблеми. Наведу ще один приклад, де вже не попередження, а червона помилка.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-terminal.png\" /></p>\n<p>Тут у 54-му рядку я написав: <em>… let's assume that we have Ruby installed.</em> Майкрософт <a href=\"https://docs.microsoft.com/en-us/style-guide/word-choice/use-contractions\">рекомендує</a> писати скорочення <em>we’ve</em> замість <em>we have</em>.</p>\n<h3>Розширення Vale для VSCode</h3>\n<p>Замість того, щоб вводити в терміналі VSCode команду <code>vale filename.md</code> щоразу, коли вам потрібно перевірити файл у форматі Markdown на відповідність вимогам стайлгайдів, установіть розширення (extension) Vale для VSCode.</p>\n<ol>\n<li>\n<p>У розділі розширень VSCode знайдіть і установіть розширення Vale.</p>\n</li>\n<li>\n<p>Налаштуйте конфігурацію розширення:</p>\n<p>a. Виберіть <strong>Use Vale’s CLI instead of Vale Server</strong>.</p>\n<p>b. Введіть шлях до папки проекта, де лежить файл <strong>.vale.ini</strong>. У моєму випадку це: <code>c:\\Users\\ivanc\\test-vale</code>.</p>\n<p>c. У <strong>Vale CLI: Path</strong> введіть <code>vale</code>.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-extension-config.png\" /></p>\n</li>\n</ol>\n<p>Тепер Vale буде перевіряти всі файли у форматі Markdown, які ви відкриваєте в редакторі VSCode. Розширення буде посилатися на папку <strong>styles</strong> і файл конфігурації <strong>.vale.ini</strong>, але тепер не треба копіювати ці файли до будь-якого проекта з файлами Markdown для перевірки.</p>\n<p>Сама перевірка буде здійснюватись автоматично, коли ви відкриєте будь-який файл Markdown у VSCode. Vale буде підкреслювати слова, у яких знайдено проблеми. Ви можете навести курсор на це підкреслення або перейти на вкладку PROBLEMS у терміналі VSCode.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-problems.png\" /></p>\n<p>Можна також переглянути правило відповідного стайлгайда, якщо вибрати <strong>View rule</strong>. Відкриється файл у форматі YML, що лежить у папці відповідного стайлгайда в папці <strong>styles</strong>. У файлі є посилання на це правило в стайлгайді.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-rule.png\" /></p>\n<h3>Створення власного стайлгайда</h3>\n<p>Отже, ми з’ясували, що можемо перевіряти тексти на відповідність стайлгайдам Майкрософт і Гугл. А як щодо власних стайлгайдів? Це також можливо. Можна створювати власні правила та регулярні вирази. Як зразок можете використати існуючі YML-файли правил зі стайлгайдів Майкрософт, Гугл тощо.</p>\n<p>Щоб створити власне правило:</p>\n<ol>\n<li>\n<p>Створіть папку з назвою вашого власного стайлгайда. Наприклад, <strong>my-styleguide</strong>.</p>\n</li>\n<li>\n<p>Покладіть папку <strong>my-styleguide</strong> до папки <strong>styles</strong> з усіма іншими стайлгайдами.</p>\n</li>\n<li>\n<p>Відкрийте файл конфігурації <strong>.vale.ini</strong> у Блокноті.</p>\n</li>\n<li>\n<p>Додайте назву папки свого стайлгайда <strong>my-styleguide</strong> до переліку стайлгайдів.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-ini.png\" /></p>\n</li>\n<li>\n<p>Збережіть файл конфігурації <strong>.vale.ini</strong> у Блокноті.</p>\n</li>\n<li>\n<p>У папці вашого стайлгайда створіть YML-файл правила з такою конфігурацією.</p>\n<p><img alt=\"img\" src=\"/docs/img/rule-1.png\" /></p>\n</li>\n<li>\n<p>Збережіть його з назвою, наприклад, <strong>rule-1.yml</strong>.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-rule-1.png\" /></p>\n<p>Тут ми створюємо правило, щоб Vale нам видавав попередження, якщо написано <em>web-site</em> замість <em>website</em>, <em>dou</em> замість <em>DOU</em> та <em>e-mail</em> замість <em>email</em> незалежно від регістру (великими чи малими літерами).</p>\n</li>\n<li>\n<p>Відкриваємо наш файл Markdown у VSCode.</p>\n<p><img alt=\"img\" src=\"/docs/img/vale-check.png\" /></p>\n<p>Бачимо, що правило нашого стайлгайда спрацювало: Vale видав усі попередження щодо неправильного написання <em>web-site</em>, <em>e-mail</em> та <em>dou</em>.</p>\n</li>\n</ol>\n<h2>Що далі?</h2>\n<p>Усі перевірки, що я навів у попередніх розділах стосуються локальних файлів у форматі Markdown. Лінтер Vale, як і лінтери для коду, можна вбудувати в пайплайн CI/CD, щоб під час кожного коміту та пушу (збереження та передача локальних змін на сервер за допомогою git) відбувалася перевірка лінтером Vale. За наявності помилок ви не зможете передати зміни на сервер. Пайплайн CI/CD можна налаштувати для GitHub, GitLab. Особисто я цього не роблю і перевіряю свої файли локально. Однак знаю, що так працюють техрайтерські команди, що пишуть документацію для <a href=\"https://docs.gitlab.com/ee/development/documentation/testing.html#vale\">GitLab</a>, <a href=\"https://github.com/backstage/backstage\">Spotify</a> та інших продуктів.</p>\n<p>До речі, можете зайти в їхні відкриті репозиторії та подивитися конфігурацію перевірок за допомогою лінтера Vale. Крім того, ви можете додати додаткові стайлгайди до моєї конфігурації. Ось перелік доступних репозиторіїв з <a href=\"https://github.com/errata-ai/styles#available-styles\">офіційно підтримуваними стайлгайдами</a>, з яких я брав стайлгайди Майкрософт і Гугл. Переходите за посиланнями до репозиторія і завантажуєте звідти папку з правилами. Наприклад, <a href=\"https://github.com/errata-ai/Joblint/tree/master/Joblint\">цю папку для стайлгайда Joblint</a>. У цьому стайлгайді правила, за якими Vale перевіряє текст описів вакансій на наявність сексизмів, культурних ляпів, рекрутерських фейлів тощо.</p>\n<p>Ще одна цікава можливість експериментувати зі створенням правил для Vale — їхній сайт <a href=\"https://studio.vale.sh/\">Vale Studio</a>. Тут можна задати правила та регулярні вирази, а також відразу подивитися результат, як відпрацює правило.</p>\n<p>Сподіваюся, що ця стаття допоможе вам автоматизувати перевірку документації на відповідність вимогам стайлгайдів, а також створити власні правила для перевірки лінтером Vale. Пам’ятайте, що людині властиво помилятися, а такі засоби перевірки як Vale допомагають усунути людський фактор.</p>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/vale/vale-styleguides/"
  },
  {
    "title": "Лінтер Vale",
    "content": "<p>{{% pageinfo %}}\nУ цьому розділі наведено покрокові вказівки щодо встановлення та використання лінтера Vale.\n{{% /pageinfo %}}</p>\n<p>У цих інструкціях я ділюсь досвідом встановлення та використання лінтера Vale linter. Щоб дізнатись більше про Vale, див. <a href=\"https://docs.errata.ai/vale/about\">документацію Vale</a>.</p>\n<p>Розробники використовують лінтери для автоматичної перевірки якості коду. Щоб дізнатися більше про лінтери, див. статтю <a href=\"https://sourcelevel.io/blog/what-is-a-linter-and-why-your-team-should-use-it\">Що таке лінтер, і чому ваша команда повинна ним користуватися?</a></p>\n<p>Техрайтери використовують лінтер Vale linter, щоб перевіряти, чи відповідає текст у їх файлах Markdown (HTML, AsciiDoc тощо) вимогам стайлгайдів Microsoft, Google тощо. Файл конфігурації Vale містить шлях до папки стайлгайдів. Кожен стайлгайд має свої правила у вигляді регулярних виразів. Коли ви запускаєте Vale, він шукає слова та вирази у вашому тексті та показує помилки та невідповідність підключеним стайлгайдам. Крім того, ви можете створити список прийнятих слів та список слів, які слід відхилити. Vale виводить попередження, якщо ви використовуєте слова зі списку відхилених.</p>\n<div id=\"chatbot-toggle\">Запитай чат-бота</div>\n<div id=\"chatbot\" style=\"display: none;\">\n  <div id=\"chatbot-header\">\n    <span>Чат-бот</span>\n    <button id=\"chatbot-close\">×</button>\n  </div>\n  <div id=\"chat-messages\"></div>\n  <div id=\"chat-input-area\">\n    <input type=\"text\" id=\"user-input\" placeholder=\"Напишіть питання...\">\n    <button id=\"ask-button\">Надіслати</button>\n  </div>\n</div>\n\n<style>\n#chatbot-toggle {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 1000;\n}\n\n#chatbot {\n  position: fixed;\n  bottom: 70px;\n  right: 20px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n}\n\n#chatbot-header {\n  background-color: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#chatbot-close {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n#chat-messages {\n  height: 200px;\n  overflow-y: auto;\n  padding: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n#chat-input-area {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n#user-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n  margin-bottom: 10px;\n}\n\n#ask-button {\n  align-self: center;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n</style>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const chatbot = document.getElementById('chatbot');\n  const chatbotToggle = document.getElementById('chatbot-toggle');\n  const chatbotClose = document.getElementById('chatbot-close');\n  const chatMessages = document.getElementById('chat-messages');\n  const userInput = document.getElementById('user-input');\n  const askButton = document.getElementById('ask-button');\n  let articles = [];\n\n  // Toggle chatbot visibility\n  chatbotToggle.addEventListener('click', function() {\n    chatbot.style.display = chatbot.style.display === 'none' ? 'flex' : 'none';\n  });\n\n  chatbotClose.addEventListener('click', function() {\n    chatbot.style.display = 'none';\n  });\n\n  // Load the articles when the page loads\n  fetch('/content-ua.json')\n    .then(response => response.json())\n    .then(data => {\n      articles = data;\n      console.log('Статті завантажено:', articles.length);\n    })\n    .catch(error => console.error('Помилка завантаження вмісту:', error));\n\n  function askQuestion() {\n    console.log('askQuestion викликано');\n    const question = userInput.value.toLowerCase();\n    userInput.value = '';\n\n    chatMessages.innerHTML += `<p><strong>Ви:</strong> ${question}</p>`;\n\n    // Search for relevant articles\n    const relevantArticles = articles.filter(article => \n      article.content.toLowerCase().includes(question) ||\n      article.title.toLowerCase().includes(question)\n    );\n\n    if (relevantArticles.length > 0) {\n      let response = \"Я знайшов ці відповідні статті:<br>\";\n      relevantArticles.forEach(article => {\n        response += `- <a href=\"${article.url}\">${article.title}</a><br>`;\n      });\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> ${response}</p>`;\n    } else {\n      chatMessages.innerHTML += `<p><strong>Бот:</strong> Вибачте, я не зміг знайти жодної статті, пов'язаної з вашим запитанням.</p>`;\n    }\n\n    // Scroll to the bottom of the chat messages\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n  }\n\n  // Add click event listener to the button\n  askButton.addEventListener('click', askQuestion);\n\n  // Add keypress event listener to the input field\n  userInput.addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n      askQuestion();\n    }\n  });\n});\n</script>",
    "url": "/ua/docs/vale/_"
  }
]